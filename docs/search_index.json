[["index.html", "Genomic Data Analysis Course Exercises Chapter 1 About 1.1 Usage 1.2 Render book 1.3 Preview book", " Genomic Data Analysis Course Exercises Carson Stacy 2023-10-26 Chapter 1 About This is a compilation of exercises created for a graduate level course in Genomic Data Analysis at the University of Arkansas. 1.1 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 1.2 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.3 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console: bookdown::serve_book() "],["getting-started-in-r.html", "Chapter 2 Getting Started in R 2.1 Exercise Description 2.2 Learning outcomes 2.3 Using R and RStudio 2.4 Load data directly from the URL 2.5 Working with data in R 2.6 Looking at Data in RStudio 2.7 Exploring the data", " Chapter 2 Getting Started in R last updated: 2023-10-26 Installing Packages First things first: Click the “Visual” button in the top-left corner of the code box. This makes the code look more like a word processor. You can always switch back to Source anytime you prefer. The following code installs a set of R packages used in this document – if not already installed – and then loads the packages into R. Note that we utilize the US CRAN repository, but other repositories may be more convenient according to geographic location. if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # the p_load function # A) installs the package if not installed (like install.packages(&quot;package_name&quot;)), # B) loads the package (equivalent of library(package_name)) p_load(&quot;tidyverse&quot;, # An ecosystem of packages for making life in R easier &quot;here&quot;, # For locating files easily &quot;knitr&quot;, # For generating (&quot;knitting&quot;) html or pdf files from .Rmd file &quot;readr&quot;, # For faster and easier reading in files to R &quot;pander&quot;, # For session info at the end of the document &quot;BiocManager&quot;, # For installing Bioconductor R packages &quot;dplyr&quot; # A key part of the tidyverse ecosystem, has useful functions ) 2.1 Exercise Description This activity is intended to familiarize you with using RStudio and the R ecosystem to analyze genomic data 2.2 Learning outcomes At the end of this exercise, you should be able to: open, modify, and knit an Rmd file to a pdf/html output relate Rmarkdown to a traditional lab notebook run commands in an Rmarkdown file 2.3 Using R and RStudio This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: # print a statement print(&quot;R code in a .Rmd chunk works just like a script&quot;) ## [1] &quot;R code in a .Rmd chunk works just like a script&quot; # preform basic calculations 2+2 ## [1] 4 R is a useful tool for analyzing data. Let’s download a data file from GitHub to work with. First, we will download the file manually and open it. Later, we will download the same file directly from the url. Click here to open the file in GitHub and click the download icon to download it to your computer. Use the “Import Dataset” in the Environment panel of RStudio to open the file browser and select the downloaded file You’ll want to use the “From text (readr)…” option Adjust settings to make sure the file loads in properly. Copy the code that the Import Dataset feature provides for reading in the file and paste it in the code chunk below # insert here the code used to load the file in from your computer 2.4 Load data directly from the URL Rather than downloading the file manually and then loading it in from where we downloaded it to, we can just load it directly from the URL, as shown below. A word of caution, this won’t work with any URL and you can’t guarantee the URL will always work in the future. # assign url to a variable DE_data_url &lt;- &quot;https://raw.githubusercontent.com/clstacy/GenomicDataAnalysis_Fa23/main/data/ethanol_stress/msn2-4_mutants_EtOH.txt&quot; # download the data from the web DE_results_msn24_EtOH &lt;- read_tsv(file=DE_data_url) ## Warning: One or more parsing issues, call `problems()` on your data frame for details, ## e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 5756 Columns: 18 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;\\t&quot; ## chr (3): Gene ID, Common Name, Annotation ## dbl (15): logFC: YPS606 (WT) EtOH response, Pvalue: YPS606 (WT) EtOH respons... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Do remember that this function uses the package readr (a part of the tidyverse package we loaded above). If you don’t have that package (1) installed and (2) loaded into your script, it won’t work. Thankfully, the p_load function takes care of both of these simultaneously. 2.5 Working with data in R To get a quick summary of our data and how it looks # take a quick look at how the data is structured glimpse(DE_results_msn24_EtOH) ## Rows: 5,756 ## Columns: 18 ## $ `Gene ID` &lt;chr&gt; &quot;YMR105C&quot;, &quot;YML100W&quot;, &quot;YER053… ## $ `Common Name` &lt;chr&gt; &quot;PGM2&quot;, &quot;TSL1&quot;, &quot;PIC2&quot;, &quot;NCE1… ## $ Annotation &lt;chr&gt; &quot;Phosphoglucomutase&quot;, &quot;Large … ## $ `logFC: YPS606 (WT) EtOH response` &lt;dbl&gt; 7.5999973, 7.7618280, 6.69400… ## $ `Pvalue: YPS606 (WT) EtOH response` &lt;dbl&gt; 9.40e-38, 1.04e-35, 3.03e-39,… ## $ `FDR: YPS606 (WT) EtOH response` &lt;dbl&gt; 3.26e-35, 1.54e-33, 2.07e-36,… ## $ `logFC: YPS606 msn2/4ΔΔ EtOH response` &lt;dbl&gt; 0.78481798, 0.60949852, 1.735… ## $ `Pvalue: YPS606 msn2/4ΔΔ EtOH response` &lt;dbl&gt; 3.430000e-06, 8.401730e-04, 4… ## $ `FDR: YPS606 msn2/4ΔΔ EtOH response` &lt;dbl&gt; 7.420000e-06, 1.398507e-03, 2… ## $ `logFC: WT v msn2/4ΔΔ: EtOH response` &lt;dbl&gt; -6.815179, -7.152329, -4.9580… ## $ `Pvalue: WT v msn2/4ΔΔ: EtOH response` &lt;dbl&gt; 6.34e-32, 2.53e-30, 1.35e-27,… ## $ `FDR: WT v msn2/4ΔΔ: EtOH response` &lt;dbl&gt; 3.65e-28, 7.28e-27, 2.59e-24,… ## $ `logFC: WT v msn2/4ΔΔ: unstressed` &lt;dbl&gt; -0.144061475, -0.365016862, -… ## $ `Pvalue: WT v msn2/4ΔΔ: unstressed` &lt;dbl&gt; 0.350436027, 0.041423492, 0.4… ## $ `FDR: WT v msn2/4ΔΔ:unstressed` &lt;dbl&gt; 0.998531082, 0.998531082, 0.9… ## $ `logFC: WT v msn2/4ΔΔ: EtOH absolute` &lt;dbl&gt; -6.959241, -7.517346, -5.0845… ## $ `Pvalue: WT v msn2/4ΔΔ: EtOH absolute` &lt;dbl&gt; 8.55e-37, 2.04e-35, 3.06e-36,… ## $ `FDR: WT v msn2/4ΔΔ: EtOH absolute` &lt;dbl&gt; 1.64e-33, 1.96e-32, 3.52e-33,… We see in the output there are 5756 rows and 18 columns in the data. The same information should be available in the environment panel of RStudio 2.6 Looking at Data in RStudio If we want to take a closer look at the data, we have a few options. To see just the first few lines we can run the following command: head(DE_results_msn24_EtOH) ## # A tibble: 6 × 18 ## `Gene ID` `Common Name` Annotation logFC: YPS606 (WT) E…¹ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 YMR105C PGM2 Phosphoglucomutase 7.60 ## 2 YML100W TSL1 Large subunit of trehalose 6-p… 7.76 ## 3 YER053C PIC2 Mitochondrial copper and phosp… 6.69 ## 4 YPR149W NCE102 Protein involved in regulation… 0.714 ## 5 YKL035W UGP1 UDP-glucose pyrophosphorylase … 4.42 ## 6 YLR258W GSY2 Glycogen synthase 7.52 ## # ℹ abbreviated name: ¹​`logFC: YPS606 (WT) EtOH response` ## # ℹ 14 more variables: `Pvalue: YPS606 (WT) EtOH response` &lt;dbl&gt;, ## # `FDR: YPS606 (WT) EtOH response` &lt;dbl&gt;, ## # `logFC: YPS606 msn2/4ΔΔ EtOH response` &lt;dbl&gt;, ## # `Pvalue: YPS606 msn2/4ΔΔ EtOH response` &lt;dbl&gt;, ## # `FDR: YPS606 msn2/4ΔΔ EtOH response` &lt;dbl&gt;, ## # `logFC: WT v msn2/4ΔΔ: EtOH response` &lt;dbl&gt;, … This can be difficult to look at. For looking at data similar to an Excel file, RStudio allows this by clicking on the name of the data.frame in the top right corner of the IDE. We can also view a file by typing View(filename). To open the data in a new window, click the “pop out” button next to “filter” just above the opened dataset. 2.7 Exploring the data This dataset includes the log fold changes of gene expression in an experiment testing the ethanol stress response for the YPS606 strain of S. cerevisiae and an msn2/4ΔΔ mutant. There are also additional columns of metadata about each gene. In later classes, we will cover the details included, but we can already start answering questions. Using RStudio, answer the following questions: How many genes are included in this study? Which gene has the highest log fold change in the msn2/4ΔΔ mutant EtOH response? How many HSP genes are differentially expressed (FDR &lt; 0.01) in unstressed conditions for the mutant? Do the genes with the largest magnitude fold changes have the smallest p-values? Which isoform of phosphoglucomutase is upregulated in response to ethanol stress? Do you think msn2/4 is responsible for this difference? Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats, graphics, grDevices, utils, datasets, methods and base other attached packages: BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): sass(v.0.4.7), utf8(v.1.2.3), generics(v.0.1.3), stringi(v.1.7.12), hms(v.1.1.3), digest(v.0.6.33), magrittr(v.2.0.3), evaluate(v.0.22), grid(v.4.3.1), timechange(v.0.2.0), bookdown(v.0.36), fastmap(v.1.1.1), rprojroot(v.2.0.3), jsonlite(v.1.8.7), fansi(v.1.0.5), scales(v.1.2.1), codetools(v.0.2-19), jquerylib(v.0.1.4), cli(v.3.6.1), crayon(v.1.5.2), rlang(v.1.1.1), bit64(v.4.0.5), munsell(v.0.5.0), withr(v.2.5.1), cachem(v.1.0.8), yaml(v.2.3.7), parallel(v.4.3.1), tools(v.4.3.1), tzdb(v.0.4.0), colorspace(v.2.1-0), curl(v.5.1.0), vctrs(v.0.6.4), R6(v.2.5.1), lifecycle(v.1.0.3), bit(v.4.0.5), vroom(v.1.6.4), pkgconfig(v.2.0.3), pillar(v.1.9.0), bslib(v.0.5.1), gtable(v.0.3.4), glue(v.1.6.2), Rcpp(v.1.0.11), xfun(v.0.40), tidyselect(v.1.2.0), rstudioapi(v.0.15.0), htmltools(v.0.5.6.1), rmarkdown(v.2.25) and compiler(v.4.3.1) "],["gene-ontology.html", "Chapter 3 Gene Ontology 3.1 Description 3.2 Learning outcomes 3.3 Analysis Workflow 3.4 Get DE gene list 3.5 The Hypergeometric Distribution in practice 3.6 Now it is your turn 3.7 Questions", " Chapter 3 Gene Ontology last updated: 2023-10-26 Installing Packages The following code installs all of the packages used in this document – if not already installed – and then loads the packages into R. We need to install packages specific to our gene ontology bioinformatic analysis. Many of these packages aren’t available on the R CRAN package repository, instead they are hosted on BioConductor repository that is focused on packages used in biological research. Today, we need to install the package clusterProfiler with the code below. The p_load() function will check the bioconductor repository if the package isn’t on CRAN if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) p_load(&quot;tidyverse&quot;, &quot;here&quot;, &quot;knitr&quot;, &quot;dplyr&quot;, # already downloaded last activity &quot;readr&quot;,&quot;pander&quot;, &quot;BiocManager&quot;, # also from last activity &quot;janitor&quot;, # for cleaning column names &quot;igraph&quot;, &quot;tidytree&quot;, # dependencies that require explicit download on latest Mac OS &quot;ggVennDiagram&quot;, # visualization venn diagram &quot;clusterProfiler&quot;, # for GO enrichment &quot;AnnotationDbi&quot;, # database of common genome annotations &quot;org.Sc.sgd.db&quot; # annotation database for S. cerevesiae ) library(dplyr) 3.1 Description This activity is intended to familiarize you with Gene Ontology analysis and some of the unique challenges that come from working with bioinformatic data. 3.2 Learning outcomes At the end of this exercise, you should be able to: Understand gene ontology and its significance in functional annotation learn to perform a GO enrichment &amp; appropriate statistical methods (hypergeometric &amp; Fisher’s exact test) for the enrichment analysis interpret &amp; critically evaluate the results of GO enrichment &amp; limitations/challenges # we don&#39;t have to run this, but if you install without pacman, we have to do load libraries library(clusterProfiler) library(org.Sc.sgd.db) 3.3 Analysis Workflow Let’s use the same file from last class, this time performing GO term enrichment # assign url to a variable DE_data_url &lt;- &quot;https://raw.githubusercontent.com/clstacy/GenomicDataAnalysis_Fa23/main/data/ethanol_stress/msn2-4_mutants_EtOH.txt&quot; # download the data from the web DE_results_msn24_EtOH &lt;- read_tsv(file=DE_data_url) ## Warning: One or more parsing issues, call `problems()` on your data frame for details, ## e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 5756 Columns: 18 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;\\t&quot; ## chr (3): Gene ID, Common Name, Annotation ## dbl (15): logFC: YPS606 (WT) EtOH response, Pvalue: YPS606 (WT) EtOH respons... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. msn24_EtOH &lt;- # assign a new object name DE_results_msn24_EtOH |&gt; # our object with messy names clean_names() # function from janitor package to make names consistent 3.4 Get DE gene list We need a list of deferentially expressed genes to test for over or under enrichment of terms. Here we choose genes with significantly (FDR&lt;0.05) higher expression (log2-fold change (logFC) greater than 1) in the msn2/4ΔΔ mutant’s EtOH response compared to the wild-type strains EtOH response (positive values in the logFC column of WT vs msn2/4ΔΔ: EtOH response). # subset to just genes with significant fdr &amp; log2FC&gt;1 msn24_EtOH |&gt; filter(log_fc_wt_v_msn2_4dd_et_oh_response &gt; 1 &amp; fdr_wt_v_msn2_4dd_et_oh_response &lt; 0.05) ## # A tibble: 94 × 18 ## gene_id common_name annotation log_fc_yps606_wt_et_…¹ pvalue_yps606_wt_et_…² ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 YOR315W SFG1 Putative … -5.52 4.33e-31 ## 2 YFL051C YFL051C &lt;NA&gt; -4.54 6.37e-27 ## 3 YMR016C SOK2 Nuclear p… -3.09 1.32e-32 ## 4 YPL061W ALD6 Cytosolic… -7.04 4.96e-26 ## 5 YER073W ALD5 Mitochond… -1.88 6.14e-17 ## 6 YBL005W… YBL005W-B Retrotran… 1.91 5.46e-13 ## 7 YBL039C URA7 Major CTP… -6.95 3.62e-41 ## 8 YJL050W MTR4 RNA duple… -4.59 4.73e-36 ## 9 YMR241W YHM2 Citrate a… -1.72 1.72e-20 ## 10 YIL131C FKH1 Forkhead … -2.20 1.23e-27 ## # ℹ 84 more rows ## # ℹ abbreviated names: ¹​log_fc_yps606_wt_et_oh_response, ## # ²​pvalue_yps606_wt_et_oh_response ## # ℹ 13 more variables: fdr_yps606_wt_et_oh_response &lt;dbl&gt;, ## # log_fc_yps606_msn2_4dd_et_oh_response &lt;dbl&gt;, ## # pvalue_yps606_msn2_4dd_et_oh_response &lt;dbl&gt;, ## # fdr_yps606_msn2_4dd_et_oh_response &lt;dbl&gt;, … # the above command gave us what we want, here it is again but saved to a new variable: DE_genes_upregulated_msn24_EtOH &lt;- msn24_EtOH |&gt; filter(log_fc_wt_v_msn2_4dd_et_oh_response &gt; 1 &amp; fdr_wt_v_msn2_4dd_et_oh_response &lt; 0.05) |&gt; pull(gene_id) # get just the gene names Now we have a list of genes (saved as DE_genes_upregulated_msn24_EtOH) that we want to perform GO term enrichment on. Let’s do that now, using the clusterProfiler package’s enrichGO function GO_msn24_EtOH_up_results &lt;- enrichGO( gene = DE_genes_upregulated_msn24_EtOH, OrgDb = &quot;org.Sc.sgd.db&quot;, universe = msn24_EtOH$gene_id, keyType = &quot;ORF&quot;, ont= &quot;BP&quot; ) |&gt; # let&#39;s add a &#39;richFactor&#39; column that gives us the proportion of genes DE in the term mutate(richFactor = Count / as.numeric(sub(&quot;/\\\\d+&quot;, &quot;&quot;, BgRatio))) Now, we can look at the results in table form. # open up the results in a data frame to examine GO_msn24_EtOH_up_results |&gt; as_tibble() |&gt; View() # Here is how we could write this result into a text file: GO_msn24_EtOH_up_results |&gt; as_tibble() |&gt; write_tsv(file = &quot;~/Desktop/GO_msn24_EtOH_up_results.tsv&quot;) Now we can visualize the enrichment results, which shows us gene ontology categories that are enriched in genes with higher expression (upregulated) in the WT vs msn2/4ΔΔ: EtOH response. # a simple visualization plot(barplot(GO_msn24_EtOH_up_results, showCategory = 10)) # a more complicated visualization, with more information density ggplot(GO_msn24_EtOH_up_results, showCategory = 15, aes(richFactor, fct_reorder(Description, richFactor))) + geom_segment(aes(xend = 0, yend = Description)) + geom_point(aes(color = p.adjust, size = Count)) + scale_color_gradientn( colours = c(&quot;#f7ca64&quot;, &quot;#46bac2&quot;, &quot;#7e62a3&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(reverse = TRUE, order = 1) ) + scale_size_continuous(range = c(2, 10)) + xlab(&quot;Rich Factor&quot;) + ylab(NULL) + ggtitle(&quot;Biological Processes&quot;) + theme_bw() You can try adjusting the size of the output figures by clicking the gear icon in the top right of the code chunk and click “use custom figure size”. Note this updates the chunk header so the change is saved. 3.4.1 Saving ggplot output to a file We usually want to save our visualizations for later. When plotting with the ggplot package, there is an easy way to do this. See below: # First, let&#39;s create a folder to save our visualizations dir_visualization &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Visualization/&quot;) if (!dir.exists(dir_visualization)) {dir.create(dir_visualization, recursive = TRUE)} # type ?ggsave in the console for more information via the help page. ggsave( &quot;GO_BP_msn24_EtOH_up_results_lollipopPlot.pdf&quot;, # if we don&#39;t need the image to go to a certain spot, we only need the file name above. plot = last_plot(), # either the last plot, or name of a ggplot object you&#39;ve saved. device = &quot;pdf&quot;, #Can be &quot;png&quot;, &quot;eps&quot;, &quot;ps&quot;, &quot;tex&quot; (pictex), &quot;pdf&quot;, &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;svg&quot; or &quot;wmf&quot; (windows only). # note that pdf, eps, svg are vector/line art, so zooming doesn&#39;t pixelate. path = dir_visualization, # Path of the directory to save plot to. defaults to work dir. scale = 2, # multiplicative scaling factor width = 12, height = 8, units = &quot;cm&quot;, # must be one of: &quot;in&quot;, &quot;cm&quot;, &quot;mm&quot;, &quot;px&quot; dpi = 300, # adjusting this larger gives higher quality plot, making a larger file. limitsize = TRUE, # prevents accidentally making it massive, defaults to TRUE bg = NULL # Background colour. If NULL, uses the plot.background fill value from the plot theme. ) Recall that when we knit this Rmarkdown notebook, we keep a copy of the plots/images there as well, in the same place as the code and analysis used to generate it. However, we may want a higher resolution file of just the image, or the image in a different format. In this case, saving the plot is a useful option for us. The journal Science has the following recommendations: “We prefer prefer ai, eps, pdf, layered psd, tif, and jpeg files. …minimum file resolution of 300 dpi.” 3.5 The Hypergeometric Distribution in practice Notice that the DNA integration process does not have very many genes in the category, but they appear to be highly present in the the upregulated gene list. Specifically, DE genes have this GO term, where in the entire genome, there are only genes. What are the odds that we see this by random chance? let’s do the math: # number of genes that have GO:0015074 (DNA integration) integration_genes = 23 # number of genes that are DE (msn2/4 EtOH response, logFC&gt;1) DE_genes = 91 # number of genes that are both DE and DNA integration genes Overlap = 6 # total number of genes in experiment total = 5538 # number of genes in genome Without doing the math, do you expect these to be underrepresented, overrepresented, or neither? # test for underrepresentation (depletion) phyper(q = Overlap, # number of integration genes that were DE m = DE_genes, # number of DE genes n = total-DE_genes, # number of non DE genes k = integration_genes, # number of observed DE DNA integration genes lower.tail = TRUE) # the probability that X &lt;= x ## [1] 0.9999999 # test for overrepresentation (enrichmen t) phyper(q = Overlap-1, # number of integration genes that were DE # we subtract 1 b/c of lower.tail=FALSE means greater than # without equality, so have to do one less m = DE_genes, # number of DE genes n = total-DE_genes, # number of non DE genes k = integration_genes, # number of observed DE integration genes lower.tail = FALSE) # the probability that X &gt; x ## [1] 1.344447e-06 As we see, there is strong evidence that the number of genes with this GO term is unlikely to be seen due to chance. In layman’s terms, this GO term is enriched in upregulated genes in this contrast. The test for underrepresenation shows there is no support for a hypothesis that this gene is underrepresented in the DE gene list. Interestingly, the hypergeometric distribution is the same thing as the Fisher’s Exact test, so we can rerun the same tests above with a different command: #fisher test for underrepresentation fisher.test(matrix(c(Overlap, DE_genes-Overlap, integration_genes-Overlap, total-DE_genes-integration_genes + Overlap), 2, 2), alternative=&#39;less&#39;)$p.value ## [1] 0.9999999 #fisher test for overrepresentation fisher.test(matrix(c(Overlap, DE_genes-Overlap, integration_genes-Overlap, total-DE_genes-integration_genes + Overlap), 2, 2), alternative=&#39;greater&#39;)$p.value ## [1] 1.344447e-06 How does the p-value that we get from this test compare to the results table? They should match. 3.6 Now it is your turn Try running your own GO enrichment with a different gene list. Some options could be: Start with the WT vs msn2/4ΔΔ: EtOH response again, and this time change to “downregulated” (i.e., genes with higher expression in the wild-type strain compared to the msn2/4ΔΔ mutant). These would potentially include genes with defective induction. See what happens when you change the FDR threshold from a liberal one (0.05) to a more conservative one (0.01). Try different logFC cutoffs. Look at different comparisons in the data file (there are 5 total) Look at a different GO category (we only looked at BP, not MF or CC) Advanced: include multiple filters (e.g., genes upregulated by EtOH stress in the WT strain that ALSO have defective induction during ethanol stress in the msn2/4ΔΔ mutant). The code below is a template for you to modify to complete this activity. The example code below looks at the downregulated genes in response to stress in the WT (choose something else for your gene list) # subset to just genes meeting your requirements DE_genes_GIVE_NAME &lt;- msn24_EtOH |&gt; # change the below line for the filters that you want filter(log_fc_yps606_wt_et_oh_response &lt; 1 &amp; pvalue_yps606_wt_et_oh_response&lt;0.05) |&gt; pull(gene_id) # grabbing just the gene names 3.6.1 Run Enrichment GO_GIVE_NAME_results &lt;- enrichGO( gene = DE_genes_GIVE_NAME, OrgDb = &quot;org.Sc.sgd.db&quot;, universe = msn24_EtOH$gene_id, keyType = &quot;ORF&quot;, ont= &quot;BP&quot; ) |&gt; mutate(richFactor = Count / as.numeric(sub(&quot;/\\\\d+&quot;, &quot;&quot;, BgRatio))) 3.6.2 see the data # open up the results in a data frame to examine GO_GIVE_NAME_results |&gt; as_tibble() |&gt; View() # write out your results to a text file GO_GIVE_NAME_results |&gt; as_tibble() |&gt; write_tsv(file = &quot;~/Desktop/GO_GIVE_NAME_DIRECTION_results.tsv&quot;) 3.6.3 create plots # a simple visualization plot(barplot(GO_GIVE_NAME_results, showCategory = 10)) # built in visualization with dots instead dotplot(GO_GIVE_NAME_results, showCategory=10) # a more complicated visualization, with more information density ggplot(GO_GIVE_NAME_results, showCategory = 15, aes(richFactor, fct_reorder(Description, richFactor))) + geom_segment(aes(xend = 0, yend = Description)) + geom_point(aes(color = p.adjust, size = Count)) + scale_color_gradientn( colours = c(&quot;#f7ca64&quot;, &quot;#46bac2&quot;, &quot;#7e62a3&quot;), trans = &quot;log10&quot;, guide = guide_colorbar(reverse = TRUE, order = 1) ) + scale_size_continuous(range = c(2, 10)) + scale_y_discrete(label = function(x) stringr::str_trunc(x, 50)) + # cut off long names xlab(&quot;Rich Factor&quot;) + ylab(NULL) + ggtitle(&quot;Biological Processes&quot;) + theme_bw() 3.7 Questions Answer the following questions: Which GO term had the smallest adjusted p-value in the upregulated comparison example that we did together? What percent of the genes would we expect to have that GO term in the DE list under the null hypothesis? What percent of the DE genes actually had that GO term? For the upregulated comparision, what GO terms are enriched for genes with pval &lt; 0.01 but fdr &gt; 0.01 and what is their average/median log fold change? For one of your own novel comparisons, explain what comparison you were interested in, and your rationale for the cutoffs you chose for your gene list. For that novel gene list you chose for yourself, which GO term had the smallest adjusted p-value? In simple terms, how would you describe what the “Rich Factor” tells about a given GO term in the gene list. Challenge: create a venn diagram of the GO terms in the GO analysis you ran comparing to the upregulated comparison example. # create a list of the data we want to compare GO_results_list &lt;- list(data.frame(GO_msn24_EtOH_up_results)$ID, data.frame(GO_GIVE_NAME_results)$ID) # visualize the GO results list as a venn diagram ggVennDiagram(GO_results_list, category.names = c(&quot;msn24_EtOH_upregulated&quot;, &quot;[GIVE_NAME]&quot;)) + scale_x_continuous(expand = expansion(mult = .2)) + scale_fill_distiller(palette = &quot;RdBu&quot; ) Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): RColorBrewer(v.1.1-3), rstudioapi(v.0.15.0), jsonlite(v.1.8.7), magrittr(v.2.0.3), farver(v.2.1.1), rmarkdown(v.2.25), ragg(v.1.2.6), fs(v.1.6.3), zlibbioc(v.1.46.0), vctrs(v.0.6.4), memoise(v.2.0.1), RCurl(v.1.98-1.12), ggtree(v.3.8.2), htmltools(v.0.5.6.1), curl(v.5.1.0), gridGraphics(v.0.5-1), sass(v.0.4.7), KernSmooth(v.2.23-22), bslib(v.0.5.1), plyr(v.1.8.9), cachem(v.1.0.8), lifecycle(v.1.0.3), pkgconfig(v.2.0.3), Matrix(v.1.6-1.1), R6(v.2.5.1), fastmap(v.1.1.1), gson(v.0.1.0), GenomeInfoDbData(v.1.2.10), snakecase(v.0.11.1), digest(v.0.6.33), aplot(v.0.2.2), enrichplot(v.1.20.0), colorspace(v.2.1-0), patchwork(v.1.1.3), rprojroot(v.2.0.3), textshaping(v.0.3.7), RSQLite(v.2.3.1), labeling(v.0.4.3), fansi(v.1.0.5), timechange(v.0.2.0), httr(v.1.4.7), polyclip(v.1.10-6), compiler(v.4.3.1), proxy(v.0.4-27), bit64(v.4.0.5), withr(v.2.5.1), downloader(v.0.4), BiocParallel(v.1.34.2), viridis(v.0.6.4), DBI(v.1.1.3), ggforce(v.0.4.1), MASS(v.7.3-60), classInt(v.0.4-10), HDO.db(v.0.99.1), units(v.0.8-4), tools(v.4.3.1), ape(v.5.7-1), scatterpie(v.0.2.1), glue(v.1.6.2), nlme(v.3.1-163), GOSemSim(v.2.26.1), sf(v.1.0-14), grid(v.4.3.1), shadowtext(v.0.1.2), reshape2(v.1.4.4), fgsea(v.1.26.0), generics(v.0.1.3), gtable(v.0.3.4), tzdb(v.0.4.0), class(v.7.3-22), data.table(v.1.14.8), hms(v.1.1.3), tidygraph(v.1.2.3), utf8(v.1.2.3), XVector(v.0.40.0), ggrepel(v.0.9.4), pillar(v.1.9.0), yulab.utils(v.0.1.0), vroom(v.1.6.4), splines(v.4.3.1), tweenr(v.2.0.2), treeio(v.1.24.3), lattice(v.0.21-9), bit(v.4.0.5), tidyselect(v.1.2.0), GO.db(v.3.17.0), Biostrings(v.2.68.1), gridExtra(v.2.3), bookdown(v.0.36), xfun(v.0.40), graphlayouts(v.1.0.1), stringi(v.1.7.12), lazyeval(v.0.2.2), ggfun(v.0.1.3), yaml(v.2.3.7), evaluate(v.0.22), codetools(v.0.2-19), ggraph(v.2.1.0), qvalue(v.2.32.0), RVenn(v.1.1.0), ggplotify(v.0.1.2), cli(v.3.6.1), systemfonts(v.1.0.5), munsell(v.0.5.0), jquerylib(v.0.1.4), Rcpp(v.1.0.11), GenomeInfoDb(v.1.36.4), png(v.0.1-8), parallel(v.4.3.1), blob(v.1.2.4), DOSE(v.3.26.1), bitops(v.1.0-7), viridisLite(v.0.4.2), e1071(v.1.7-13), scales(v.1.2.1), crayon(v.1.5.2), rlang(v.1.1.1), cowplot(v.1.1.1), fastmatch(v.1.1-4) and KEGGREST(v.1.40.1) "],["working-with-sequences-raw-data-quality-control.html", "Chapter 4 Working with Sequences: Raw Data &amp; Quality Control 4.1 Description 4.2 Learning outcomes 4.3 Download fastq 4.4 Examining fastq 4.5 Trimming 4.6 Batch file processing 4.7 QC and adapters 4.8 Running fastqc 4.9 Multiqc for QC on mutliple samples", " Chapter 4 Working with Sequences: Raw Data &amp; Quality Control last updated: 2023-10-26 Package Install As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;) # We also need the bioconductor packages &quot;ShortRead&quot; and &quot;rfastp&quot; for today&#39;s activity. p_load(&quot;Rfastp&quot;, &quot;ShortRead&quot;) 4.1 Description This activity is intended to familiarize you with raw bioinformatic sequence files. Specifically, we’ll be working with short read sequencing data generated from an Illumina platform. 4.2 Learning outcomes At the end of this exercise, you should be able to: Load and read into R a raw gzipped fastq file. Inspect sequence quality and evaluate results. Perform quality control on raw data and save the processed output. Note that instead of {r}, the below chunk uses {bash}, meaning this isn’t r code but bash code (the language used in the terminal). The -nc flag ensures the files are only downloaded if they don’t already exist where you are downloading them. This may take awhile the first time you run it. The below script is a bash command that downloads these files to your computer 4.3 Download fastq # Be sure to change this file path to the path you want your data to go RAW_DATA_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Data/Raw&quot; #if you&#39;re using Windows 10, # in RStudio, go to Tools&gt;Global Options... &gt; Terminal &gt; New Terminals open with... # and choose WSL bash or git bash # next, use: (be sure to put in the correct username) #RAW_DATA_DIR=&quot;/mnt/c/Users/$USER/Desktop/Genomic_Data_Analysis/Data/Raw&quot; # create the destination directory if it doesn&#39;t already exist mkdir -p $RAW_DATA_DIR echo $RAW_DATA_DIR # change to that directory (for this code chunk only) cd $RAW_DATA_DIR pwd # Download the files. # WARNING: curl doesn&#39;t work with relative paths # WT unstressed (mock) curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_MOCK_REP1.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_MOCK_REP2.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_MOCK_REP3.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_MOCK_REP4.fastq.gz?raw=TRUE # WT EtOH curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_ETOH_REP1.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_ETOH_REP2.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_ETOH_REP3.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_WT_ETOH_REP4.fastq.gz?raw=TRUE # msn2/4dd unstressed (mock) curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_MOCK_REP1.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_MOCK_REP2.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_MOCK_REP3.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_MOCK_REP4.fastq.gz?raw=TRUE # msn2/4dd EtOH curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_ETOH_REP1.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_ETOH_REP2.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_ETOH_REP3.fastq.gz?raw=TRUE curl -L -C - -O https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/fastq/YPS606_MSN24_ETOH_REP4.fastq.gz?raw=TRUE # These are subsamples of raw fastq files from a current project in our lab. # Make sure names are as desired cd $RAW_DATA_DIR # This loops through and removes the suffix file for any OS that doesn&#39;t auto do so. for file in *; do newname=$(echo &quot;$file&quot; | sed &#39;s/\\?raw=TRUE//&#39;) mv &quot;$file&quot; &quot;$newname&quot; done # Let&#39;s see what one of these files contains: # if you&#39;re on windows or linux, delete the g from gzcat below gzcat $RAW_DATA_DIR/YPS606_WT_MOCK_REP1.fastq.gz | head -n8 ## /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw ## /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 7257k 100 7257k 0 0 7961k 0 --:--:-- --:--:-- --:--:-- 7961k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 6113k 100 6113k 0 0 8316k 0 --:--:-- --:--:-- --:--:-- 8316k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 7352k 100 7352k 0 0 6882k 0 0:00:01 0:00:01 --:--:-- 12.9M ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 6746k 100 6746k 0 0 9030k 0 --:--:-- --:--:-- --:--:-- 9030k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 0 5774k 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 5774k 100 5774k 0 0 7207k 0 --:--:-- --:--:-- --:--:-- 19.7M ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 0 6438k 0 31831 0 0 45709 0 0:02:24 --:--:-- 0:02:24 45709 56 6438k 56 3609k 0 0 2184k 0 0:00:02 0:00:01 0:00:01 3742k 100 6438k 100 6438k 0 0 3502k 0 0:00:01 0:00:01 --:--:-- 5615k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 6908k 100 6908k 0 0 4237k 0 0:00:01 0:00:01 --:--:-- 8582k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 6020k 100 6020k 0 0 8446k 0 --:--:-- --:--:-- --:--:-- 8446k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 5429k 100 5429k 0 0 6232k 0 --:--:-- --:--:-- --:--:-- 6232k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 5525k 100 5525k 0 0 7484k 0 --:--:-- --:--:-- --:--:-- 13.9M ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 7 6866k 7 494k 0 0 873k 0 0:00:07 --:--:-- 0:00:07 873k 100 6866k 100 6866k 0 0 8877k 0 --:--:-- --:--:-- --:--:-- 30.0M ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 60 6797k 60 4081k 0 0 5477k 0 0:00:01 --:--:-- 0:00:01 5477k 100 6797k 100 6797k 0 0 7781k 0 --:--:-- --:--:-- --:--:-- 20.7M ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 66 7521k 66 4996k 0 0 6212k 0 0:00:01 --:--:-- 0:00:01 6212k 100 7521k 100 7521k 0 0 8430k 0 --:--:-- --:--:-- --:--:-- 28.3M ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 6936k 100 6936k 0 0 8400k 0 --:--:-- --:--:-- --:--:-- 8400k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 6426k 100 6426k 0 0 8192k 0 --:--:-- --:--:-- --:--:-- 8192k ## % Total % Received % Xferd Average Speed Time Time Time Current ## Dload Upload Total Spent Left Speed ## 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 ## 100 6601k 100 6601k 0 0 8491k 0 --:--:-- --:--:-- --:--:-- 8491k ## @K00242:669:HFYYJBBXY:2:1209:22455:7908 1:N:0:GTCCGCAC ## GCAATGGTTTACACCCCACCGTGAGATTAGTATGCAATTTAGATCCATTA ## + ## AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## @K00242:669:HFYYJBBXY:2:1219:16254:46926 1:N:0:GTCCGCAC ## GTCTGATTTGTCTAGATTCTTCGCAAATTTCCAGCCTTCAGAGGCTTCGC ## + ## AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ We have the data downloaded onto our system now, so let’s first take a look at some of these files ourselves The R package ShortRead allows us to look at and process raw fastq files. It has many more features than we will use today. 4.4 Examining fastq Let’s take a look at a fastq file # If you&#39;re using windows, put your username below and uncomment this code before continuing if(.Platform$OS.type == &quot;windows&quot;) { Sys.setenv(R_USER = &quot;C:/Users/$USERNAME&quot;) } # change this directory here to where you have the file saved path_fastq_WT_MOCK_REP1 &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_MOCK_REP1.fastq.gz&quot;) fastq_WT_MOCK_REP1 &lt;- readFastq(path_fastq_WT_MOCK_REP1) # file too big? swap readFastq() for: subsampled_fastq_WT_MOCK_REP1 &lt;- yield(FastqSampler(path_fastq_WT_MOCK_REP1, n=10000)) # where n is the number of reads you want to sample # the fastq files we downloaded are smaller than a normal fastq file, # because they have been subsampled down from their full size for demonstration. A few quick ways to examine the fastq data object # Typing the name of the object gives us a simple summary fastq_WT_MOCK_REP1 ## class: ShortReadQ ## length: 223565 reads; width: 50 cycles # the length() function gives us the total number of reads length(fastq_WT_MOCK_REP1) ## [1] 223565 # We can use the width() function to find the size of each read/sequence in fastq width(fastq_WT_MOCK_REP1) |&gt; head() # add head() pipe to only print first 10 ## [1] 50 50 50 50 50 50 #sread() - Retrieve sequence of reads. sread(fastq_WT_MOCK_REP1) ## DNAStringSet object of length 223565: ## width seq ## [1] 50 GCAATGGTTTACACCCCACCGTGAGATTAGTATGCAATTTAGATCCATTA ## [2] 50 GTCTGATTTGTCTAGATTCTTCGCAAATTTCCAGCCTTCAGAGGCTTCGC ## [3] 50 CTTGAAGTAAGCTTCATCAGCTTCCAACATACCATCGAACCATGGCAACA ## [4] 50 GCACCGGCAATCTTGTTACCCATAGCATCGAATTTATCTTCTTCGTCTTC ## [5] 50 CTGTTACCAACTTGTTGTGACATCTTTCTAGTATAATTTTTAAAGTTCTA ## ... ... ... ## [223561] 50 GGTGATCAACTGGATTCATGGCAACACCACGGGTCTTTGGCCAAGAGTTT ## [223562] 50 CTTCCAAGTCGATGTATCTCTTGTGGATTCTCATTTCGTAGGTTTCCCAA ## [223563] 50 CGTTAGCATCAACTTCGAAGATAGCTTCCAAGACTGGTTCACCAGCTGGC ## [223564] 50 GCTTCTTTTCTTGGACCTTTTTCAATCTATAAAATTCTTCTCTGTCCAAC ## [223565] 50 ACCGAATGGAAGATTGGTCACCCTCGGAACCCATGATATCTTCGAATGGG #quality() - Retrieve quality of reads as ASCII scores. quality(fastq_WT_MOCK_REP1) ## class: FastqQuality ## quality: ## BStringSet object of length 223565: ## width seq ## [1] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## [2] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## [3] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## [4] 50 AAFFFJJJJJJJJJJJJJJFJJFJJJJFJJJJJJJJJJJFJFJJJJJJJJ ## [5] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJ ## ... ... ... ## [223561] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJ ## [223562] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## [223563] 50 AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## [223564] 50 A&lt;FFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ## [223565] 50 AAFFFJJJJJJJJJJJJJJJJJJJJ-7FJJJJJJJJJJJJJJJJJJJJJJ #id() - Retrieve IDs of reads id(fastq_WT_MOCK_REP1) ## BStringSet object of length 223565: ## width seq ## [1] 53 K00242:669:HFYYJBBXY:2:1209:22455:7908 1:N:0:GTCCGCAC ## [2] 54 K00242:669:HFYYJBBXY:2:1219:16254:46926 1:N:0:GTCCGCAC ## [3] 53 K00242:669:HFYYJBBXY:2:2223:29985:7029 1:N:0:GTCCGCAC ## [4] 52 K00242:669:HFYYJBBXY:2:2213:7770:7750 1:N:0:GTCCGCAC ## [5] 54 K00242:669:HFYYJBBXY:2:1223:27813:29606 1:N:0:GTCCGCAC ## ... ... ... ## [223561] 54 K00242:669:HFYYJBBXY:2:1120:22820:46205 1:N:0:GTCCGCAC ## [223562] 54 K00242:669:HFYYJBBXY:2:2209:17239:49054 1:N:0:GTCCGCAC ## [223563] 53 K00242:669:HFYYJBBXY:2:2206:3244:20656 1:N:0:GTCCGCAC ## [223564] 54 K00242:669:HFYYJBBXY:2:2102:28229:16506 1:N:0:GTCCGCAC ## [223565] 53 K00242:669:HFYYJBBXY:2:2204:17381:6712 1:N:0:GTCCGCAC The output of sread() is a DNAStringSet object, so we can use all of the commands from the Biostrings library on the output object. # first, let&#39;s save the output of sread as an object sequence_of_reads &lt;- sread(fastq_WT_MOCK_REP1) # Now, let&#39;s use the biostrings function alphabetFrequency to see # the occurrence of nucleotide bases in reads. alph_freq &lt;- alphabetFrequency(sequence_of_reads) # subset just the first two reads alph_freq[1:2,] ## A C G T M R W S Y K V H D B N - + . ## [1,] 15 11 9 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [2,] 9 13 10 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 We see most of the nucleotides are assigned to A, C, G, or T, with one base in each read an N. A fundamental difference between fasta and fastq files is the Quality scores containined in fastQ. Quality scores are stored as ASCII characters representing -log10 probability of base being wrong (Larger scores would be associated to more confident base calls). A comprehensive description of phred quality can be found on the wiki page for FastQ. To see the fastq encodings, we can run: encoding(quality(fastq_WT_MOCK_REP1)) ## ! &quot; # $ % &amp; &#39; ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ## 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## ; &lt; = &gt; ? @ A B C D E F G H I J K L M N O P Q R S T ## 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ## U V W X Y Z [ \\\\ ] ^ _ ` a b c d e f g h i j k l m n ## 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ## o p q r s t u v w x y z { | } ~ ## 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 The ShortRead package has many functions available to allow us to collect useful metrics from our ShortRead object. One very useful function is the alphabetByCycle() function which provides a quick method to summarise base occurrence of cycles. Here we apply alphabetByCycle() function to the sequence information and show the occurrence of main 4 bases over first 15 cycles. alph_by_cycle &lt;- alphabetByCycle(sequence_of_reads) alph_by_cycle[1:4,1:15] ## cycle ## alphabet [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] ## A 21976 31733 40716 54511 67035 76250 52744 50858 52179 82996 65197 ## C 80979 59940 67520 56801 42469 38578 34934 49605 44865 33367 47832 ## G 91512 46565 44726 59238 53934 41211 34113 40354 43781 41308 50801 ## T 28656 85309 70603 52948 60117 67525 101774 82748 82740 65894 59735 ## cycle ## alphabet [,12] [,13] [,14] [,15] ## A 56240 62322 63066 62605 ## C 50963 43951 43562 46231 ## G 45250 44735 43818 43027 ## T 71112 72557 73119 71702 We can use the table function to identify the number of times a sequence appears in our FastQ file’s sequence reads. readOccurence &lt;- table(sequence_of_reads) # see the top 3 sequences that appear the highest number of times sort(readOccurence,decreasing = TRUE)[1:3] ## sequence_of_reads ## CTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT ## 600 ## CCCCCCCCCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT ## 496 ## CCCCCCCCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT ## 392 We can identify duplicated reads (potentially arising from PCR over amplification) by using the srduplicated() function and the ShortReadQ object. This returns a logical vector identifying which reads’ sequences are duplicates (occur more than once in file). Note that the first time a sequence appears in file is not a duplicate but the second, third, fourth times etc are. duplicates &lt;- srduplicated(fastq_WT_MOCK_REP1) duplicates[1:3] ## [1] FALSE FALSE FALSE # we can use table() to get a quick summary of the seq duplication rate table(duplicates) ## duplicates ## FALSE TRUE ## 140931 82634 The ShortRead package also contains a function to generate a simple quality control report. The qa() function accepts a FastQ file and returns a FastqQA object. qa_WT_MOCK_REP1 &lt;- qa(path_fastq_WT_MOCK_REP1) qa_WT_MOCK_REP1 ## class: FastqQA(10) ## QA elements (access with qa[[&quot;elt&quot;]]): ## readCounts: data.frame(1 3) ## baseCalls: data.frame(1 5) ## readQualityScore: data.frame(512 4) ## baseQuality: data.frame(95 3) ## alignQuality: data.frame(1 3) ## frequentSequences: data.frame(50 4) ## sequenceDistribution: data.frame(76 4) ## perCycle: list(2) ## baseCall: data.frame(231 4) ## quality: data.frame(322 5) ## perTile: list(2) ## readCounts: data.frame(0 4) ## medianReadQualityScore: data.frame(0 4) ## adapterContamination: data.frame(1 1) We can then use the report() function to generate a simple report. myReport_WT_MOCK_REP1 &lt;- report(qa_WT_MOCK_REP1) myReport_WT_MOCK_REP1 ## [1] &quot;/var/folders/y1/f7wyg4vj50dgrg8drv0bn4nc0000gn/T//RtmpbCeGU7/file16b718f864a/index.html&quot; Finally we can review the report in a browser or use the browseURL function to open it in a browser from R. browseURL(myReport_WT_MOCK_REP1) 4.5 Trimming When we observe low quality at the end of reads we may wish to remove the low quality bases for later alignment to the genome. The trimTails() function trims reads from the 3’, removing bases which fall below a desired quality. The trimTails() function accepts arguments specifying the ShortReadQ object, the minimum number of successive bases required to be below quality cut-off for trimming and the actual cut-off score. trimmed_fastq_WT_MOCK_REP1 &lt;- trimTails(fastq_WT_MOCK_REP1, # ShortReadQ object to trim k=10, # integer number of failing letters to trigger trim a=&quot;5&quot;) # character giving letter at or below to &quot;fail&quot; trimmed_fastq_WT_MOCK_REP1 ## class: ShortReadQ ## length: 223565 reads; width: 16..50 cycles Now we have trimmed our FastQ reads, we can export these reads for further analysis using the writeFastq() function writeFastq(trimmed_fastq_WT_MOCK_REP1, &quot;~/Desktop/Genomic_Data_Analysis/WT_MOCK_REP1_shortread_trimmed.fastq.gz&quot;) #path to save file 4.5.1 Automate for list of files There are several utility programs that will provide you with QC and trim your data for you, with less input from you. We like fastp as it does some basic QC and trims your fastq files, and it does it very quickly. To make this available in R, it has been made available in the Bioconductor package Rfastp. By default, fastp will make a html report to summarize your result. But the Rfastp wrapper allows you to look at some of them in R. # create a directory for the output to go into if not already present output_dir &lt;- paste0(dirname(dirname(path_fastq_WT_MOCK_REP1)), &quot;/Trimmed_rfastp&quot;) if (!dir.exists(output_dir)) {dir.create(output_dir, recursive = TRUE)} # if we wanted to just run a single file, we would do so like this: rfastp_report &lt;- rfastp(read1 = path_fastq_WT_MOCK_REP1, outputFastq = paste0(output_dir, &quot;/YPS606_WT_MOCK_REP1&quot;)) # print out the qc summary for this sample df_summary &lt;- qcSummary(rfastp_report) df_summary |&gt; print.data.frame() ## Before_QC After_QC ## total_reads 2.235650e+05 2.235390e+05 ## total_bases 1.117825e+07 1.117695e+07 ## q20_bases 1.110373e+07 1.110280e+07 ## q30_bases 1.096271e+07 1.096189e+07 ## q20_rate 9.933340e-01 9.933660e-01 ## q30_rate 9.807180e-01 9.807590e-01 ## read1_mean_length 5.000000e+01 5.000000e+01 ## gc_content 4.165340e-01 4.165420e-01 4.6 Batch file processing That’s nice, but we rarely just have a single fastq file, and we’d like to look at them all at once. Luckily, we can do that with rfastp. First, we need to get the locations of all of the files we downloaded earlier # adjust to the path where you assigned in RAW_DATA_DIR if using different than default fq_file_dir &lt;- dirname(path_fastq_WT_MOCK_REP1) # this just gets the path file is in. # crate a list of all of the files fastq.files &lt;- list.files(path = fq_file_dir, # where to look pattern = &quot;REP[0-9].fastq.gz$&quot;, # the pattern of file name to find # Note, if you have other fastq files in the folder, they will also be included. full.names = TRUE) # save the full path to the file print(fastq.files) ## [1] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_ETOH_REP1.fastq.gz&quot; ## [2] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_ETOH_REP2.fastq.gz&quot; ## [3] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_ETOH_REP3.fastq.gz&quot; ## [4] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_ETOH_REP4.fastq.gz&quot; ## [5] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_MOCK_REP1.fastq.gz&quot; ## [6] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_MOCK_REP2.fastq.gz&quot; ## [7] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_MOCK_REP3.fastq.gz&quot; ## [8] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_MSN24_MOCK_REP4.fastq.gz&quot; ## [9] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_ETOH_REP1.fastq.gz&quot; ## [10] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_ETOH_REP2.fastq.gz&quot; ## [11] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_ETOH_REP3.fastq.gz&quot; ## [12] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_ETOH_REP4.fastq.gz&quot; ## [13] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_MOCK_REP1.fastq.gz&quot; ## [14] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_MOCK_REP2.fastq.gz&quot; ## [15] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_MOCK_REP3.fastq.gz&quot; ## [16] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Raw/YPS606_WT_MOCK_REP4.fastq.gz&quot; Now we have all of the file paths We can loop through all of the files to perform filtering and trimming. Note there are many arguments that can be modified. Use ?rfastp to learn more. # run rfastp on all fastq files for (i in 1:length(fastq.files)) { # file path to single end read read1 &lt;- fastq.files[i] # assign output file (putting it inside of Data/Trimmed folder) output_name &lt;- paste0(output_dir, &quot;/&quot;, basename(fastq.files[i])) json_report &lt;- rfastp( read1 = read1, outputFastq = str_split(output_name, fixed(&quot;.&quot;))[[1]][1], disableTrimPolyG = FALSE, # cutLowQualFront = TRUE, # cutFrontWindowSize = 3, # cutFrontMeanQual = 10, # cutLowQualTail = TRUE, cutTailWindowSize = 1, # cutTailMeanQual = 5, minReadLength = 15, # trimFrontRead1 = 10, # adapterSequenceRead1 = &#39;GTGTCAGTCACTTCCAGCGG&#39; ) # Print the output file link in the R Markdown document cat(paste0( &quot;[Processing Complete - &quot;, basename(output_name), &quot;](&quot;, output_name, &quot;)\\n\\n&quot; )) } ## [Processing Complete - YPS606_MSN24_ETOH_REP1.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP1.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_ETOH_REP2.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP2.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_ETOH_REP3.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP3.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_ETOH_REP4.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP4.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_MOCK_REP1.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP1.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_MOCK_REP2.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP2.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_MOCK_REP3.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP3.fastq.gz) ## ## [Processing Complete - YPS606_MSN24_MOCK_REP4.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP4.fastq.gz) ## ## [Processing Complete - YPS606_WT_ETOH_REP1.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP1.fastq.gz) ## ## [Processing Complete - YPS606_WT_ETOH_REP2.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP2.fastq.gz) ## ## [Processing Complete - YPS606_WT_ETOH_REP3.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP3.fastq.gz) ## ## [Processing Complete - YPS606_WT_ETOH_REP4.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP4.fastq.gz) ## ## [Processing Complete - YPS606_WT_MOCK_REP1.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP1.fastq.gz) ## ## [Processing Complete - YPS606_WT_MOCK_REP2.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP2.fastq.gz) ## ## [Processing Complete - YPS606_WT_MOCK_REP3.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP3.fastq.gz) ## ## [Processing Complete - YPS606_WT_MOCK_REP4.fastq.gz](/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP4.fastq.gz) 4.6.1 Running RfastP creates several files: XXX_R1.fastq.gz - FASTQ with poor quality reads filtered out XXX.html - HTML file contains a QC report XXX.json - JSON file with all the summary statistics 4.7 QC and adapters Another common tool for quality control is called FastQC, useable via command line or GUI, available at https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ or via pip or conda install in the command line. To use this tool, let’s get conda running on your computer. NOTE: Anaconda is already installed on computers in the computer lab. If you are using your own computer, you’ll need to have conda installed (link to learn more) First, we need to open a terminal window. We will copy code from the below code chunk into the terminal window. . /opt/anaconda3/bin/activate &amp;&amp; conda init #. /opt/anaconda3/bin/activate &amp;&amp; conda activate /opt/anaconda3; # run this command in terminal to make sure conda is activated which conda # copy these 4 lines into terminal and run them conda config --add channels defaults conda config --append channels bioconda conda config --append channels conda-forge conda config --set channel_priority strict # check channel order conda config --show channels Now, we need to create a conda environment with our packages. You can do so with the code below. This may take a couple of minutes the first time we run it. # create an enviornment for our QC packages if conda info --envs | grep -q QC; then echo &quot;environment &#39;QC&#39; already exists&quot;; else conda create -y -n QC fastqc multiqc; fi # see available conda environments conda env list # activate our QC environment conda activate QC # make sure desired packages are working which fastqc which multiqc # get the versions of each software fastqc -v multiqc --version # it&#39;s always good coding practice to deactivate a conda environment at the end of a chunk conda deactivate ## environment &#39;QC&#39; already exists ## # conda environments: ## # ## /Users/clstacy/Library/r-miniconda ## /Users/clstacy/Library/r-miniconda-arm64 ## /Users/clstacy/Library/r-miniconda-arm64/envs/r-reticulate ## /Users/clstacy/Library/r-miniconda/envs/r-reticulate ## base * /Users/clstacy/anaconda3 ## QC /Users/clstacy/anaconda3/envs/QC ## mageck /Users/clstacy/anaconda3/envs/mageck ## salmon /Users/clstacy/anaconda3/envs/salmon ## /Users/clstacy/opt/anaconda3 ## /Users/clstacy/opt/anaconda3/envs/colony_count_nn ## /Users/clstacy/opt/anaconda3/envs/tlcc ## ## /Users/clstacy/anaconda3/envs/QC/bin/fastqc ## /Users/clstacy/anaconda3/envs/QC/bin/multiqc ## FastQC v0.12.1 ## multiqc, version 1.15 4.8 Running fastqc #WARNING: variables in bash you&#39;ve saved in previous chunks won&#39;t be retained in later chunks # We need to set a variable for the folder above raw and trimmed files. DATA_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Data&quot; QC_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/QC&quot; # Activate conda QC environment conda activate QC # show which version of fastqc is active fastqc -v # Function to check if a command is installed, we use this next. command_exists() { command -v &quot;$1&quot; &gt;/dev/null 2&gt;&amp;1 } if command_exists fastqc; then # Continue if fastqc is installed # first, make sure we have the folders to store the fastqc outputs mkdir -p $QC_DIR/fastqc/Raw mkdir -p $QC_DIR/fastqc/Trimmed # run fastqc on the raw data files fastqc $DATA_DIR/Raw/*.fastq.gz -o $QC_DIR/fastqc/Raw # run fastqc on the trimmed data files fastqc $DATA_DIR/Trimmed_rfastp/*.fastq.gz -o $QC_DIR/fastqc/Trimmed if [ $? -ne 0 ]; then echo &quot;FastQC execution failed. It didn&#39;t work.&quot; fi else echo &quot;FastQC is not installed.&quot; fi # deactivate QC conda environment conda deactivate ## FastQC v0.12.1 ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## Started analysis of YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP1.fastq.gz ## Warning: the fonts &quot;Times&quot; and &quot;Times&quot; are not available for the Java logical font &quot;Serif&quot;, which may have unexpected appearance or behavior. Re-enable the &quot;Times&quot; font to remove this warning. ## Started analysis of YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP2.fastq.gz ## Started analysis of YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP3.fastq.gz ## Started analysis of YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP4.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP1.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP2.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Approx 100% complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP3.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP4.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP1.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP1.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP1.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP2.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP2.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP2.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP3.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP3.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP3.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP4.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP4.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP4.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP1.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP1.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP1.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP2.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP2.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP2.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP3.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP3.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP3.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP4.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP4.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP4.fastq.gz ## application/octet-stream ## application/octet-stream ## Started analysis of YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## application/octet-stream ## Approx 5% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Warning: the fonts &quot;Times&quot; and &quot;Times&quot; are not available for the Java logical font &quot;Serif&quot;, which may have unexpected appearance or behavior. Re-enable the &quot;Times&quot; font to remove this warning. ## Started analysis of YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Started analysis of YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Started analysis of YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Analysis complete for YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Approx 100% complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Started analysis of YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 5% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 10% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 15% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 20% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 25% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 30% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 35% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 40% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 45% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 50% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 55% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 60% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 65% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 70% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 75% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 80% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 85% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 90% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Approx 95% complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Analysis complete for YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP1_R1.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP2_R1.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP3_R1.fastq.gz ## Started analysis of YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 5% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 10% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 15% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 20% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 25% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 30% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 35% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 40% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 45% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 50% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 55% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 60% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 65% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 70% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 75% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 80% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 85% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 90% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Approx 95% complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Analysis complete for YPS606_WT_ETOH_REP4_R1.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP1_R1.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP2_R1.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP3_R1.fastq.gz ## Started analysis of YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 5% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 10% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 15% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 20% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 25% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 30% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 35% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 40% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 45% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 50% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 55% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 60% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 65% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 70% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 75% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 80% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 85% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 90% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Approx 95% complete for YPS606_WT_MOCK_REP4_R1.fastq.gz ## Analysis complete for YPS606_WT_MOCK_REP4_R1.fastq.gz This link shows the fastqc output for the trimmed WT_MOCK_REP1.fastq.gz browseURL(&quot;~/Desktop/Genomic_Data_Analysis/QC/fastqc/Trimmed/YPS606_WT_MOCK_REP1_R1_fastqc.html&quot;) We could do this for each of the html fastq files to see how they all look but with a large sample size that takes a long time and can lead to missing important information. 4.9 Multiqc for QC on mutliple samples One of our favorite ways to analyze multiple samples simultaneously is MultiQC a software that combines fastQC (and other) reports Here is the code to run it: # Be sure to change this file path to the path you want to run multiqc QC_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/QC&quot; # activate QC environment conda activate QC # run multiqc on all of the fastqc outputs multiqc $QC_DIR/fastqc -o $QC_DIR -m fastqc -f ## ## /// MultiQC 🔍 | v1.15 ## ## | multiqc | MultiQC Version v1.16 now available! ## | multiqc | Only using modules: fastqc ## | multiqc | Search path : /Users/clstacy/Desktop/Genomic_Data_Analysis/QC/fastqc ## | searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 66/66 ## | fastqc | Found 32 reports ## | multiqc | Report : ../../../Desktop/Genomic_Data_Analysis/QC/multiqc_report.html (overwritten) ## | multiqc | Data : ../../../Desktop/Genomic_Data_Analysis/QC/multiqc_data (overwritten) ## | multiqc | MultiQC complete path_multiqc &lt;- &quot;~/Desktop/Genomic_Data_Analysis/QC/multiqc_report.html&quot; browseURL(path_multiqc) Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): RColorBrewer(v.1.1-3), rstudioapi(v.0.15.0), jsonlite(v.1.8.7), magrittr(v.2.0.3), farver(v.2.1.1), rmarkdown(v.2.25), ragg(v.1.2.6), fs(v.1.6.3), zlibbioc(v.1.46.0), vctrs(v.0.6.4), memoise(v.2.0.1), RCurl(v.1.98-1.12), ggtree(v.3.8.2), S4Arrays(v.1.0.6), htmltools(v.0.5.6.1), curl(v.5.1.0), gridGraphics(v.0.5-1), sass(v.0.4.7), KernSmooth(v.2.23-22), bslib(v.0.5.1), plyr(v.1.8.9), cachem(v.1.0.8), lifecycle(v.1.0.3), pkgconfig(v.2.0.3), Matrix(v.1.6-1.1), R6(v.2.5.1), fastmap(v.1.1.1), gson(v.0.1.0), GenomeInfoDbData(v.1.2.10), snakecase(v.0.11.1), digest(v.0.6.33), aplot(v.0.2.2), enrichplot(v.1.20.0), colorspace(v.2.1-0), patchwork(v.1.1.3), rprojroot(v.2.0.3), textshaping(v.0.3.7), RSQLite(v.2.3.1), hwriter(v.1.3.2.1), labeling(v.0.4.3), fansi(v.1.0.5), timechange(v.0.2.0), abind(v.1.4-5), httr(v.1.4.7), polyclip(v.1.10-6), compiler(v.4.3.1), proxy(v.0.4-27), bit64(v.4.0.5), withr(v.2.5.1), downloader(v.0.4), viridis(v.0.6.4), DBI(v.1.1.3), ggforce(v.0.4.1), MASS(v.7.3-60), DelayedArray(v.0.26.7), rjson(v.0.2.21), classInt(v.0.4-10), HDO.db(v.0.99.1), units(v.0.8-4), tools(v.4.3.1), ape(v.5.7-1), scatterpie(v.0.2.1), glue(v.1.6.2), nlme(v.3.1-163), GOSemSim(v.2.26.1), sf(v.1.0-14), grid(v.4.3.1), shadowtext(v.0.1.2), reshape2(v.1.4.4), fgsea(v.1.26.0), generics(v.0.1.3), gtable(v.0.3.4), tzdb(v.0.4.0), class(v.7.3-22), data.table(v.1.14.8), hms(v.1.1.3), tidygraph(v.1.2.3), utf8(v.1.2.3), ggrepel(v.0.9.4), pillar(v.1.9.0), yulab.utils(v.0.1.0), vroom(v.1.6.4), splines(v.4.3.1), tweenr(v.2.0.2), treeio(v.1.24.3), lattice(v.0.21-9), deldir(v.1.0-9), bit(v.4.0.5), tidyselect(v.1.2.0), GO.db(v.3.17.0), gridExtra(v.2.3), bookdown(v.0.36), xfun(v.0.40), graphlayouts(v.1.0.1), stringi(v.1.7.12), lazyeval(v.0.2.2), ggfun(v.0.1.3), yaml(v.2.3.7), evaluate(v.0.22), codetools(v.0.2-19), interp(v.1.1-4), ggraph(v.2.1.0), qvalue(v.2.32.0), RVenn(v.1.1.0), ggplotify(v.0.1.2), cli(v.3.6.1), systemfonts(v.1.0.5), munsell(v.0.5.0), jquerylib(v.0.1.4), Rcpp(v.1.0.11), png(v.0.1-8), parallel(v.4.3.1), blob(v.1.2.4), jpeg(v.0.1-10), latticeExtra(v.0.6-30), DOSE(v.3.26.1), bitops(v.1.0-7), viridisLite(v.0.4.2), e1071(v.1.7-13), scales(v.1.2.1), crayon(v.1.5.2), rlang(v.1.1.1), cowplot(v.1.1.1), fastmatch(v.1.1-4) and KEGGREST(v.1.40.1) "],["read-mapping.html", "Chapter 5 Read Mapping 5.1 Alignment 5.2 Retrieve the genome 5.3 Build Rsubread Index 5.4 Pseudomapping with Salmon 5.5 Questions", " Chapter 5 Read Mapping last updated: 2023-10-26 As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;) # We also need the Bioconductor packages &quot;Rsubread&quot; for today&#39;s activity. p_load(&quot;Rsubread&quot;) Previously, we filtered and trimmed our raw fastq files. They should be in the folder below, unless you chose a different place to store them. dir_trimmed.fq_files &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp&quot; trimmed_fastq_files &lt;- list.files(path = dir_trimmed.fq_files, pattern = &quot;.fastq.gz$&quot;, full.names = TRUE) trimmed_fastq_files ## [1] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP1_R1.fastq.gz&quot; ## [2] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP2_R1.fastq.gz&quot; ## [3] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP3_R1.fastq.gz&quot; ## [4] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP4_R1.fastq.gz&quot; ## [5] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP1_R1.fastq.gz&quot; ## [6] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP2_R1.fastq.gz&quot; ## [7] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP3_R1.fastq.gz&quot; ## [8] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP4_R1.fastq.gz&quot; ## [9] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP1_R1.fastq.gz&quot; ## [10] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP2_R1.fastq.gz&quot; ## [11] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP3_R1.fastq.gz&quot; ## [12] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP4_R1.fastq.gz&quot; ## [13] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP1_R1.fastq.gz&quot; ## [14] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP2_R1.fastq.gz&quot; ## [15] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP3_R1.fastq.gz&quot; ## [16] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP4_R1.fastq.gz&quot; You should see the full paths to all 16 trimmed fastq files that we will be mapping to the reference genome today. 5.1 Alignment Read sequences are stored in compressed (gzipped) FASTQ files. Before the differential expression analysis can proceed, these reads must be aligned to the yeast genome and counted into annotated genes. This can be achieved with functions in the Rsubread package. 5.2 Retrieve the genome We will use a bash code chunk to download the latest genome # Define the destination file path # You can change this file path to the path you want your data to go, or leave it. REF_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference&quot; # make that directory if it doesn&#39;t already mkdir -p $REF_DIR # Define the URL of reference genome # (latest from ensembl) url=&quot;ftp://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz&quot; # Check if the file already exists at the destination location if [ ! -f &quot;$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz&quot; ]; then echo &quot;Reference genome not found, downloading...&quot; # If the file does not exist, download it using curl curl -o &quot;$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz&quot; &quot;$url&quot; echo &quot;Downloading finished&quot; else echo &quot;File already exists at $REF_DIR Skipping download.&quot; fi ## File already exists at /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference Skipping download. 5.3 Build Rsubread Index The first step in performing the alignment is to build an index. In order to build an index you need to have the fasta file (.fa), which can be downloaded from the UCSC genome browser. This may take several minutes to run. Building the full index using the whole genome usually takes about 30 minutes to an hr on a server for larger Eukaryotic genomes. Because yeast has a relatively small genome size, we are able to build the full index in class. library(Rsubread) # Set path of the reference fasta file reference_genome = path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Reference/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz&quot;) index_reference_genome = path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Reference/index_rsubread_Saccharomyces_cerevisiae.R64-1-1&quot;) # build the index buildindex(basename=index_reference_genome, reference=reference_genome) ## ## ========== _____ _ _ ____ _____ ______ _____ ## ===== / ____| | | | _ \\| __ \\| ____| /\\ | __ \\ ## ===== | (___ | | | | |_) | |__) | |__ / \\ | | | | ## ==== \\___ \\| | | | _ &lt;| _ /| __| / /\\ \\ | | | | ## ==== ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| | ## ========== |_____/ \\____/|____/|_| \\_\\______/_/ \\_\\_____/ ## Rsubread 2.14.2 ## ## //================================= setting ==================================\\\\ ## || || ## || Index name : index_rsubread_Saccharomyces_cerevisiae.R6 ... || ## || Index space : base space || ## || Index split : no-split || ## || Repeat threshold : 100 repeats || ## || Gapped index : no || ## || || ## || Free / total memory : 1.4GB / 8.0GB || ## || || ## || Input files : 1 file in total || ## || o Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz || ## || || ## || || ## || WARNING: the free memory is lower than 3.0GB. || ## || the program may run very slow or crash. || ## || || ## \\\\============================================================================// ## ## //================================= Running ==================================\\\\ ## || || ## || Check the integrity of provided reference sequences ... || ## || No format issues were found || ## || Scan uninformative subreads in reference sequences ... || ## || 11 uninformative subreads were found. || ## || These subreads were excluded from index building. || ## || Estimate the index size... || ## || 8%, 0 mins elapsed, rate=9960.4k bps/s || ## || 16%, 0 mins elapsed, rate=11494.5k bps/s || ## || 24%, 0 mins elapsed, rate=12057.2k bps/s || ## || 33%, 0 mins elapsed, rate=12376.9k bps/s || ## || 41%, 0 mins elapsed, rate=12547.2k bps/s || ## || 49%, 0 mins elapsed, rate=12702.2k bps/s || ## || 58%, 0 mins elapsed, rate=12812.2k bps/s || ## || 66%, 0 mins elapsed, rate=12918.7k bps/s || ## || 74%, 0 mins elapsed, rate=12985.2k bps/s || ## || 83%, 0 mins elapsed, rate=13044.8k bps/s || ## || 91%, 0 mins elapsed, rate=13068.8k bps/s || ## || || ## || WARNING: available memory is lower than 3.0 GB. || ## || The program may run very slow. || ## || Build a gapped index and/or split index into blocks to reduce memory use. || ## || || ## || Build the index... || ## || 8%, 0 mins elapsed, rate=217.5k bps/s || ## || 16%, 0 mins elapsed, rate=249.5k bps/s || ## || 24%, 0 mins elapsed, rate=240.3k bps/s || ## || 33%, 0 mins elapsed, rate=247.0k bps/s || ## || 41%, 0 mins elapsed, rate=251.0k bps/s || ## || 49%, 0 mins elapsed, rate=256.0k bps/s || ## || 58%, 0 mins elapsed, rate=243.3k bps/s || ## || 66%, 0 mins elapsed, rate=232.4k bps/s || ## || 74%, 0 mins elapsed, rate=231.8k bps/s || ## || 83%, 0 mins elapsed, rate=230.8k bps/s || ## || 91%, 0 mins elapsed, rate=231.0k bps/s || ## || Save current index block... || ## || [ 0.0% finished ] || ## || [ 10.0% finished ] || ## || [ 20.0% finished ] || ## || [ 30.0% finished ] || ## || [ 40.0% finished ] || ## || [ 50.0% finished ] || ## || [ 60.0% finished ] || ## || [ 70.0% finished ] || ## || [ 80.0% finished ] || ## || [ 90.0% finished ] || ## || [ 100.0% finished ] || ## || || ## || Total running time: 1.4 minutes. || ## ||Index /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_rsu ... || ## || || ## \\\\============================================================================// We can see the arguments available with the align function from the Rsubread package args(align) ## function (index, readfile1, readfile2 = NULL, type = &quot;rna&quot;, input_format = &quot;gzFASTQ&quot;, ## output_format = &quot;BAM&quot;, output_file = paste(readfile1, &quot;subread&quot;, ## output_format, sep = &quot;.&quot;), phredOffset = 33, nsubreads = 10, ## TH1 = 3, TH2 = 1, maxMismatches = 3, unique = FALSE, nBestLocations = 1, ## indels = 5, complexIndels = FALSE, nTrim5 = 0, nTrim3 = 0, ## minFragLength = 50, maxFragLength = 600, PE_orientation = &quot;fr&quot;, ## nthreads = 1, readGroupID = NULL, readGroup = NULL, keepReadOrder = FALSE, ## sortReadsByCoordinates = FALSE, color2base = FALSE, DP_GapOpenPenalty = -1, ## DP_GapExtPenalty = 0, DP_MismatchPenalty = 0, DP_MatchScore = 2, ## detectSV = FALSE, useAnnotation = FALSE, annot.inbuilt = &quot;mm39&quot;, ## annot.ext = NULL, isGTF = FALSE, GTF.featureType = &quot;exon&quot;, ## GTF.attrType = &quot;gene_id&quot;, chrAliases = NULL) ## NULL This process takes some time to finish. # run the alignment on all of the trimmed_fastq_files align(index=index_reference_genome, readfile1=trimmed_fastq_files, type = &quot;rna&quot;, input_format = &quot;gzFASTQ&quot;, output_format = &quot;BAM&quot;, unique = TRUE, nBestLocations = 1, sortReadsByCoordinates = TRUE, nthreads=6 ) The output of the alignment are bam corresponding to each fastq file. We can get a summary of the proportion of reads that mapped to the reference genome using the propmapped function. # create an object in R listing bam_files &lt;- list.files(path = dir_trimmed.fq_files, pattern = &quot;.BAM$&quot;, full.names = TRUE) bam_files ## [1] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM&quot; ## [2] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM&quot; ## [3] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM&quot; ## [4] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM&quot; ## [5] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM&quot; ## [6] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM&quot; ## [7] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM&quot; ## [8] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM&quot; ## [9] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM&quot; ## [10] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM&quot; ## [11] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM&quot; ## [12] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM&quot; ## [13] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM&quot; ## [14] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM&quot; ## [15] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM&quot; # find the proportion of reads that mapped for each sample props &lt;- propmapped(files=bam_files) props |&gt; print() ## NumTotal NumMapped PropMapped ## YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM 0 0 NaN ## YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM 0 0 NaN ## YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM 199076 173693 0.872496 ## YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM 205792 178785 0.868766 ## YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM 167075 143114 0.856585 ## YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM 169754 146302 0.861847 ## YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM 210001 178664 0.850777 ## YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM 208329 177749 0.853213 ## YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM 181587 159200 0.876715 ## YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM 201551 176904 0.877713 ## YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM 214745 188499 0.877781 ## YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM 187319 164152 0.876323 ## YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM 223539 193407 0.865205 ## YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM 187469 161251 0.860148 ## YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM 0 0 NaN 5.4 Pseudomapping with Salmon Salmon is a widely used pseudomapper. It is not available to use in R, but we can use bash code chunks to run it in the same markdown document. 5.4.1 Create Conda Env First, we need to create a new conda environment for salmon. Depending on your computer, we might need to run this code in terminal. ## Warning, if you did not complete Working_with_Sequences.Rmd activity, # your conda might not be set up correctly for this code. # create an environment for our pseudomapping with Salmon # this code is &quot;extra&quot; because it only creates env if not already existing. if conda info --envs | grep -q salmon; then echo &quot;environment &#39;salmon&#39; already exists&quot;; else CONDA_SUBDIR=osx-64 conda create -y -n salmon -c conda-forge -c bioconda salmon=1.10.0; fi # the channel priority order above is needed to get a recent version via conda. # see available conda environments conda env list # activate our QC environment conda activate salmon # make sure desired packages are working which salmon # help page for using salmon salmon -h # it&#39;s always good coding practice to deactivate # a conda environment at the end of a chunk conda deactivate 5.4.2 Download transcriptome To make an index for Salmon, we need transcript sequences in the FASTA format. # Define the destination file path # Be sure to change this file path to the path you want your data to go REF_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference&quot; # make that directory if it doesn&#39;t already mkdir -p $REF_DIR # Define the URL of reference transcriptome # (latest from ensembl) url=&quot;ftp://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/cdna/Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa.gz&quot; # Check if the file already exists at the destination location if [ ! -f &quot;$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa.gz&quot; ]; then echo &quot;Reference transcriptome not found, downloading...&quot; # If the file does not exist, download it using curl curl -o &quot;$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa.gz&quot; &quot;$url&quot; echo &quot;Downloading finished&quot; else echo &quot;File already exists at $REF_DIR Skipping download.&quot; fi ## File already exists at /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference Skipping download. 5.4.3 Building the Salmon index Salmon can index by using the command salmon index. A recent feature update to Salmon includes an option to map to decoys, we will use the entire genome as the decoy for our index, because the S. cerevesiae genome is small. You can read more at: https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode. # We need to set a variable for where the transcriptome file is REF_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference&quot; TRANSCRIPTOME=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference/Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa.gz&quot; GENOME=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz&quot; # Activate conda salmon environment conda activate salmon # Run a script that generates a decoy.txt file from the genome we downloaded grep &quot;^&gt;&quot; &lt;(gunzip -c $GENOME) | cut -d &quot; &quot; -f 1 &gt; $REF_DIR/decoys.txt sed -i.bak -e &#39;s/&gt;//g&#39; $REF_DIR/decoys.txt # Combine the transcriptome and genome into a single file for indexing cat $TRANSCRIPTOME $GENOME &gt; $REF_DIR/gentrome.fasta.gz # We will use the yeast, but it needs to be indexed by salmon salmon index -t $REF_DIR/gentrome.fasta.gz -d $REF_DIR/decoys.txt -p 4 -i $REF_DIR/index_salmon_Saccharomyces_cerevisiae.R64-1-1 conda deactivate ## Version Info: This is the most recent version of salmon. ## [2023-10-26 12:12:52.539] [jLog] [info] building index ## out : /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 ## [2023-10-26 12:12:52.540] [puff::index::jointLog] [info] Running fixFasta ## ## [Step 1 of 4] : counting k-mers ## ## [2023-10-26 12:12:53.052] [puff::index::jointLog] [warning] Removed 41 transcripts that were sequence duplicates of indexed transcripts. ## [2023-10-26 12:12:53.052] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag ## [2023-10-26 12:12:53.053] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides ## [2023-10-26 12:12:53.053] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts ## wrote 6588 cleaned references ## [2023-10-26 12:12:53.150] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers ## [2023-10-26 12:12:53.603] [puff::index::jointLog] [info] ntHll estimated 11513300 distinct k-mers, setting filter size to 2^28 ## Threads = 4 ## Vertex length = 31 ## Hash functions = 5 ## Filter size = 268435456 ## Capacity = 2 ## Files: ## /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1/ref_k31_fixed.fa ## -------------------------------------------------------------------------------- ## Round 0, 0:268435456 ## Pass Filling Filtering ## 1 2 3 ## 2 1 0 ## True junctions count = 20631 ## False junctions count = 49701 ## Hash table size = 70332 ## Candidate marks count = 194448 ## -------------------------------------------------------------------------------- ## Reallocating bifurcations time: 0 ## True marks count: 93214 ## Edges construction time: 1 ## -------------------------------------------------------------------------------- ## Distinct junctions = 20631 ## ## TwoPaCo::buildGraphMain:: allocated with scalable_malloc; freeing. ## TwoPaCo::buildGraphMain:: Calling scalable_allocation_command(TBBMALLOC_CLEAN_ALL_BUFFERS, 0); ## allowedIn: 14 ## Max Junction ID: 20809 ## seen.size():166481 kmerInfo.size():20810 ## approximateContigTotalLength: 11070364 ## counters for complex kmers: ## (prec&gt;1 &amp; succ&gt;1)=327 | (succ&gt;1 &amp; isStart)=7 | (prec&gt;1 &amp; isEnd)=7 | (isStart &amp; isEnd)=2 ## contig count: 25029 element count: 12321058 complex nodes: 343 ## # of ones in rank vector: 25028 ## [2023-10-26 12:13:01.661] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file. ## [2023-10-26 12:13:01.664] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 ## size = 12321058 ## ----------------------------------------- ## | Loading contigs | Time = 5.9218 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading contig boundaries | Time = 3.1299 ms ## ----------------------------------------- ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## 25028 ## [2023-10-26 12:13:01.699] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure. ## [2023-10-26 12:13:01.700] [puff::index::jointLog] [info] contig count for validation: 25,028 ## [2023-10-26 12:13:01.708] [puff::index::jointLog] [info] Total # of Contigs : 25,028 ## [2023-10-26 12:13:01.708] [puff::index::jointLog] [info] Total # of numerical Contigs : 25,028 ## [2023-10-26 12:13:01.708] [puff::index::jointLog] [info] Total # of contig vec entries: 88,496 ## [2023-10-26 12:13:01.708] [puff::index::jointLog] [info] bits per offset entry 17 ## [2023-10-26 12:13:01.709] [puff::index::jointLog] [info] Done constructing the contig vector. 25029 ## [2023-10-26 12:13:01.721] [puff::index::jointLog] [info] # segments = 25,028 ## [2023-10-26 12:13:01.721] [puff::index::jointLog] [info] total length = 12,321,058 ## [2023-10-26 12:13:01.723] [puff::index::jointLog] [info] Reading the reference files ... ## [2023-10-26 12:13:01.849] [puff::index::jointLog] [info] positional integer width = 24 ## [2023-10-26 12:13:01.849] [puff::index::jointLog] [info] seqSize = 12,321,058 ## [2023-10-26 12:13:01.849] [puff::index::jointLog] [info] rankSize = 12,321,058 ## [2023-10-26 12:13:01.849] [puff::index::jointLog] [info] edgeVecSize = 0 ## [2023-10-26 12:13:01.849] [puff::index::jointLog] [info] num keys = 11,570,218 ## [Building BooPHF] 0.319% elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 0.425% elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 0.433% elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 0.456% elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 0.668% elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 0.71 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 0.79 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.03 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.09 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.09 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.26 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.26 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.51 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.52 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.61 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.69 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.95 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 1.99 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.04 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.2 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.39 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.43 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.57 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.67 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.75 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.95 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 2.99 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.01 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.06 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.37 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.39 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.41 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.52 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.62 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.7 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.9 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 3.94 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.05 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.17 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.28 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.35 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.4 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.61 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.71 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.78 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 4.83 % elapsed: 0 min 0 sec remaining: 0 min 1 sec [Building BooPHF] 5.03 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.05 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.26 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.36 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.47 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.54 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.59 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.76 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.93 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 5.97 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.02 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.25 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.45 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.51 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.69 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.73 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.77 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 6.95 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.12 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.16 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.21 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.39 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.44 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.48 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.64 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.88 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.92 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 7.97 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.15 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.28 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.35 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.38 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.62 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.66 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.67 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.92 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 8.92 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.02 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.18 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.26 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.33 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.36 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.59 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.66 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.77 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 9.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 10.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 11.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 12.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 13.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 14.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 15.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 16.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 17.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 18.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 19.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 20.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 21.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 22.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 23.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 24.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 25.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 26.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 27.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 28.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 29.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 30.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 31.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 32.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 33.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 34.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 35.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 36.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 37.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 38.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 39.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 40.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 41.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 42.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 43.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 44.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 45.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 46.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 47.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 48.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 49.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 50.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 51.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 52.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 53.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 54.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 55.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 56.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 57.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 58.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 59.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 60.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 61.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 62.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 63.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 64.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 65.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 66.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 67.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 68.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 69.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 70.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 71.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 72.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 73.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 74.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 75.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 76.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 77.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 78.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 79.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 80.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 81.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 82.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 83.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 84.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 85.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 86.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 87.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 88.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 89.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 90.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 91.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.5 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.7 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 92.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.2 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.6 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.8 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 93.9 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94.1 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94.3 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94.4 % elapsed: 0 min 0 sec remaining: 0 min 0 sec [Building BooPHF] 94.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 94.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 94.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 94.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 94.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.1 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.1 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.4 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.7 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 95.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.1 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.4 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.7 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 96.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.4 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.7 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 97.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.2 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.3 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 98.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.1 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.3 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.3 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.5 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.6 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.8 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 99.9 % elapsed: 0 min 1 sec remaining: 0 min 0 sec [Building BooPHF] 100 % elapsed: 0 min 1 sec remaining: 0 min 0 sec ## [2023-10-26 12:13:02.402] [puff::index::jointLog] [info] mphf size = 7.22767 MB ## [2023-10-26 12:13:02.411] [puff::index::jointLog] [info] chunk size = 3,080,265 ## [2023-10-26 12:13:02.411] [puff::index::jointLog] [info] chunk 0 = [0, 3,080,282) ## [2023-10-26 12:13:02.411] [puff::index::jointLog] [info] chunk 1 = [3,080,282, 6,160,547) ## [2023-10-26 12:13:02.411] [puff::index::jointLog] [info] chunk 2 = [6,160,547, 9,240,812) ## [2023-10-26 12:13:02.411] [puff::index::jointLog] [info] chunk 3 = [9,240,812, 12,321,028) ## [2023-10-26 12:13:02.916] [puff::index::jointLog] [info] finished populating pos vector ## [2023-10-26 12:13:02.916] [puff::index::jointLog] [info] writing index components ## [2023-10-26 12:13:03.170] [puff::index::jointLog] [info] finished writing dense pufferfish index ## [2023-10-26 12:13:03.174] [jLog] [info] done building index ## for info, total work write each : 2.331 total work inram from level 3 : 4.322 total work raw : 25.000 ## Bitarray 60630080 bits (100.00 %) (array + ranks ) ## final hash 0 bits (0.00 %) (nb in final hash 0) Notice that we combined the fasta file of the transcriptome with the fasta file of the entire genome (in that order) into the gentrome.fasta.gz file which was then indexed. Salmon is a pseudomapper, so it doesn’t create sam/bam files and is instead able to count directly from the fastq files. We will do the pseudomapping and counting all in one step in the next activity. 5.5 Questions 5.5.1 With Rsubread: Question 1: Try aligning the fastq files allowing multi-mapping reads (set unique = FALSE), allowing for up to 6 “best” locations to be reported (nBestLocations = 6), and allow reads to be fractionally counted (fraction = TRUE). Specify the output file names (bam_files_multi) by substituting “.fastq.gz” with “.multi.bam” so we don’t overwrite our unique alignment bam files. # Define the pattern and replacement pattern &lt;- &quot;\\\\.fastq\\\\.gz$&quot; replacement &lt;- &quot;subread.multi.bam&quot; # Create the new file names bam_files_multi &lt;- gsub(pattern, replacement, trimmed_fastq_files) # update this code to run with Rsubread multimapping, as described above. align(index=index_reference_genome, readfile1=trimmed_fastq_files, output_file = ___________, type = &quot;rna&quot;, input_format = &quot;gzFASTQ&quot;, output_format = &quot;BAM&quot;, unique = ____, nBestLocations = ____, nthreads=6 ) Question 2: Look at the proportion of reads mapped and see if we get any more reads mapping by specifying a less stringent criteria. 5.5.2 With Salmon: Question 3: What are the pros and cons of using Salmon vs subread for mapping reads? Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: Rsubread(v.2.14.2), ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): RColorBrewer(v.1.1-3), rstudioapi(v.0.15.0), jsonlite(v.1.8.7), magrittr(v.2.0.3), farver(v.2.1.1), rmarkdown(v.2.25), fs(v.1.6.3), zlibbioc(v.1.46.0), vctrs(v.0.6.4), memoise(v.2.0.1), RCurl(v.1.98-1.12), ggtree(v.3.8.2), S4Arrays(v.1.0.6), htmltools(v.0.5.6.1), gridGraphics(v.0.5-1), sass(v.0.4.7), bslib(v.0.5.1), plyr(v.1.8.9), cachem(v.1.0.8), lifecycle(v.1.0.3), pkgconfig(v.2.0.3), Matrix(v.1.6-1.1), R6(v.2.5.1), fastmap(v.1.1.1), gson(v.0.1.0), GenomeInfoDbData(v.1.2.10), snakecase(v.0.11.1), digest(v.0.6.33), aplot(v.0.2.2), enrichplot(v.1.20.0), colorspace(v.2.1-0), patchwork(v.1.1.3), rprojroot(v.2.0.3), RSQLite(v.2.3.1), hwriter(v.1.3.2.1), fansi(v.1.0.5), timechange(v.0.2.0), abind(v.1.4-5), httr(v.1.4.7), polyclip(v.1.10-6), compiler(v.4.3.1), bit64(v.4.0.5), withr(v.2.5.1), downloader(v.0.4), viridis(v.0.6.4), DBI(v.1.1.3), ggforce(v.0.4.1), MASS(v.7.3-60), DelayedArray(v.0.26.7), rjson(v.0.2.21), HDO.db(v.0.99.1), tools(v.4.3.1), ape(v.5.7-1), scatterpie(v.0.2.1), glue(v.1.6.2), nlme(v.3.1-163), GOSemSim(v.2.26.1), grid(v.4.3.1), shadowtext(v.0.1.2), reshape2(v.1.4.4), fgsea(v.1.26.0), generics(v.0.1.3), gtable(v.0.3.4), tzdb(v.0.4.0), data.table(v.1.14.8), hms(v.1.1.3), tidygraph(v.1.2.3), utf8(v.1.2.3), ggrepel(v.0.9.4), pillar(v.1.9.0), yulab.utils(v.0.1.0), splines(v.4.3.1), tweenr(v.2.0.2), treeio(v.1.24.3), lattice(v.0.21-9), deldir(v.1.0-9), bit(v.4.0.5), tidyselect(v.1.2.0), GO.db(v.3.17.0), gridExtra(v.2.3), bookdown(v.0.36), xfun(v.0.40), graphlayouts(v.1.0.1), stringi(v.1.7.12), lazyeval(v.0.2.2), ggfun(v.0.1.3), yaml(v.2.3.7), evaluate(v.0.22), codetools(v.0.2-19), interp(v.1.1-4), ggraph(v.2.1.0), qvalue(v.2.32.0), RVenn(v.1.1.0), ggplotify(v.0.1.2), cli(v.3.6.1), munsell(v.0.5.0), jquerylib(v.0.1.4), Rcpp(v.1.0.11), png(v.0.1-8), parallel(v.4.3.1), blob(v.1.2.4), jpeg(v.0.1-10), latticeExtra(v.0.6-30), DOSE(v.3.26.1), bitops(v.1.0-7), viridisLite(v.0.4.2), scales(v.1.2.1), crayon(v.1.5.2), rlang(v.1.1.1), cowplot(v.1.1.1), fastmatch(v.1.1-4) and KEGGREST(v.1.40.1) "],["read-counting.html", "Chapter 6 Read Counting 6.1 featureCounts 6.2 Salmon 6.3 Questions", " Chapter 6 Read Counting last updated: 2023-10-26 As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;) # We also need the Bioconductor packages &quot;Rsubread&quot; for today&#39;s activity. p_load(&quot;Rsubread&quot;) 6.1 featureCounts We will first show how to use the `featureCounts() function in the Rsubread package to generate counts from the mapped .bam files. 6.1.1 Locate BAM files Previously, we aligned our fastq files to the reference genome, generating BAM files. They should be in your “~/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp” folder, unless you chose a different place to store them. # Where the bam files are located (default same as trimmed fastq file location) bam_file_dir &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/&quot; # save list of all of those files with their full path bam.files &lt;- list.files(path = bam_file_dir, pattern = &quot;.subread.BAM$&quot;, full.names = TRUE) # make sure we see what we expect. bam.files ## [1] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM&quot; ## [2] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM&quot; ## [3] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM&quot; ## [4] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM&quot; ## [5] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM&quot; ## [6] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM&quot; ## [7] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM&quot; ## [8] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM&quot; ## [9] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM&quot; ## [10] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM&quot; ## [11] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM&quot; ## [12] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM&quot; ## [13] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM&quot; ## [14] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM&quot; ## [15] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM&quot; ## [16] &quot;/Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp//YPS606_WT_MOCK_REP4_R1.fastq.gz.subread.BAM&quot; You should see the full paths to all 16 trimmed fastq bam files that we will be mapping to the reference genome today. 6.1.2 Retrieve the genome annotation We currently have our raw reads mapped to the genome in the form of bam files. Before the differential expression analysis can proceed, these reads must be assigned and counted towards annotated genes. This can be achieved with functions in the Rsubread package, we all also see how to do this with Salmon. We will use a bash code chunk to download the latest genome annotation # Define the destination file path REF_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference&quot; # If this directory doesn&#39;t exist, you need to first complete the Read_Mapping.Rmd exercise. # Define the URL of reference genome annotation (gtf) # (latest from ensembl) url=&quot;ftp://ftp.ensembl.org/pub/release-110/gtf/saccharomyces_cerevisiae/Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz&quot; # Check if the file already exists at the destination location if [ ! -f &quot;$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz&quot; ]; then echo &quot;Reference genome annotation not found, downloading...&quot; # If the file does not exist, download it using curl curl -o &quot;$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz&quot; &quot;$url&quot; echo &quot;Downloading finished&quot; else echo &quot;File already exists at $REF_DIR Skipping download.&quot; fi ## File already exists at /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference Skipping download. Let’s take a look at the first few lines of the gtf file # see the header columns with metadata starting with #! and delimited with \\t read.delim( path.expand( &quot;~/Desktop/Genomic_Data_Analysis/Reference/Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz&quot; ), header = F, sep = &quot;\\t&quot;, nrows = 10 ) ## V1 ## 1 #!genome-build R64-1-1 ## 2 #!genome-version R64-1-1 ## 3 #!genome-date 2011-09 ## 4 #!genome-build-accession GCA_000146045.2 ## 5 #!genebuild-last-updated 2018-10 ## 6 IV ## 7 sgd ## 8 gene ## 9 8683 ## 10 9756 ## 11 . ## 12 - ## 13 . ## 14 gene_id YDL246C; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; # We can also take a look at the first few entries to see the columns read.delim( path.expand( &quot;~/Desktop/Genomic_Data_Analysis/Reference/Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz&quot; ), header = F, comment.char = &quot;#&quot;, strip.white = T, nrows = 20 #just the first 20 lines ) ## V1 V2 V3 V4 V5 V6 V7 V8 ## 1 IV sgd gene 8683 9756 . - . ## 2 IV sgd transcript 8683 9756 . - . ## 3 IV sgd exon 8683 9756 . - . ## 4 IV sgd CDS 8686 9756 . - 0 ## 5 IV sgd start_codon 9754 9756 . - 0 ## 6 IV sgd stop_codon 8683 8685 . - 0 ## 7 IV sgd gene 17577 18566 . - . ## 8 IV sgd transcript 17577 18566 . - . ## 9 IV sgd exon 17577 18566 . - . ## 10 IV sgd CDS 17580 18566 . - 0 ## 11 IV sgd start_codon 18564 18566 . - 0 ## 12 IV sgd stop_codon 17577 17579 . - 0 ## 13 IV sgd gene 1248154 1249821 . - . ## 14 IV sgd transcript 1248154 1249821 . - . ## 15 IV sgd exon 1248154 1249821 . - . ## 16 IV sgd CDS 1248157 1249821 . - 0 ## 17 IV sgd start_codon 1249819 1249821 . - 0 ## 18 IV sgd stop_codon 1248154 1248156 . - 0 ## 19 IV sgd gene 289572 290081 . - . ## 20 IV sgd transcript 289572 290081 . - . ## V9 ## 1 gene_id YDL246C; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; ## 2 gene_id YDL246C; transcript_id YDL246C_mRNA; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; transcript_name SOR2; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 3 gene_id YDL246C; transcript_id YDL246C_mRNA; exon_number 1; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; transcript_name SOR2; transcript_source sgd; transcript_biotype protein_coding; exon_id YDL246C_mRNA-E1; tag Ensembl_canonical; ## 4 gene_id YDL246C; transcript_id YDL246C_mRNA; exon_number 1; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; transcript_name SOR2; transcript_source sgd; transcript_biotype protein_coding; protein_id YDL246C; tag Ensembl_canonical; ## 5 gene_id YDL246C; transcript_id YDL246C_mRNA; exon_number 1; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; transcript_name SOR2; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 6 gene_id YDL246C; transcript_id YDL246C_mRNA; exon_number 1; gene_name SOR2; gene_source sgd; gene_biotype protein_coding; transcript_name SOR2; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 7 gene_id YDL243C; gene_name AAD4; gene_source sgd; gene_biotype protein_coding; ## 8 gene_id YDL243C; transcript_id YDL243C_mRNA; gene_name AAD4; gene_source sgd; gene_biotype protein_coding; transcript_name AAD4; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 9 gene_id YDL243C; transcript_id YDL243C_mRNA; exon_number 1; gene_name AAD4; gene_source sgd; gene_biotype protein_coding; transcript_name AAD4; transcript_source sgd; transcript_biotype protein_coding; exon_id YDL243C_mRNA-E1; tag Ensembl_canonical; ## 10 gene_id YDL243C; transcript_id YDL243C_mRNA; exon_number 1; gene_name AAD4; gene_source sgd; gene_biotype protein_coding; transcript_name AAD4; transcript_source sgd; transcript_biotype protein_coding; protein_id YDL243C; tag Ensembl_canonical; ## 11 gene_id YDL243C; transcript_id YDL243C_mRNA; exon_number 1; gene_name AAD4; gene_source sgd; gene_biotype protein_coding; transcript_name AAD4; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 12 gene_id YDL243C; transcript_id YDL243C_mRNA; exon_number 1; gene_name AAD4; gene_source sgd; gene_biotype protein_coding; transcript_name AAD4; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 13 gene_id YDR387C; gene_name CIN10; gene_source sgd; gene_biotype protein_coding; ## 14 gene_id YDR387C; transcript_id YDR387C_mRNA; gene_name CIN10; gene_source sgd; gene_biotype protein_coding; transcript_name CIN10; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 15 gene_id YDR387C; transcript_id YDR387C_mRNA; exon_number 1; gene_name CIN10; gene_source sgd; gene_biotype protein_coding; transcript_name CIN10; transcript_source sgd; transcript_biotype protein_coding; exon_id YDR387C_mRNA-E1; tag Ensembl_canonical; ## 16 gene_id YDR387C; transcript_id YDR387C_mRNA; exon_number 1; gene_name CIN10; gene_source sgd; gene_biotype protein_coding; transcript_name CIN10; transcript_source sgd; transcript_biotype protein_coding; protein_id YDR387C; tag Ensembl_canonical; ## 17 gene_id YDR387C; transcript_id YDR387C_mRNA; exon_number 1; gene_name CIN10; gene_source sgd; gene_biotype protein_coding; transcript_name CIN10; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 18 gene_id YDR387C; transcript_id YDR387C_mRNA; exon_number 1; gene_name CIN10; gene_source sgd; gene_biotype protein_coding; transcript_name CIN10; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; ## 19 gene_id YDL094C; gene_source sgd; gene_biotype protein_coding; ## 20 gene_id YDL094C; transcript_id YDL094C_mRNA; gene_source sgd; gene_biotype protein_coding; transcript_source sgd; transcript_biotype protein_coding; tag Ensembl_canonical; There are 9 columns in a standard gtf file, information about each is available here: https://useast.ensembl.org/info/website/upload/gff.html Note that version 2 of gff is identical to the gtf format. 6.1.3 Counting with FeatureCounts library(Rsubread) # Set path of the reference annotation gzipped gtf file reference_annotation = &quot;~/Desktop/Genomic_Data_Analysis/Reference/Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz&quot; We can see the arguments available with the align function from the Rsubread package args(featureCounts) ## function (files, annot.inbuilt = &quot;mm39&quot;, annot.ext = NULL, isGTFAnnotationFile = FALSE, ## GTF.featureType = &quot;exon&quot;, GTF.attrType = &quot;gene_id&quot;, GTF.attrType.extra = NULL, ## chrAliases = NULL, useMetaFeatures = TRUE, allowMultiOverlap = FALSE, ## minOverlap = 1, fracOverlap = 0, fracOverlapFeature = 0, ## largestOverlap = FALSE, nonOverlap = NULL, nonOverlapFeature = NULL, ## readShiftType = &quot;upstream&quot;, readShiftSize = 0, readExtension5 = 0, ## readExtension3 = 0, read2pos = NULL, countMultiMappingReads = TRUE, ## fraction = FALSE, isLongRead = FALSE, minMQS = 0, splitOnly = FALSE, ## nonSplitOnly = FALSE, primaryOnly = FALSE, ignoreDup = FALSE, ## strandSpecific = 0, juncCounts = FALSE, genome = NULL, isPairedEnd = FALSE, ## countReadPairs = TRUE, requireBothEndsMapped = FALSE, checkFragLength = FALSE, ## minFragLength = 50, maxFragLength = 600, countChimericFragments = TRUE, ## autosort = TRUE, nthreads = 1, byReadGroup = FALSE, reportReads = NULL, ## reportReadsPath = NULL, maxMOp = 10, tmpDir = &quot;.&quot;, verbose = FALSE) ## NULL The Phred offset determines the encoding for the base-calling quality string in the FASTQ file. For the Illumina 1.8 format onwards, this encoding is set at +33. However, older formats may use a +64 encoding. Users should ensure that the correct encoding is specified during alignment. If unsure, one can examine the first several quality strings in the FASTQ file. A good rule of thumb is to check whether lower-case letters are present (+64 encoding) or absent (+33). # This command counts the number of each feature per fastq file, #. generating an output we can use later. fc &lt;- featureCounts(bam.files, annot.ext = reference_annotation, isGTFAnnotationFile = TRUE, GTF.featureType = &quot;exon&quot; ) ## ## ========== _____ _ _ ____ _____ ______ _____ ## ===== / ____| | | | _ \\| __ \\| ____| /\\ | __ \\ ## ===== | (___ | | | | |_) | |__) | |__ / \\ | | | | ## ==== \\___ \\| | | | _ &lt;| _ /| __| / /\\ \\ | | | | ## ==== ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| | ## ========== |_____/ \\____/|____/|_| \\_\\______/_/ \\_\\_____/ ## Rsubread 2.14.2 ## ## //========================== featureCounts setting ===========================\\\\ ## || || ## || Input files : 16 BAM files || ## || || ## || YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM || ## || YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM || ## || YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM || ## || YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM || ## || YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM || ## || YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM || ## || YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM || ## || YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM || ## || YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM || ## || YPS606_WT_MOCK_REP4_R1.fastq.gz.subread.BAM || ## || || ## || Paired-end : no || ## || Count read pairs : no || ## || Annotation : Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz ... || ## || Dir for temp files : . || ## || Threads : 1 || ## || Level : meta-feature level || ## || Multimapping reads : counted || ## || Multi-overlapping reads : not counted || ## || Min overlapping bases : 1 || ## || || ## \\\\============================================================================// ## ## //================================= Running ==================================\\\\ ## || || ## || Load annotation file Saccharomyces_cerevisiae.R64-1-1.110.gtf.gz ... || ## || Features : 7507 || ## || Meta-features : 7127 || ## || Chromosomes/contigs : 17 || ## || || ## || Process BAM file YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 233278 || ## || Successfully assigned alignments : 175843 (75.4%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 215810 || ## || Successfully assigned alignments : 161818 (75.0%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 199076 || ## || Successfully assigned alignments : 148581 (74.6%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 205792 || ## || Successfully assigned alignments : 153525 (74.6%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 167075 || ## || Successfully assigned alignments : 122364 (73.2%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 169754 || ## || Successfully assigned alignments : 126310 (74.4%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 210001 || ## || Successfully assigned alignments : 151958 (72.4%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 208329 || ## || Successfully assigned alignments : 153346 (73.6%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 181587 || ## || Successfully assigned alignments : 137526 (75.7%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 201551 || ## || Successfully assigned alignments : 151322 (75.1%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 214745 || ## || Successfully assigned alignments : 161909 (75.4%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 187319 || ## || Successfully assigned alignments : 141422 (75.5%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 223539 || ## || Successfully assigned alignments : 165863 (74.2%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 187469 || ## || Successfully assigned alignments : 138324 (73.8%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 224767 || ## || Successfully assigned alignments : 163337 (72.7%) || ## || Running time : 0.00 minutes || ## || || ## || Process BAM file YPS606_WT_MOCK_REP4_R1.fastq.gz.subread.BAM... || ## || Single-end reads are included. || ## || Total alignments : 206865 || ## || Successfully assigned alignments : 152394 (73.7%) || ## || Running time : 0.00 minutes || ## || || ## || Write the final count table. || ## || Write the read assignment summary. || ## || || ## \\\\============================================================================// We can see what all is stored in the featureCounts output object names(fc) ## [1] &quot;counts&quot; &quot;annotation&quot; &quot;targets&quot; &quot;stat&quot; The statistics of the read mapping can be seen with fc$stats. This reports the numbers of unassigned reads and the reasons why they are not assigned (eg. ambiguity, multi-mapping, secondary alignment, mapping quality, fragment length, chimera, read duplicate, non-junction and so on), in addition to the number of successfully assigned reads for each library. fc$stat ## Status YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM ## 1 Assigned 175843 ## 2 Unassigned_Unmapped 28887 ## 3 Unassigned_Read_Type 0 ## 4 Unassigned_Singleton 0 ## 5 Unassigned_MappingQuality 0 ## 6 Unassigned_Chimera 0 ## 7 Unassigned_FragmentLength 0 ## 8 Unassigned_Duplicate 0 ## 9 Unassigned_MultiMapping 0 ## 10 Unassigned_Secondary 0 ## 11 Unassigned_NonSplit 0 ## 12 Unassigned_NoFeatures 16741 ## 13 Unassigned_Overlapping_Length 0 ## 14 Unassigned_Ambiguity 11807 ## YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM ## 1 161818 ## 2 26525 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 15747 ## 13 0 ## 14 11720 ## YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM ## 1 148581 ## 2 25383 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 14166 ## 13 0 ## 14 10946 ## YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM ## 1 153525 ## 2 27007 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 13608 ## 13 0 ## 14 11652 ## YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM ## 1 122364 ## 2 23961 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 12806 ## 13 0 ## 14 7944 ## YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM ## 1 126310 ## 2 23452 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 11908 ## 13 0 ## 14 8084 ## YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM ## 1 151958 ## 2 31337 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 16741 ## 13 0 ## 14 9965 ## YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM ## 1 153346 ## 2 30580 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 14454 ## 13 0 ## 14 9949 ## YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM ## 1 137526 ## 2 22387 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 11511 ## 13 0 ## 14 10163 ## YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM ## 1 151322 ## 2 24647 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 14578 ## 13 0 ## 14 11004 ## YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM ## 1 161909 ## 2 26246 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 15064 ## 13 0 ## 14 11526 ## YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM ## 1 141422 ## 2 23167 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 12670 ## 13 0 ## 14 10060 ## YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM ## 1 165863 ## 2 30132 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 16586 ## 13 0 ## 14 10958 ## YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM ## 1 138324 ## 2 26218 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 13984 ## 13 0 ## 14 8943 ## YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM ## 1 163337 ## 2 32663 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 17777 ## 13 0 ## 14 10990 ## YPS606_WT_MOCK_REP4_R1.fastq.gz.subread.BAM ## 1 152394 ## 2 29335 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## 11 0 ## 12 14960 ## 13 0 ## 14 10176 6.1.4 Counts object The counts for the samples are stored in fc$counts. We can look at the dimensions of the counts to see how many genes and samples are present. The first number is the number of genes and the second number is the number of samples. dim(fc$counts) ## [1] 7127 16 let’s take a look at the first few lines of fc$counts head(fc$counts) ## YPS606_MSN24_ETOH_REP1_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 2 ## YDR387C 6 ## YDL094C 4 ## YDR438W 5 ## YDR523C 1 ## YPS606_MSN24_ETOH_REP2_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 1 ## YDR387C 10 ## YDL094C 5 ## YDR438W 6 ## YDR523C 1 ## YPS606_MSN24_ETOH_REP3_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 1 ## YDR387C 7 ## YDL094C 7 ## YDR438W 5 ## YDR523C 0 ## YPS606_MSN24_ETOH_REP4_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 4 ## YDR387C 6 ## YDL094C 4 ## YDR438W 3 ## YDR523C 0 ## YPS606_MSN24_MOCK_REP1_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 1 ## YDR387C 1 ## YDL094C 3 ## YDR438W 4 ## YDR523C 0 ## YPS606_MSN24_MOCK_REP2_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 1 ## YDR387C 3 ## YDL094C 1 ## YDR438W 1 ## YDR523C 0 ## YPS606_MSN24_MOCK_REP3_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 0 ## YDR387C 3 ## YDL094C 3 ## YDR438W 3 ## YDR523C 0 ## YPS606_MSN24_MOCK_REP4_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 0 ## YDR387C 6 ## YDL094C 1 ## YDR438W 1 ## YDR523C 1 ## YPS606_WT_ETOH_REP1_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 4 ## YDR387C 9 ## YDL094C 2 ## YDR438W 1 ## YDR523C 0 ## YPS606_WT_ETOH_REP2_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 0 ## YDR387C 7 ## YDL094C 4 ## YDR438W 3 ## YDR523C 1 ## YPS606_WT_ETOH_REP3_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 3 ## YDR387C 12 ## YDL094C 2 ## YDR438W 4 ## YDR523C 1 ## YPS606_WT_ETOH_REP4_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 2 ## YDR387C 7 ## YDL094C 5 ## YDR438W 7 ## YDR523C 1 ## YPS606_WT_MOCK_REP1_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 3 ## YDR387C 4 ## YDL094C 2 ## YDR438W 1 ## YDR523C 0 ## YPS606_WT_MOCK_REP2_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 1 ## YDR387C 2 ## YDL094C 3 ## YDR438W 3 ## YDR523C 0 ## YPS606_WT_MOCK_REP3_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 0 ## YDR387C 9 ## YDL094C 6 ## YDR438W 2 ## YDR523C 0 ## YPS606_WT_MOCK_REP4_R1.fastq.gz.subread.BAM ## YDL246C 0 ## YDL243C 0 ## YDR387C 6 ## YDL094C 5 ## YDR438W 4 ## YDR523C 0 The row names of the fc$counts matrix represent the Systematic Name for each gene (can be Entrez gene identifiers for other organisms) and the column names are the output filenames from calling the align function. The annotation slot shows the annotation information that featureCounts used to summarise reads over genes. head(fc$annotation) ## GeneID Chr Start End Strand Length ## 1 YDL246C IV 8683 9756 - 1074 ## 2 YDL243C IV 17577 18566 - 990 ## 3 YDR387C IV 1248154 1249821 - 1668 ## 4 YDL094C IV 289572 290081 - 510 ## 5 YDR438W IV 1338274 1339386 + 1113 ## 6 YDR523C IV 1485566 1487038 - 1473 6.1.5 Saving fc object for future use We will need to use this object in our next class. We can use the R function saveRDS() to save the R object to your computer, so it can be accessed at a later date. # create a directory for the count output to go into if not already present dir_output_counts &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Data/Counts/Rsubread/&quot;) if (!dir.exists(dir_output_counts)) {dir.create(dir_output_counts, recursive = TRUE)} # save the R data object saveRDS(object = fc, file = paste0(dir_output_counts,&quot;rsubread.yeast_fc_output.Rds&quot;)) # often, we want to share this file as a tsv file. Here is how we can do that: write_tsv(data.frame( fc$annotation[,&quot;GeneID&quot;], fc$counts, stringsAsFactors=FALSE), file=paste0(dir_output_counts,&quot;rsubread.gene_counts.merged.yeast.tsv&quot;)) 6.1.6 RSubread QC We can have a look at the quality scores associated with each base that has been called by the sequencing machine using the qualityScores function in Rsubread. Let’s extract quality scores for 50 reads for the fastq file . # Extract quality scores qs &lt;- qualityScores( filename=&quot;~/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP1_R1.fastq.gz&quot;, nreads=50) ## ## qualityScores Rsubread 2.14.2 ## ## Scan the input file... ## Totally 233278 reads were scanned; the sampling interval is 4665. ## Now extract read quality information... ## ## Completed successfully. Quality scores for 50 reads (equally spaced in the file) are returned. head(qs) ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [1,] 32 32 37 37 37 41 41 41 37 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [2,] 32 32 37 37 37 41 41 41 41 41 41 41 37 41 41 41 41 41 41 41 41 41 41 41 41 ## [3,] 32 32 37 37 37 41 41 41 41 41 37 41 41 37 41 41 41 37 41 41 41 41 41 41 41 ## [4,] 32 32 37 37 37 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [5,] 32 32 37 37 37 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [6,] 32 32 37 37 37 41 41 41 41 41 41 27 37 41 41 41 41 41 41 41 41 41 41 41 41 ## 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## [1,] 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [2,] 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [3,] 41 41 41 41 41 41 41 41 41 41 41 41 41 41 37 41 41 41 41 41 41 41 41 41 41 ## [4,] 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [5,] 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 ## [6,] 41 41 41 41 37 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 We are randomly sampling 50 reads from the file and seeing the quality scores. A quality score of 30 corresponds to a 1 in 1000 chance of an incorrect base call. (A quality score of 10 is a 1 in 10 chance of an incorrect base call.) To look at the overall distribution of quality scores across the sampled reads, we can look at a boxplot boxplot(qs) 6.2 Salmon Let’s go through using salmon to count reads directly from the trimmed fastq.gz files 6.2.1 Pseudomapping &amp; Counting DATA_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp&quot; SALMON_OUT_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon&quot; SALMON_INDEX_DIR=&quot;/Users/$USER/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1&quot; # make the analysis directory if it doesn&#39;t already exist mkdir -p $SALMON_OUT_DIR # activate the salmon environment conda activate salmon # loop through all of the fastq files for fn in $DATA_DIR/*.fastq.gz; do samp=`basename ${fn}` echo &quot;Processing sample ${samp}&quot; # run salmon salmon quant -i $SALMON_INDEX_DIR -l A \\ -r ${fn} \\ --useVBOpt \\ -p 4 --validateMappings -o $SALMON_OUT_DIR/${samp}_quant done # combine all of the output files into a merged count matrix salmon quantmerge --quants $SALMON_OUT_DIR/*_quant --column numreads -o $SALMON_OUT_DIR/salmon.gene_counts.merged.yeast.tsv # remove the _mRNA from gene name sed -i &#39;&#39; -E &#39;s/^([^\\t]+)_mRNA(\\t|$)/\\1\\2/&#39; $SALMON_OUT_DIR/salmon.gene_counts.merged.yeast.tsv # we can also create a table of tpm values per gene by changing the --column flag salmon quantmerge --quants $SALMON_OUT_DIR/*_quant --column tpm \\ -o $SALMON_OUT_DIR/salmon.gene_tpm.merged.yeast.tsv # remove the _mRNA from gene name sed -i &#39;&#39; -E &#39;s/^([^\\t]+)_mRNA(\\t|$)/\\1\\2/&#39; $SALMON_OUT_DIR/salmon.gene_tpm.merged.yeast.tsv conda deactivate ## Processing sample YPS606_MSN24_ETOH_REP1_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP1_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant/logs ## [2023-10-26 16:15:59.990] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:15:59.991] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:15:59.991] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:15:59.991] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:15:59.991] [jointLog] [info] parsing read library format ## ----------------------------------------- ## | Loading contig table | Time = 6.3758 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 1.5446 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 191.33 us ## ----------------------------------------- ## [2023-10-26 16:15:59.992] [jointLog] [info] There is 1 library. ## [2023-10-26 16:15:59.994] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:15:59.995] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading mphf table | Time = 11.646 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 35.129 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 5.7992 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 40.245 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 6.5275 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 579.67 us ## ----------------------------------------- ## [2023-10-26 16:16:00.109] [jointLog] [info] done ## [2023-10-26 16:16:00.199] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:00.201] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:00.201] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:00.378] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:00.789] [jointLog] [info] Thread saw mini-batch with a maximum of 1.32% zero probability fragments ## [2023-10-26 16:16:00.808] [jointLog] [info] Thread saw mini-batch with a maximum of 1.40% zero probability fragments ## [2023-10-26 16:16:00.819] [jointLog] [info] Thread saw mini-batch with a maximum of 1.22% zero probability fragments ## [2023-10-26 16:16:00.824] [jointLog] [info] Thread saw mini-batch with a maximum of 1.32% zero probability fragments ## [2023-10-26 16:16:00.847] [jointLog] [info] Computed 5,478 rich equivalence classes for further processing ## [2023-10-26 16:16:00.847] [jointLog] [info] Counted 186,104 total reads in the equivalence classes ## [2023-10-26 16:16:00.854] [jointLog] [info] Number of mappings discarded because of alignment score : 31,126 ## [2023-10-26 16:16:00.854] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 7,997 ## [2023-10-26 16:16:00.854] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 6,248 ## [2023-10-26 16:16:00.854] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:00.855] [jointLog] [warning] Only 186104 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:00.855] [jointLog] [info] Mapping rate = 79.7778% ## ## [2023-10-26 16:16:00.855] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:00.857] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:00.863] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:00.875] [jointLog] [info] iteration = 0 | max rel diff. = 2057.34 ## [2023-10-26 16:16:02.144] [jointLog] [info] iteration = 100 | max rel diff. = 0.000215242 ## [2023-10-26 16:16:02.145] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:02.145] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_ETOH_REP2_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP2_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:02.564] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:02.564] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:02.564] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:02.564] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:02.564] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:02.564] [jointLog] [info] There is 1 library. ## [2023-10-26 16:16:02.564] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:02.564] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig table | Time = 3.4287 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 129.58 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 35.583 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 5.9878 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.749 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.535 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 27.005 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.0361 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 76.584 us ## ----------------------------------------- ## [2023-10-26 16:16:02.636] [jointLog] [info] done ## [2023-10-26 16:16:02.711] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:02.712] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:02.712] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:02.889] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:03.250] [jointLog] [info] Thread saw mini-batch with a maximum of 1.32% zero probability fragments ## [2023-10-26 16:16:03.274] [jointLog] [info] Thread saw mini-batch with a maximum of 1.22% zero probability fragments ## [2023-10-26 16:16:03.280] [jointLog] [info] Thread saw mini-batch with a maximum of 1.18% zero probability fragments ## [2023-10-26 16:16:03.281] [jointLog] [info] Thread saw mini-batch with a maximum of 1.40% zero probability fragments ## [2023-10-26 16:16:03.307] [jointLog] [info] Computed 5,293 rich equivalence classes for further processing ## [2023-10-26 16:16:03.307] [jointLog] [info] Counted 173,313 total reads in the equivalence classes ## [2023-10-26 16:16:03.314] [jointLog] [info] Number of mappings discarded because of alignment score : 25,173 ## [2023-10-26 16:16:03.314] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 7,099 ## [2023-10-26 16:16:03.314] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,772 ## [2023-10-26 16:16:03.314] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:03.315] [jointLog] [warning] Only 173313 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:03.315] [jointLog] [info] Mapping rate = 80.3081% ## ## [2023-10-26 16:16:03.315] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:03.315] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:03.318] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:03.330] [jointLog] [info] iteration = 0 | max rel diff. = 1476.38 ## [2023-10-26 16:16:04.568] [jointLog] [info] iteration = 100 | max rel diff. = 0.00017473 ## [2023-10-26 16:16:04.568] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:04.568] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_ETOH_REP3_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP3_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:05.148] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:05.148] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:05.148] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:05.148] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:05.148] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:05.148] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 4.4033 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 100.25 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 33.875 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.0534 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## [2023-10-26 16:16:05.149] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:05.149] [jointLog] [info] Loading dense pufferfish index. ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.141 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.5127 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 27.572 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.2762 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 63.959 us ## ----------------------------------------- ## [2023-10-26 16:16:05.221] [jointLog] [info] done ## [2023-10-26 16:16:05.289] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:05.290] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:05.290] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:05.463] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:05.726] [jointLog] [info] Thread saw mini-batch with a maximum of 1.58% zero probability fragments ## [2023-10-26 16:16:05.738] [jointLog] [info] Thread saw mini-batch with a maximum of 1.56% zero probability fragments ## [2023-10-26 16:16:05.742] [jointLog] [info] Thread saw mini-batch with a maximum of 1.52% zero probability fragments ## [2023-10-26 16:16:05.743] [jointLog] [info] Thread saw mini-batch with a maximum of 1.55% zero probability fragments ## [2023-10-26 16:16:05.766] [jointLog] [info] Computed 5,306 rich equivalence classes for further processing ## [2023-10-26 16:16:05.766] [jointLog] [info] Counted 158,068 total reads in the equivalence classes ## [2023-10-26 16:16:05.773] [jointLog] [info] Number of mappings discarded because of alignment score : 19,662 ## [2023-10-26 16:16:05.773] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 6,467 ## [2023-10-26 16:16:05.773] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 4,929 ## [2023-10-26 16:16:05.773] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:05.773] [jointLog] [warning] Only 158068 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:05.773] [jointLog] [info] Mapping rate = 79.4008% ## ## [2023-10-26 16:16:05.773] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:05.774] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:05.777] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:05.788] [jointLog] [info] iteration = 0 | max rel diff. = 483.863 ## [2023-10-26 16:16:07.056] [jointLog] [info] iteration = 100 | max rel diff. = 0.000307156 ## [2023-10-26 16:16:07.056] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:07.056] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_ETOH_REP4_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_ETOH_REP4_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:07.715] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:07.715] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:07.715] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:07.715] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:07.715] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:07.715] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.4127 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 97.084 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 30.875 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.0134 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## [2023-10-26 16:16:07.716] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:07.716] [jointLog] [info] Loading dense pufferfish index. ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.329 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.4595 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 27.063 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.1234 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 66.834 us ## ----------------------------------------- ## [2023-10-26 16:16:07.786] [jointLog] [info] done ## [2023-10-26 16:16:07.853] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:07.854] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:07.854] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:08.029] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:08.297] [jointLog] [info] Thread saw mini-batch with a maximum of 1.26% zero probability fragments ## [2023-10-26 16:16:08.298] [jointLog] [info] Thread saw mini-batch with a maximum of 1.32% zero probability fragments ## [2023-10-26 16:16:08.300] [jointLog] [info] Thread saw mini-batch with a maximum of 1.26% zero probability fragments ## [2023-10-26 16:16:08.322] [jointLog] [info] Thread saw mini-batch with a maximum of 1.20% zero probability fragments ## [2023-10-26 16:16:08.342] [jointLog] [info] Computed 5,260 rich equivalence classes for further processing ## [2023-10-26 16:16:08.342] [jointLog] [info] Counted 165,617 total reads in the equivalence classes ## [2023-10-26 16:16:08.348] [jointLog] [info] Number of mappings discarded because of alignment score : 20,744 ## [2023-10-26 16:16:08.348] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 6,497 ## [2023-10-26 16:16:08.348] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,015 ## [2023-10-26 16:16:08.348] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:08.348] [jointLog] [warning] Only 165617 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:08.348] [jointLog] [info] Mapping rate = 80.4779% ## ## [2023-10-26 16:16:08.348] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:08.348] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:08.351] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:08.361] [jointLog] [info] iteration = 0 | max rel diff. = 1859.21 ## [2023-10-26 16:16:09.656] [jointLog] [info] iteration = 100 | max rel diff. = 0.000249168 ## [2023-10-26 16:16:09.656] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:09.656] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_MOCK_REP1_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP1_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:10.282] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:10.282] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:10.282] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:10.282] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:10.282] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:10.282] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.5464 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 114.71 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 33.167 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 5.8997 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:10.282] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:10.282] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.302 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.4788 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 27.364 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.24 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 70.167 us ## ----------------------------------------- ## [2023-10-26 16:16:10.354] [jointLog] [info] done ## [2023-10-26 16:16:10.421] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:10.422] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:10.422] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:10.591] [jointLog] [info] Automatically detected most likely library type as SR ## ## [2023-10-26 16:16:10.756] [jointLog] [info] Thread saw mini-batch with a maximum of 1.16% zero probability fragments ## [2023-10-26 16:16:10.765] [jointLog] [info] Thread saw mini-batch with a maximum of 1.20% zero probability fragments ## [2023-10-26 16:16:10.776] [jointLog] [info] Thread saw mini-batch with a maximum of 1.20% zero probability fragments ## [2023-10-26 16:16:10.780] [jointLog] [info] Thread saw mini-batch with a maximum of 1.18% zero probability fragments ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:10.798] [jointLog] [info] Computed 5,121 rich equivalence classes for further processing ## [2023-10-26 16:16:10.798] [jointLog] [info] Counted 130,772 total reads in the equivalence classes ## [2023-10-26 16:16:10.804] [jointLog] [info] Number of mappings discarded because of alignment score : 28,846 ## [2023-10-26 16:16:10.804] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 6,943 ## [2023-10-26 16:16:10.804] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,380 ## [2023-10-26 16:16:10.804] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:10.804] [jointLog] [warning] Only 130772 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:10.804] [jointLog] [info] Mapping rate = 78.2714% ## ## [2023-10-26 16:16:10.804] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:10.805] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:10.807] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:10.816] [jointLog] [info] iteration = 0 | max rel diff. = 1687.17 ## [2023-10-26 16:16:12.056] [jointLog] [info] iteration = 100 | max rel diff. = 0.000122859 ## [2023-10-26 16:16:12.057] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:12.057] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_MOCK_REP2_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP2_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:12.865] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:12.865] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:12.865] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:12.865] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:12.865] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:12.865] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.6053 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 97.416 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 30.834 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 5.8202 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:12.865] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:12.865] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.288 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.4539 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 27.096 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.1037 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 71.625 us ## ----------------------------------------- ## [2023-10-26 16:16:12.935] [jointLog] [info] done ## [2023-10-26 16:16:13.004] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:13.005] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:13.005] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:13.173] [jointLog] [info] Automatically detected most likely library type as SR ## ## [2023-10-26 16:16:13.346] [jointLog] [info] Thread saw mini-batch with a maximum of 1.10% zero probability fragments ## [2023-10-26 16:16:13.351] [jointLog] [info] Thread saw mini-batch with a maximum of 1.12% zero probability fragments ## [2023-10-26 16:16:13.364] [jointLog] [info] Thread saw mini-batch with a maximum of 1.12% zero probability fragments ## [2023-10-26 16:16:13.371] [jointLog] [info] Thread saw mini-batch with a maximum of 1.14% zero probability fragments ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:13.388] [jointLog] [info] Computed 5,107 rich equivalence classes for further processing ## [2023-10-26 16:16:13.388] [jointLog] [info] Counted 135,238 total reads in the equivalence classes ## [2023-10-26 16:16:13.394] [jointLog] [info] Number of mappings discarded because of alignment score : 19,440 ## [2023-10-26 16:16:13.394] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 5,837 ## [2023-10-26 16:16:13.394] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 4,792 ## [2023-10-26 16:16:13.394] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:13.394] [jointLog] [warning] Only 135238 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:13.394] [jointLog] [info] Mapping rate = 79.667% ## ## [2023-10-26 16:16:13.394] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:13.394] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:13.397] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:13.405] [jointLog] [info] iteration = 0 | max rel diff. = 1365.23 ## [2023-10-26 16:16:14.702] [jointLog] [info] iteration = 100 | max rel diff. = 0.00138672 ## [2023-10-26 16:16:14.703] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:14.703] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_MOCK_REP3_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP3_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:15.601] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:15.601] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:15.601] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:15.601] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:15.601] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:15.601] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 4.5574 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 123.63 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 32.375 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.253 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## [2023-10-26 16:16:15.602] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:15.602] [jointLog] [info] Loading dense pufferfish index. ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.792 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.5702 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 28.717 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.0438 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 64.25 us ## ----------------------------------------- ## [2023-10-26 16:16:15.676] [jointLog] [info] done ## [2023-10-26 16:16:15.750] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:15.751] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:15.751] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:15.968] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:16.453] [jointLog] [info] Thread saw mini-batch with a maximum of 1.52% zero probability fragments ## [2023-10-26 16:16:16.463] [jointLog] [info] Thread saw mini-batch with a maximum of 1.30% zero probability fragments ## [2023-10-26 16:16:16.487] [jointLog] [info] Thread saw mini-batch with a maximum of 1.58% zero probability fragments ## [2023-10-26 16:16:16.490] [jointLog] [info] Thread saw mini-batch with a maximum of 1.62% zero probability fragments ## [2023-10-26 16:16:16.519] [jointLog] [info] Computed 5,212 rich equivalence classes for further processing ## [2023-10-26 16:16:16.519] [jointLog] [info] Counted 161,111 total reads in the equivalence classes ## [2023-10-26 16:16:16.525] [jointLog] [info] Number of mappings discarded because of alignment score : 23,201 ## [2023-10-26 16:16:16.525] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 7,784 ## [2023-10-26 16:16:16.525] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 6,012 ## [2023-10-26 16:16:16.525] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:16.525] [jointLog] [warning] Only 161111 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:16.525] [jointLog] [info] Mapping rate = 76.7192% ## ## [2023-10-26 16:16:16.525] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:16.526] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:16.529] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:16.540] [jointLog] [info] iteration = 0 | max rel diff. = 1651.79 ## [2023-10-26 16:16:17.891] [jointLog] [info] iteration = 100 | max rel diff. = 0.000125455 ## [2023-10-26 16:16:17.891] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:17.891] [jointLog] [info] writing output ## ## Processing sample YPS606_MSN24_MOCK_REP4_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_MSN24_MOCK_REP4_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant/logs ## ----------------------------------------- ## | Loading contig table | Time = 4.4065 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 98.292 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 30.541 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.1712 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## [2023-10-26 16:16:18.767] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:18.767] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:18.767] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:18.767] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:18.767] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:18.767] [jointLog] [info] There is 1 library. ## [2023-10-26 16:16:18.767] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:18.767] [jointLog] [info] Loading dense pufferfish index. ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.763 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.5253 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 27.182 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.0114 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 85.584 us ## ----------------------------------------- ## [2023-10-26 16:16:18.839] [jointLog] [info] done ## [2023-10-26 16:16:18.906] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:18.907] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:18.907] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:19.094] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:19.365] [jointLog] [info] Thread saw mini-batch with a maximum of 1.46% zero probability fragments ## [2023-10-26 16:16:19.373] [jointLog] [info] Thread saw mini-batch with a maximum of 1.46% zero probability fragments ## [2023-10-26 16:16:19.386] [jointLog] [info] Thread saw mini-batch with a maximum of 1.30% zero probability fragments ## [2023-10-26 16:16:19.388] [jointLog] [info] Thread saw mini-batch with a maximum of 1.28% zero probability fragments ## [2023-10-26 16:16:19.409] [jointLog] [info] Computed 5,243 rich equivalence classes for further processing ## [2023-10-26 16:16:19.409] [jointLog] [info] Counted 163,485 total reads in the equivalence classes ## [2023-10-26 16:16:19.415] [jointLog] [info] Number of mappings discarded because of alignment score : 20,601 ## [2023-10-26 16:16:19.415] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 7,334 ## [2023-10-26 16:16:19.415] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,778 ## [2023-10-26 16:16:19.415] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:19.416] [jointLog] [warning] Only 163485 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:19.416] [jointLog] [info] Mapping rate = 78.4744% ## ## [2023-10-26 16:16:19.416] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:19.416] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:19.420] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:19.431] [jointLog] [info] iteration = 0 | max rel diff. = 1711.21 ## [2023-10-26 16:16:20.762] [jointLog] [info] iteration = 100 | max rel diff. = 0.000307278 ## [2023-10-26 16:16:20.762] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:20.762] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_ETOH_REP1_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP1_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP1_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP1_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:21.344] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:21.344] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:21.344] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:21.344] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:21.344] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:21.344] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.4204 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 127.21 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 30.709 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 5.9205 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:21.344] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:21.344] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.265 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.4185 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 26.725 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.113 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 60.75 us ## ----------------------------------------- ## [2023-10-26 16:16:21.414] [jointLog] [info] done ## [2023-10-26 16:16:21.480] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:21.481] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:21.481] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:21.654] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:21.872] [jointLog] [info] Thread saw mini-batch with a maximum of 1.40% zero probability fragments ## [2023-10-26 16:16:21.879] [jointLog] [info] Thread saw mini-batch with a maximum of 1.16% zero probability fragments ## [2023-10-26 16:16:21.882] [jointLog] [info] Thread saw mini-batch with a maximum of 1.36% zero probability fragments ## [2023-10-26 16:16:21.886] [jointLog] [info] Thread saw mini-batch with a maximum of 1.30% zero probability fragments ## [2023-10-26 16:16:21.905] [jointLog] [info] Computed 5,053 rich equivalence classes for further processing ## [2023-10-26 16:16:21.905] [jointLog] [info] Counted 149,230 total reads in the equivalence classes ## [2023-10-26 16:16:21.910] [jointLog] [info] Number of mappings discarded because of alignment score : 15,755 ## [2023-10-26 16:16:21.910] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 5,253 ## [2023-10-26 16:16:21.910] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 4,402 ## [2023-10-26 16:16:21.910] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:21.911] [jointLog] [warning] Only 149230 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:21.911] [jointLog] [info] Mapping rate = 82.181% ## ## [2023-10-26 16:16:21.911] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:21.911] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:21.914] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:21.921] [jointLog] [info] iteration = 0 | max rel diff. = 1406.19 ## [2023-10-26 16:16:23.115] [jointLog] [info] iteration = 100 | max rel diff. = 2.70713e-05 ## [2023-10-26 16:16:23.115] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:23.115] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_ETOH_REP2_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP2_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP2_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP2_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:23.931] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:23.931] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:23.931] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:23.931] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:23.931] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:23.931] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 5.807 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 134.04 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 34.542 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.0668 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## [2023-10-26 16:16:23.931] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:23.931] [jointLog] [info] Loading dense pufferfish index. ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.445 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.6328 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 28.627 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.1181 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 75.375 us ## ----------------------------------------- ## [2023-10-26 16:16:24.007] [jointLog] [info] done ## [2023-10-26 16:16:24.076] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:24.077] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:24.077] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:24.267] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:24.607] [jointLog] [info] Thread saw mini-batch with a maximum of 1.36% zero probability fragments ## [2023-10-26 16:16:24.614] [jointLog] [info] Thread saw mini-batch with a maximum of 1.46% zero probability fragments ## [2023-10-26 16:16:24.617] [jointLog] [info] Thread saw mini-batch with a maximum of 1.12% zero probability fragments ## [2023-10-26 16:16:24.623] [jointLog] [info] Thread saw mini-batch with a maximum of 1.34% zero probability fragments ## [2023-10-26 16:16:24.649] [jointLog] [info] Computed 5,185 rich equivalence classes for further processing ## [2023-10-26 16:16:24.649] [jointLog] [info] Counted 163,064 total reads in the equivalence classes ## [2023-10-26 16:16:24.658] [jointLog] [info] Number of mappings discarded because of alignment score : 22,598 ## [2023-10-26 16:16:24.658] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 6,365 ## [2023-10-26 16:16:24.658] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,134 ## [2023-10-26 16:16:24.658] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:24.658] [jointLog] [warning] Only 163064 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:24.658] [jointLog] [info] Mapping rate = 80.9046% ## ## [2023-10-26 16:16:24.658] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:24.660] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:24.664] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:24.678] [jointLog] [info] iteration = 0 | max rel diff. = 2044.58 ## [2023-10-26 16:16:26.012] [jointLog] [info] iteration = 100 | max rel diff. = 0.000322112 ## [2023-10-26 16:16:26.012] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:26.012] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_ETOH_REP3_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP3_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP3_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP3_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:26.521] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:26.521] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:26.521] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:26.521] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:26.521] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:26.521] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.8293 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 130.42 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 32.208 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.6345 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:26.522] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:26.522] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.488 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.714 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 28.752 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 5.2932 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 84.25 us ## ----------------------------------------- ## [2023-10-26 16:16:26.597] [jointLog] [info] done ## [2023-10-26 16:16:26.686] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:26.687] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:26.687] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:26.924] [jointLog] [info] Automatically detected most likely library type as SR ## ## [2023-10-26 16:16:27.376] [jointLog] [info] Thread saw mini-batch with a maximum of 1.78% zero probability fragments ## [2023-10-26 16:16:27.377] [jointLog] [info] Thread saw mini-batch with a maximum of 1.62% zero probability fragments ## [2023-10-26 16:16:27.389] [jointLog] [info] Thread saw mini-batch with a maximum of 1.72% zero probability fragments ## [2023-10-26 16:16:27.390] [jointLog] [info] Thread saw mini-batch with a maximum of 1.62% zero probability fragments ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:27.429] [jointLog] [info] Computed 5,301 rich equivalence classes for further processing ## [2023-10-26 16:16:27.429] [jointLog] [info] Counted 171,045 total reads in the equivalence classes ## [2023-10-26 16:16:27.435] [jointLog] [info] Number of mappings discarded because of alignment score : 18,641 ## [2023-10-26 16:16:27.435] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 6,542 ## [2023-10-26 16:16:27.435] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,138 ## [2023-10-26 16:16:27.435] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:27.436] [jointLog] [warning] Only 171045 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:27.436] [jointLog] [info] Mapping rate = 79.6503% ## ## [2023-10-26 16:16:27.436] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:27.437] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:27.440] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:27.450] [jointLog] [info] iteration = 0 | max rel diff. = 2209.07 ## [2023-10-26 16:16:28.651] [jointLog] [info] iteration = 100 | max rel diff. = 6.51043e-05 ## [2023-10-26 16:16:28.651] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:28.651] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_ETOH_REP4_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_ETOH_REP4_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP4_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP4_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:29.683] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:29.683] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:29.683] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:29.683] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:29.683] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:29.683] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 4.7789 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 94.041 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 31.209 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 5.8783 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## [2023-10-26 16:16:29.684] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:29.684] [jointLog] [info] Loading dense pufferfish index. ## Inventory entries filled: 49 ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.255 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.4236 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 26.623 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.1305 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 72.75 us ## ----------------------------------------- ## [2023-10-26 16:16:29.754] [jointLog] [info] done ## [2023-10-26 16:16:29.827] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:29.828] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:29.828] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:29.996] [jointLog] [info] Automatically detected most likely library type as SR ## ## [2023-10-26 16:16:30.194] [jointLog] [info] Thread saw mini-batch with a maximum of 1.36% zero probability fragments ## [2023-10-26 16:16:30.195] [jointLog] [info] Thread saw mini-batch with a maximum of 1.26% zero probability fragments ## [2023-10-26 16:16:30.204] [jointLog] [info] Thread saw mini-batch with a maximum of 1.38% zero probability fragments ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:30.214] [jointLog] [info] Thread saw mini-batch with a maximum of 1.46% zero probability fragments ## [2023-10-26 16:16:30.230] [jointLog] [info] Computed 5,217 rich equivalence classes for further processing ## [2023-10-26 16:16:30.230] [jointLog] [info] Counted 151,376 total reads in the equivalence classes ## [2023-10-26 16:16:30.235] [jointLog] [info] Number of mappings discarded because of alignment score : 18,141 ## [2023-10-26 16:16:30.235] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 5,851 ## [2023-10-26 16:16:30.235] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 4,515 ## [2023-10-26 16:16:30.235] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:30.236] [jointLog] [warning] Only 151376 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:30.236] [jointLog] [info] Mapping rate = 80.8119% ## ## [2023-10-26 16:16:30.236] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:30.236] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:30.238] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:30.246] [jointLog] [info] iteration = 0 | max rel diff. = 2134.58 ## [2023-10-26 16:16:31.426] [jointLog] [info] iteration = 100 | max rel diff. = 0.000703782 ## [2023-10-26 16:16:31.426] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:31.426] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_MOCK_REP1_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP1_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP1_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP1_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:32.332] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:32.332] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:32.332] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:32.332] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:32.332] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:32.332] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.4363 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 108.08 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 32.042 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.0111 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:32.333] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:32.333] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.453 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.5232 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 26.941 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.0996 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 74.041 us ## ----------------------------------------- ## [2023-10-26 16:16:32.403] [jointLog] [info] done ## [2023-10-26 16:16:32.470] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:32.471] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:32.471] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:32.635] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:32.901] [jointLog] [info] Thread saw mini-batch with a maximum of 1.38% zero probability fragments ## [2023-10-26 16:16:32.916] [jointLog] [info] Thread saw mini-batch with a maximum of 1.24% zero probability fragments ## [2023-10-26 16:16:32.917] [jointLog] [info] Thread saw mini-batch with a maximum of 1.30% zero probability fragments ## [2023-10-26 16:16:32.922] [jointLog] [info] Thread saw mini-batch with a maximum of 1.20% zero probability fragments ## [2023-10-26 16:16:32.939] [jointLog] [info] Computed 5,305 rich equivalence classes for further processing ## [2023-10-26 16:16:32.939] [jointLog] [info] Counted 177,055 total reads in the equivalence classes ## [2023-10-26 16:16:32.944] [jointLog] [info] Number of mappings discarded because of alignment score : 31,142 ## [2023-10-26 16:16:32.944] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 8,597 ## [2023-10-26 16:16:32.944] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 6,941 ## [2023-10-26 16:16:32.944] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:32.944] [jointLog] [warning] Only 177055 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:32.944] [jointLog] [info] Mapping rate = 79.2054% ## ## [2023-10-26 16:16:32.944] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:32.944] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:32.947] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:32.954] [jointLog] [info] iteration = 0 | max rel diff. = 2091.83 ## [2023-10-26 16:16:34.249] [jointLog] [info] iteration = 100 | max rel diff. = 0.000208332 ## [2023-10-26 16:16:34.249] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:34.249] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_MOCK_REP2_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP2_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP2_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP2_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:34.893] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:34.893] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:34.893] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:34.893] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:34.893] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:34.894] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 4.187 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 104.21 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 29.75 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 5.9423 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:34.894] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:34.894] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.304 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.5596 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 26.808 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.0102 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 65.5 us ## ----------------------------------------- ## [2023-10-26 16:16:34.964] [jointLog] [info] done ## [2023-10-26 16:16:35.030] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:35.031] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:35.031] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:35.202] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:35.429] [jointLog] [info] Thread saw mini-batch with a maximum of 1.26% zero probability fragments ## [2023-10-26 16:16:35.429] [jointLog] [info] Thread saw mini-batch with a maximum of 1.32% zero probability fragments ## [2023-10-26 16:16:35.441] [jointLog] [info] Thread saw mini-batch with a maximum of 1.54% zero probability fragments ## [2023-10-26 16:16:35.451] [jointLog] [info] Thread saw mini-batch with a maximum of 1.46% zero probability fragments ## [2023-10-26 16:16:35.469] [jointLog] [info] Computed 5,175 rich equivalence classes for further processing ## [2023-10-26 16:16:35.469] [jointLog] [info] Counted 147,312 total reads in the equivalence classes ## [2023-10-26 16:16:35.475] [jointLog] [warning] 0.00160026% of fragments were shorter than the k used to build the index. ## If this fraction is too large, consider re-building the index with a smaller k. ## The minimum read size found was 27. ## ## ## [2023-10-26 16:16:35.475] [jointLog] [info] Number of mappings discarded because of alignment score : 24,562 ## [2023-10-26 16:16:35.475] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 7,192 ## [2023-10-26 16:16:35.475] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,915 ## [2023-10-26 16:16:35.475] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:35.475] [jointLog] [warning] Only 147312 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:35.475] [jointLog] [info] Mapping rate = 78.5794% ## ## [2023-10-26 16:16:35.475] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:35.477] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:35.479] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:35.487] [jointLog] [info] iteration = 0 | max rel diff. = 1719.02 ## [2023-10-26 16:16:36.895] [jointLog] [info] iteration = 100 | max rel diff. = 0.000465167 ## [2023-10-26 16:16:36.895] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:36.895] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_MOCK_REP3_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP3_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP3_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP3_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:37.481] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:37.481] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:37.481] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:37.481] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:37.481] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:37.481] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.5011 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 93.583 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 31.709 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.4904 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:37.481] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:37.481] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 27.659 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.6508 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 30.155 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 4.43 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 72.25 us ## ----------------------------------------- ## [2023-10-26 16:16:37.557] [jointLog] [info] done ## [2023-10-26 16:16:37.631] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:37.632] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:37.632] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:37.835] [jointLog] [info] Automatically detected most likely library type as SR ## ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:38.275] [jointLog] [info] Thread saw mini-batch with a maximum of 1.58% zero probability fragments ## [2023-10-26 16:16:38.282] [jointLog] [info] Thread saw mini-batch with a maximum of 1.64% zero probability fragments ## [2023-10-26 16:16:38.289] [jointLog] [info] Thread saw mini-batch with a maximum of 1.58% zero probability fragments ## [2023-10-26 16:16:38.310] [jointLog] [info] Thread saw mini-batch with a maximum of 1.54% zero probability fragments ## [2023-10-26 16:16:38.336] [jointLog] [info] Computed 5,175 rich equivalence classes for further processing ## [2023-10-26 16:16:38.336] [jointLog] [info] Counted 173,912 total reads in the equivalence classes ## [2023-10-26 16:16:38.341] [jointLog] [info] Number of mappings discarded because of alignment score : 25,288 ## [2023-10-26 16:16:38.341] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 8,408 ## [2023-10-26 16:16:38.341] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 6,477 ## [2023-10-26 16:16:38.341] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:38.342] [jointLog] [warning] Only 173912 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:38.342] [jointLog] [info] Mapping rate = 77.3743% ## ## [2023-10-26 16:16:38.342] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:38.342] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:38.345] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:38.355] [jointLog] [info] iteration = 0 | max rel diff. = 1677.12 ## [2023-10-26 16:16:39.603] [jointLog] [info] iteration = 100 | max rel diff. = 7.7896e-05 ## [2023-10-26 16:16:39.603] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:39.603] [jointLog] [info] writing output ## ## Processing sample YPS606_WT_MOCK_REP4_R1.fastq.gz ## Version Info: This is the most recent version of salmon. ## ### salmon (selective-alignment-based) v1.10.0 ## ### [ program ] =&gt; salmon ## ### [ command ] =&gt; quant ## ### [ index ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Reference/index_salmon_Saccharomyces_cerevisiae.R64-1-1 } ## ### [ libType ] =&gt; { A } ## ### [ unmatedReads ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Trimmed_rfastp/YPS606_WT_MOCK_REP4_R1.fastq.gz } ## ### [ useVBOpt ] =&gt; { } ## ### [ threads ] =&gt; { 4 } ## ### [ validateMappings ] =&gt; { } ## ### [ output ] =&gt; { /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP4_R1.fastq.gz_quant } ## Logs will be written to /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP4_R1.fastq.gz_quant/logs ## [2023-10-26 16:16:40.066] [jointLog] [info] setting maxHashResizeThreads to 4 ## [2023-10-26 16:16:40.066] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored. ## [2023-10-26 16:16:40.066] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65 ## [2023-10-26 16:16:40.066] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35. ## [2023-10-26 16:16:40.066] [jointLog] [info] parsing read library format ## [2023-10-26 16:16:40.066] [jointLog] [info] There is 1 library. ## ----------------------------------------- ## | Loading contig table | Time = 3.6218 ms ## ----------------------------------------- ## size = 25029 ## ----------------------------------------- ## | Loading contig offsets | Time = 155.04 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference lengths | Time = 33.083 us ## ----------------------------------------- ## ----------------------------------------- ## | Loading mphf table | Time = 6.4004 ms ## ----------------------------------------- ## size = 12321058 ## Number of ones: 25028 ## Number of ones per inventory item: 512 ## Inventory entries filled: 49 ## [2023-10-26 16:16:40.066] [jointLog] [info] Loading pufferfish index ## [2023-10-26 16:16:40.066] [jointLog] [info] Loading dense pufferfish index. ## ----------------------------------------- ## | Loading contig boundaries | Time = 26.799 ms ## ----------------------------------------- ## size = 12321058 ## ----------------------------------------- ## | Loading sequence | Time = 2.5237 ms ## ----------------------------------------- ## size = 11570218 ## ----------------------------------------- ## | Loading positions | Time = 38.085 ms ## ----------------------------------------- ## size = 20892357 ## ----------------------------------------- ## | Loading reference sequence | Time = 18.538 ms ## ----------------------------------------- ## ----------------------------------------- ## | Loading reference accumulative lengths | Time = 122.42 us ## ----------------------------------------- ## [2023-10-26 16:16:40.163] [jointLog] [info] done ## [2023-10-26 16:16:40.274] [jointLog] [info] Index contained 6,588 targets ## [2023-10-26 16:16:40.275] [jointLog] [info] Number of decoys : 17 ## [2023-10-26 16:16:40.275] [jointLog] [info] First decoy index : 6,571 ## ## ## ## ## [2023-10-26 16:16:40.539] [jointLog] [info] Automatically detected most likely library type as SR ## ## [2023-10-26 16:16:40.929] [jointLog] [info] Thread saw mini-batch with a maximum of 1.08% zero probability fragments ## [2023-10-26 16:16:40.931] [jointLog] [info] Thread saw mini-batch with a maximum of 1.16% zero probability fragments ## [2023-10-26 16:16:40.944] [jointLog] [info] Thread saw mini-batch with a maximum of 1.38% zero probability fragments ## [2023-10-26 16:16:40.963] [jointLog] [info] Thread saw mini-batch with a maximum of 1.14% zero probability fragments ## ## ## ## ## ## ## ## ## [2023-10-26 16:16:41.005] [jointLog] [info] Computed 5,167 rich equivalence classes for further processing ## [2023-10-26 16:16:41.005] [jointLog] [info] Counted 163,571 total reads in the equivalence classes ## [2023-10-26 16:16:41.011] [jointLog] [info] Number of mappings discarded because of alignment score : 24,431 ## [2023-10-26 16:16:41.011] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 7,543 ## [2023-10-26 16:16:41.011] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 5,763 ## [2023-10-26 16:16:41.011] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0 ## [2023-10-26 16:16:41.011] [jointLog] [warning] Only 163571 fragments were mapped, but the number of burn-in fragments was set to 5000000. ## The effective lengths have been computed using the observed mappings. ## ## [2023-10-26 16:16:41.011] [jointLog] [info] Mapping rate = 79.0714% ## ## [2023-10-26 16:16:41.011] [jointLog] [info] finished quantifyLibrary() ## [2023-10-26 16:16:41.012] [jointLog] [info] Starting optimizer ## [2023-10-26 16:16:41.015] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate ## [2023-10-26 16:16:41.026] [jointLog] [info] iteration = 0 | max rel diff. = 1702.2 ## [2023-10-26 16:16:42.401] [jointLog] [info] iteration = 100 | max rel diff. = 0.000337813 ## [2023-10-26 16:16:42.401] [jointLog] [info] Finished optimizer ## [2023-10-26 16:16:42.401] [jointLog] [info] writing output ## ## Version Info: This is the most recent version of salmon. ## [2023-10-26 16:16:43.777] [mergeLog] [info] samples: [ /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP4_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP4_R1.fastq.gz_quant ] ## [2023-10-26 16:16:43.777] [mergeLog] [info] sample names : [ YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant, YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant, YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant, YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant, YPS606_WT_ETOH_REP1_R1.fastq.gz_quant, YPS606_WT_ETOH_REP2_R1.fastq.gz_quant, YPS606_WT_ETOH_REP3_R1.fastq.gz_quant, YPS606_WT_ETOH_REP4_R1.fastq.gz_quant, YPS606_WT_MOCK_REP1_R1.fastq.gz_quant, YPS606_WT_MOCK_REP2_R1.fastq.gz_quant, YPS606_WT_MOCK_REP3_R1.fastq.gz_quant, YPS606_WT_MOCK_REP4_R1.fastq.gz_quant ] ## [2023-10-26 16:16:43.777] [mergeLog] [info] output column : NUMREADS ## [2023-10-26 16:16:43.777] [mergeLog] [info] output file : /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/salmon.gene_counts.merged.yeast.tsv ## [2023-10-26 16:16:43.777] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.790] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.803] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.815] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.826] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.838] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.849] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.860] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.871] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.885] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.896] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.907] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP4_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.918] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.928] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.939] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:43.950] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP4_R1.fastq.gz_quant/quant.sf ## Version Info: This is the most recent version of salmon. ## [2023-10-26 16:16:44.401] [mergeLog] [info] samples: [ /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP4_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP1_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP2_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP3_R1.fastq.gz_quant, /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP4_R1.fastq.gz_quant ] ## [2023-10-26 16:16:44.401] [mergeLog] [info] sample names : [ YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant, YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant, YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant, YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant, YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant, YPS606_WT_ETOH_REP1_R1.fastq.gz_quant, YPS606_WT_ETOH_REP2_R1.fastq.gz_quant, YPS606_WT_ETOH_REP3_R1.fastq.gz_quant, YPS606_WT_ETOH_REP4_R1.fastq.gz_quant, YPS606_WT_MOCK_REP1_R1.fastq.gz_quant, YPS606_WT_MOCK_REP2_R1.fastq.gz_quant, YPS606_WT_MOCK_REP3_R1.fastq.gz_quant, YPS606_WT_MOCK_REP4_R1.fastq.gz_quant ] ## [2023-10-26 16:16:44.401] [mergeLog] [info] output column : TPM ## [2023-10-26 16:16:44.401] [mergeLog] [info] output file : /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/salmon.gene_tpm.merged.yeast.tsv ## [2023-10-26 16:16:44.401] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.413] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.424] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.436] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_ETOH_REP4_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.446] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.458] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.469] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.480] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_MSN24_MOCK_REP4_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.491] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.504] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.515] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.525] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_ETOH_REP4_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.538] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP1_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.549] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP2_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.560] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP3_R1.fastq.gz_quant/quant.sf ## [2023-10-26 16:16:44.570] [mergeLog] [info] Parsing /Users/clstacy/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/YPS606_WT_MOCK_REP4_R1.fastq.gz_quant/quant.sf This script loops through each sample and invokes salmon using default mostly options. The -i argument tells salmon where to find the index -l A tells salmon that it should automatically determine the library type of the sequencing reads (e.g. stranded vs. unstranded etc.). The -r arguments tell salmon where to find the SE reads for this sample (notice, salmon will accept gzipped FASTQ files directly). Finally, the -p 4 argument tells salmon to make use of 4 threads and the -o argument specifies the directory where salmon’s quantification results should be written. The –useVBOpt flag sets to use variational Bayesian EM algorithm rather than the ‘standard EM’ to optimize abundance estimates (more accurate). Salmon exposes many different options to the user that enable extra features or modify default behavior. However, the purpose and behavior of all of those options is beyond the scope of this introductory tutorial. You can read about salmon’s many options in the documentation. 6.3 Questions Identify which gene has the highest counts across all samples for both salmon and Rsubread outputs. Redo the counting over the exons, rather than the genes (specify useMetaFeatures = FALSE) with RSubread. Use the bam files generated doing alignment reporting only unique reads, and call the featureCounts object fc.exon. Check the dimension of the counts slot to see how much larger it is. What differences do you notice in the count values from Salmon vs Rsubread? CHALLENGE: Download the full size fastq files from OneDrive &amp; use Salmon to get the read counts on the non-subsampled files. Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: Rsubread(v.2.14.2), ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): RColorBrewer(v.1.1-3), rstudioapi(v.0.15.0), jsonlite(v.1.8.7), magrittr(v.2.0.3), farver(v.2.1.1), rmarkdown(v.2.25), fs(v.1.6.3), zlibbioc(v.1.46.0), vctrs(v.0.6.4), memoise(v.2.0.1), RCurl(v.1.98-1.12), ggtree(v.3.8.2), S4Arrays(v.1.0.6), htmltools(v.0.5.6.1), gridGraphics(v.0.5-1), sass(v.0.4.7), bslib(v.0.5.1), plyr(v.1.8.9), cachem(v.1.0.8), lifecycle(v.1.0.3), pkgconfig(v.2.0.3), Matrix(v.1.6-1.1), R6(v.2.5.1), fastmap(v.1.1.1), gson(v.0.1.0), GenomeInfoDbData(v.1.2.10), snakecase(v.0.11.1), digest(v.0.6.33), aplot(v.0.2.2), enrichplot(v.1.20.0), colorspace(v.2.1-0), patchwork(v.1.1.3), rprojroot(v.2.0.3), RSQLite(v.2.3.1), hwriter(v.1.3.2.1), fansi(v.1.0.5), timechange(v.0.2.0), abind(v.1.4-5), httr(v.1.4.7), polyclip(v.1.10-6), compiler(v.4.3.1), bit64(v.4.0.5), withr(v.2.5.1), downloader(v.0.4), viridis(v.0.6.4), DBI(v.1.1.3), ggforce(v.0.4.1), MASS(v.7.3-60), DelayedArray(v.0.26.7), rjson(v.0.2.21), HDO.db(v.0.99.1), tools(v.4.3.1), ape(v.5.7-1), scatterpie(v.0.2.1), glue(v.1.6.2), nlme(v.3.1-163), GOSemSim(v.2.26.1), grid(v.4.3.1), shadowtext(v.0.1.2), reshape2(v.1.4.4), fgsea(v.1.26.0), generics(v.0.1.3), gtable(v.0.3.4), tzdb(v.0.4.0), data.table(v.1.14.8), hms(v.1.1.3), tidygraph(v.1.2.3), utf8(v.1.2.3), ggrepel(v.0.9.4), pillar(v.1.9.0), vroom(v.1.6.4), yulab.utils(v.0.1.0), splines(v.4.3.1), tweenr(v.2.0.2), treeio(v.1.24.3), lattice(v.0.21-9), deldir(v.1.0-9), bit(v.4.0.5), tidyselect(v.1.2.0), GO.db(v.3.17.0), gridExtra(v.2.3), bookdown(v.0.36), xfun(v.0.40), graphlayouts(v.1.0.1), stringi(v.1.7.12), lazyeval(v.0.2.2), ggfun(v.0.1.3), yaml(v.2.3.7), evaluate(v.0.22), codetools(v.0.2-19), interp(v.1.1-4), ggraph(v.2.1.0), archive(v.1.1.5), qvalue(v.2.32.0), RVenn(v.1.1.0), ggplotify(v.0.1.2), cli(v.3.6.1), munsell(v.0.5.0), jquerylib(v.0.1.4), Rcpp(v.1.0.11), png(v.0.1-8), parallel(v.4.3.1), blob(v.1.2.4), jpeg(v.0.1-10), latticeExtra(v.0.6-30), DOSE(v.3.26.1), bitops(v.1.0-7), viridisLite(v.0.4.2), scales(v.1.2.1), crayon(v.1.5.2), rlang(v.1.1.1), cowplot(v.1.1.1), fastmatch(v.1.1-4) and KEGGREST(v.1.40.1) "],["differential-expression-edger.html", "Chapter 7 Differential Expression: EdgeR 7.1 Description 7.2 Learning outcomes 7.3 Loading in the featureCounts object 7.4 Count loading and Annotation 7.5 Filtering to remove low counts 7.6 Normalization for composition bias 7.7 MDS plots 7.8 Exploring differences between libraries 7.9 Estimate Dispersion 7.10 Testing for differential expression 7.11 Looking at all contrasts at once 7.12 Questions 7.13 A template set of code chunks for doing this is below:", " Chapter 7 Differential Expression: EdgeR last updated: 2023-10-26 Package Install As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;, &quot;statmod&quot;, # required dependency, need to load manually on some macOS versions. &quot;purrr&quot;, # for working with lists (beautify column names) &quot;webshot2&quot;, # allow for pdf of output table. &quot;reactable&quot;) # for pretty tables. # We also need these Bioconductor packages today. p_load(&quot;edgeR&quot;, &quot;AnnotationDbi&quot;, &quot;org.Sc.sgd.db&quot;) 7.1 Description This will be our first differential expression analysis workflow, converting gene counts across samples into meaningful information about genes that appear to be significantly differentially expressed between samples 7.2 Learning outcomes At the end of this exercise, you should be able to: Generate a table of sample metadata. Filter low counts and normalize count data. Utilize the edgeR package to identify differentially expressed genes. library(edgeR) library(org.Sc.sgd.db) # for ease of use, set max number of digits after decimal options(digits=3) 7.3 Loading in the featureCounts object We saved this file in the last exercise (05_Read_Counting.Rmd) from the RSubread package. Now we can load that object back in and assign it to the variable fc. Be sure to change the file path if you have saved it in a different location. path_fc_object &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Data/Counts/Rsubread/rsubread.yeast_fc_output.Rds&quot;) counts_subset &lt;- readRDS(file = path_fc_object)$counts We generated those counts on a subset of the fastq files, but we can load the complete count file with the command below. This file has been generated with the full size fastq files with Salmon. counts &lt;- read.delim( &#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/counts/salmon.gene_counts.merged.nonsubsamp.tsv&#39;, sep = &quot;\\t&quot;, header = T, row.names = 1 ) So far, we’ve been able to process all of the fastq files without much information about what each sample is in the experimental design. Now, we need the metadata for the samples. Note that the order matters for these files To find the order of files we need, we can get just the part of the column name before the first “.” symbol with this command: str_split_fixed(counts |&gt; colnames(), &quot;\\\\.&quot;, n = 2)[, 1] |&gt; cat() ## YPS606_MSN24_ETOH_REP1_R1 YPS606_MSN24_ETOH_REP2_R1 YPS606_MSN24_ETOH_REP3_R1 YPS606_MSN24_ETOH_REP4_R1 YPS606_MSN24_MOCK_REP1_R1 YPS606_MSN24_MOCK_REP2_R1 YPS606_MSN24_MOCK_REP3_R1 YPS606_MSN24_MOCK_REP4_R1 YPS606_WT_ETOH_REP1_R1 YPS606_WT_ETOH_REP2_R1 YPS606_WT_ETOH_REP3_R1 YPS606_WT_ETOH_REP4_R1 YPS606_WT_MOCK_REP1_R1 YPS606_WT_MOCK_REP2_R1 YPS606_WT_MOCK_REP3_R1 YPS606_WT_MOCK_REP4_R1 sample_metadata &lt;- tribble( ~Sample, ~Genotype, ~Condition, &quot;YPS606_MSN24_ETOH_REP1_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP2_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP3_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP4_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_MOCK_REP1_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP2_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP3_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP4_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_ETOH_REP1_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP2_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP3_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP4_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_MOCK_REP1_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP2_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP3_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP4_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;) |&gt; # Create a new column that combines the Genotype and Condition value mutate(Group = factor( paste(Genotype, Condition, sep = &quot;.&quot;), levels = c( &quot;WT.unstressed&quot;,&quot;WT.EtOH&quot;, &quot;msn24dd.unstressed&quot;, &quot;msn24dd.EtOH&quot; ) )) |&gt; # make Condition and Genotype a factor (with baseline as first level) for edgeR mutate( Genotype = factor(Genotype, levels = c(&quot;WT&quot;, &quot;msn24dd&quot;)), Condition = factor(Condition, levels = c(&quot;unstressed&quot;, &quot;EtOH&quot;)) ) Now, let’s create a design matrix with this information group &lt;- sample_metadata$Group design &lt;- model.matrix(~ 0 + group) design ## groupWT.unstressed groupWT.EtOH groupmsn24dd.unstressed groupmsn24dd.EtOH ## 1 0 0 0 1 ## 2 0 0 0 1 ## 3 0 0 0 1 ## 4 0 0 0 1 ## 5 0 0 1 0 ## 6 0 0 1 0 ## 7 0 0 1 0 ## 8 0 0 1 0 ## 9 0 1 0 0 ## 10 0 1 0 0 ## 11 0 1 0 0 ## 12 0 1 0 0 ## 13 1 0 0 0 ## 14 1 0 0 0 ## 15 1 0 0 0 ## 16 1 0 0 0 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$group ## [1] &quot;contr.treatment&quot; colnames(design) &lt;- levels(group) design ## WT.unstressed WT.EtOH msn24dd.unstressed msn24dd.EtOH ## 1 0 0 0 1 ## 2 0 0 0 1 ## 3 0 0 0 1 ## 4 0 0 0 1 ## 5 0 0 1 0 ## 6 0 0 1 0 ## 7 0 0 1 0 ## 8 0 0 1 0 ## 9 0 1 0 0 ## 10 0 1 0 0 ## 11 0 1 0 0 ## 12 0 1 0 0 ## 13 1 0 0 0 ## 14 1 0 0 0 ## 15 1 0 0 0 ## 16 1 0 0 0 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$group ## [1] &quot;contr.treatment&quot; 7.4 Count loading and Annotation The count matrix is used to construct a DGEList class object. This is the main data class in the edgeR package. The DGEList object is used to store all the information required to fit a generalized linear model to the data, including library sizes and dispersion estimates as well as counts for each gene. y &lt;- DGEList(counts, group=group) colnames(y) &lt;- sample_metadata$Sample y$samples ## group lib.size norm.factors ## YPS606_MSN24_ETOH_REP1_R1 msn24dd.EtOH 17409481 1 ## YPS606_MSN24_ETOH_REP2_R1 msn24dd.EtOH 14055425 1 ## YPS606_MSN24_ETOH_REP3_R1 msn24dd.EtOH 13127876 1 ## YPS606_MSN24_ETOH_REP4_R1 msn24dd.EtOH 16655559 1 ## YPS606_MSN24_MOCK_REP1_R1 msn24dd.unstressed 12266723 1 ## YPS606_MSN24_MOCK_REP2_R1 msn24dd.unstressed 11781244 1 ## YPS606_MSN24_MOCK_REP3_R1 msn24dd.unstressed 11340274 1 ## YPS606_MSN24_MOCK_REP4_R1 msn24dd.unstressed 13024330 1 ## YPS606_WT_ETOH_REP1_R1 WT.EtOH 15422048 1 ## YPS606_WT_ETOH_REP2_R1 WT.EtOH 14924728 1 ## YPS606_WT_ETOH_REP3_R1 WT.EtOH 14738753 1 ## YPS606_WT_ETOH_REP4_R1 WT.EtOH 12203133 1 ## YPS606_WT_MOCK_REP1_R1 WT.unstressed 13592206 1 ## YPS606_WT_MOCK_REP2_R1 WT.unstressed 12921965 1 ## YPS606_WT_MOCK_REP3_R1 WT.unstressed 13128396 1 ## YPS606_WT_MOCK_REP4_R1 WT.unstressed 15568155 1 Human-readable gene symbols can also be added to complement the gene ID for each gene, using the annotation in the org.Sc.sgd.db package. y$genes &lt;- AnnotationDbi::select(org.Sc.sgd.db,keys=rownames(y),columns=&quot;GENENAME&quot;) ## &#39;select()&#39; returned 1:1 mapping between keys and columns head(y$genes) ## ORF SGD GENENAME ## 1 YIL170W S000001432 HXT12 ## 2 YIL175W S000001437 &lt;NA&gt; ## 3 YPL276W S000006197 &lt;NA&gt; ## 4 YFL056C S000001838 AAD6 ## 5 YCL074W S000000579 &lt;NA&gt; ## 6 YAR061W S000000087 &lt;NA&gt; 7.5 Filtering to remove low counts Genes with very low counts across all libraries provide little evidence for differential expression. In addition, the pronounced discreteness of these counts interferes with some of the statistical approximations that are used later in the pipeline. These genes should be filtered out prior to further analysis. Here, we will retain a gene only if it is expressed at a count-per-million (CPM) above 0.7 in at least four samples. keep &lt;- rowSums(cpm(y) &gt; 0.7) &gt;= 4 y &lt;- y[keep,] summary(keep) ## Mode FALSE TRUE ## logical 956 5615 Where did those cutoff numbers come from? As a general rule, we don’t want to exclude a gene that is expressed in only one group, so a cutoff number equal to the number of replicates can be a good starting point. For counts, a good threshold can be chosen by identifying the CPM that corresponds to a count of 10, which in this case would be about 0.7: cpm(10, mean(y$samples$lib.size)) ## [,1] ## [1,] 0.7202007 Smaller CPM thresholds are usually appropriate for larger libraries. 7.6 Normalization for composition bias TMM normalization is performed to eliminate composition biases between libraries. This generates a set of normalization factors, where the product of these factors and the library sizes defines the effective library size. The calcNormFactors function returns the DGEList argument with only the norm.factors changed. y &lt;- calcNormFactors(y) y$samples ## group lib.size norm.factors ## YPS606_MSN24_ETOH_REP1_R1 msn24dd.EtOH 17409481 1.2390418 ## YPS606_MSN24_ETOH_REP2_R1 msn24dd.EtOH 14055425 1.1021628 ## YPS606_MSN24_ETOH_REP3_R1 msn24dd.EtOH 13127876 1.1079633 ## YPS606_MSN24_ETOH_REP4_R1 msn24dd.EtOH 16655559 1.0073996 ## YPS606_MSN24_MOCK_REP1_R1 msn24dd.unstressed 12266723 1.0383288 ## YPS606_MSN24_MOCK_REP2_R1 msn24dd.unstressed 11781244 1.0031950 ## YPS606_MSN24_MOCK_REP3_R1 msn24dd.unstressed 11340274 0.9600073 ## YPS606_MSN24_MOCK_REP4_R1 msn24dd.unstressed 13024330 0.9842621 ## YPS606_WT_ETOH_REP1_R1 WT.EtOH 15422048 0.8394351 ## YPS606_WT_ETOH_REP2_R1 WT.EtOH 14924728 0.9409802 ## YPS606_WT_ETOH_REP3_R1 WT.EtOH 14738753 0.9881819 ## YPS606_WT_ETOH_REP4_R1 WT.EtOH 12203133 0.9708557 ## YPS606_WT_MOCK_REP1_R1 WT.unstressed 13592206 0.9900546 ## YPS606_WT_MOCK_REP2_R1 WT.unstressed 12921965 1.0381161 ## YPS606_WT_MOCK_REP3_R1 WT.unstressed 13128396 0.9002706 ## YPS606_WT_MOCK_REP4_R1 WT.unstressed 15568155 0.9506010 The normalization factors multiply to unity across all libraries. A normalization factor below unity indicates that the library size will be scaled down, as there is more suppression (i.e., composition bias) in that library relative to the other libraries. This is also equivalent to scaling the counts upwards in that sample. Conversely, a factor above unity scales up the library size and is equivalent to downscaling the counts. The performance of the TMM normalization procedure can be examined using mean- difference (MD) plots. This visualizes the library size-adjusted log-fold change between two libraries (the difference) against the average log-expression across those libraries (the mean). The below command plots an MD plot, comparing sample 1 against an artificial library constructed from the average of all other samples. 7.7 MDS plots for (sample in 1:nrow(y$samples)) { plotMD(cpm(y, log=TRUE), column=sample) abline(h=0, col=&quot;red&quot;, lty=2, lwd=2) } 7.8 Exploring differences between libraries The data can be explored by generating multi-dimensional scaling (MDS) plots. This visualizes the differences between the expression profiles of different samples in two dimensions. The next plot shows the MDS plot for the yeast heatshock data. points &lt;- c(1,1,2,2) colors &lt;- rep(c(&quot;black&quot;, &quot;red&quot;),8) plotMDS(y, col=colors[group], pch=points[group]) legend(&quot;topright&quot;, legend=levels(group), pch=points, col=colors, ncol=2) title(main=&quot;PCA plot&quot;) 7.9 Estimate Dispersion The trended NB dispersion is estimated using the estimateDisp function. This returns the DGEList object with additional entries for the estimated NB dispersions for all genes. These estimates can be visualized with plotBCV, which shows the root-estimate, i.e., the biological coefficient of variation for each gene y &lt;- estimateDisp(y, design, robust=TRUE) plotBCV(y) title(main=&quot;Biological Coefficient of Variation (BCV) vs gene abundance&quot;) In general, the trend in the NB dispersions should decrease smoothly with increasing abundance. This is because the expression of high-abundance genes is expected to be more stable than that of low-abundance genes. Any substantial increase at high abundances may be indicative of batch effects or trended biases. The value of the trended NB dispersions should range between 0.005 to 0.05 for laboratory-controlled biological systems like mice or cell lines, though larger values will be observed for patient-derived data (&gt; 0.1) For the QL dispersions, estimation can be performed using the glmQLFit function. This returns a DGEGLM object containing the estimated values of the GLM coefficients for each gene fit &lt;- glmQLFit(y, design, robust=TRUE) head(fit$coefficients) ## WT.unstressed WT.EtOH msn24dd.unstressed msn24dd.EtOH ## YIL170W -15.068482 -13.101209 -15.870351 -13.205823 ## YFL056C -11.085690 -11.011274 -11.067649 -10.422839 ## YAR061W -13.740855 -13.295251 -13.363022 -13.356496 ## YGR014W -8.497729 -8.741701 -8.410553 -8.658257 ## YPR031W -10.545308 -11.887166 -10.448351 -11.862097 ## YIL003W -10.634552 -12.066082 -10.716773 -11.974343 plotQLDisp(fit) title(main=&quot;QL Dispersion of the fit&quot;) EB squeezing of the raw dispersion estimators towards the trend reduces the uncertainty of the final estimators. The extent of this moderation is determined by the value of the prior df, as estimated from the data. Large estimates for the prior df indicate that the QL dispersions are less variable between genes, meaning that stronger EB moderation can be performed. Small values for the prior df indicate that the dispersions are highly variable, meaning that strong moderation would be inappropriate Setting robust=TRUE in glmQLFit is strongly recommended. This causes glmQLFit to estimate a vector of df.prior values, with lower values for outlier genes and larger values for the main body of genes. 7.10 Testing for differential expression The final step is to actually test for significant differential expression in each gene, using the QL F-test. The contrast of interest can be specified using the makeContrasts function. Here, genes are detected that are DE between the stressed and unstressed. This is done by defining the null hypothesis as heat stressed - unstressed = 0. # generate contrasts we are interested in learning about my.contrasts &lt;- makeContrasts(EtOHvsMOCK.WT = WT.EtOH - WT.unstressed, EtOHvsMOCK.MSN24dd = msn24dd.EtOH - msn24dd.unstressed, EtOH.MSN24ddvsWT = msn24dd.EtOH - WT.EtOH, MOCK.MSN24ddvsWT = msn24dd.unstressed - WT.unstressed, EtOHvsWT.MSN24ddvsWT = (msn24dd.EtOH-msn24dd.unstressed)-(WT.EtOH-WT.unstressed), levels=design) # This contrast looks at the difference in the stress responses between mutant and WT res &lt;- glmQLFTest(fit, contrast = my.contrasts[,&quot;EtOHvsWT.MSN24ddvsWT&quot;]) # let&#39;s take a quick look at the results topTags(res, n=10) ## Coefficient: 1*WT.unstressed -1*WT.EtOH -1*msn24dd.unstressed 1*msn24dd.EtOH ## ORF SGD GENENAME logFC logCPM F PValue ## YMR105C YMR105C S000004711 PGM2 -6.840813 9.704453 1607.7248 2.914040e-24 ## YMR196W YMR196W S000004809 &lt;NA&gt; -5.153688 8.359888 876.6109 5.583121e-21 ## YKL035W YKL035W S000001518 UGP1 -3.840032 10.778897 868.0539 5.645453e-21 ## YDR516C YDR516C S000002924 EMI2 -4.006779 9.078562 794.9919 1.647596e-20 ## YBR126C YBR126C S000000330 TPS1 -3.455623 9.805436 692.5104 8.800860e-20 ## YLR258W YLR258W S000004248 GSY2 -4.863023 8.245400 680.1030 1.095491e-19 ## YPR149W YPR149W S000006353 NCE102 -4.239323 7.945052 789.5545 1.161902e-19 ## YDR001C YDR001C S000002408 NTH1 -2.889227 7.075130 650.0294 1.893273e-19 ## YHL021C YHL021C S000001013 AIM17 -4.206852 6.877514 634.5432 3.509719e-19 ## YML100W YML100W S000004566 TSL1 -7.117435 9.813990 1002.5280 5.617293e-19 ## FDR ## YMR105C 1.636233e-20 ## YMR196W 1.056641e-17 ## YKL035W 1.056641e-17 ## YDR516C 2.312813e-17 ## YBR126C 9.320117e-17 ## YLR258W 9.320117e-17 ## YPR149W 9.320117e-17 ## YDR001C 1.328841e-16 ## YHL021C 2.189675e-16 ## YML100W 3.154110e-16 # generate a beautiful table for the pdf/html file. topTags(res, n=Inf) |&gt; data.frame() |&gt; arrange(FDR) |&gt; mutate(logFC=round(logFC,2)) |&gt; # mutate(across(where(is.numeric), signif, 3)) |&gt; mutate_if(is.numeric, signif, 3) |&gt; remove_rownames() |&gt; reactable( searchable = TRUE, showSortable = TRUE, columns = list(ORF = colDef( cell = function(value) { # Render as a link url &lt;- sprintf(&quot;https://www.yeastgenome.org/locus/%s&quot;, value) htmltools::tags$a(href = url, target = &quot;_blank&quot;, as.character(value)) } )) ) is.de &lt;- decideTestsDGE(res, p.value=0.05, lfc = 0) # this allows you to set a cutoff, BUT... # if you want to compare against a FC that isn&#39;t 0, should use glmTreat instead. summary(is.de) ## 1*WT.unstressed -1*WT.EtOH -1*msn24dd.unstressed 1*msn24dd.EtOH ## Down 761 ## NotSig 4031 ## Up 823 Let’s take a quick look at the differential expression plotSmear(res, de.tags=rownames(res)[is.de!=0]) title(main=&quot;DE genes using glmQLFTest, FDR&lt;0.05&quot;) Here is how we can save our output file(s). # Choose topTags destination dir_output_edgeR &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/&quot;) if (!dir.exists(dir_output_edgeR)) { dir.create(dir_output_edgeR, recursive = TRUE) } # for shairng with others, the topTags output is convenient. topTags(res, n = Inf) |&gt; data.frame() |&gt; arrange(desc(logFC)) |&gt; mutate(logFC = round(logFC, 2)) |&gt; # mutate(across(where(is.numeric), signif, 3)) |&gt; mutate_if(is.numeric, signif, 3) |&gt; write_tsv(x=_, file = paste0(dir_output_edgeR, &quot;yeast_topTags_edgeR.tsv&quot;)) # for subsequent analysis, let&#39;s save the res object as an R data object. saveRDS(object = res, file = paste0(dir_output_edgeR, &quot;yeast_res_edgeR.Rds&quot;)) # we might also want our y object list saveRDS(object = y, file = paste0(dir_output_edgeR, &quot;yeast_y_edgeR.Rds&quot;)) 7.11 Looking at all contrasts at once If we want results from all contrasts, we need to loop through them in edgeR, and them combine the results We will look more at the results of this in a later activity. # One way is to not specify just one contrast, like this: res_all &lt;- glmQLFTest(fit, contrast = my.contrasts) res_all |&gt; topTags(n=Inf) |&gt; data.frame() |&gt; head() ## ORF SGD GENENAME logFC.EtOHvsMOCK.WT ## YDR516C YDR516C S000002924 EMI2 7.037159 ## YGR008C YGR008C S000003240 STF2 7.232023 ## YNL141W YNL141W S000005085 AAH1 -8.225571 ## YLR258W YLR258W S000004248 GSY2 7.555246 ## YMR105C YMR105C S000004711 PGM2 7.634455 ## YER103W YER103W S000000905 SSA4 7.769421 ## logFC.EtOHvsMOCK.MSN24dd logFC.EtOH.MSN24ddvsWT logFC.MOCK.MSN24ddvsWT ## YDR516C 3.030381 -4.7165805 -0.7098017 ## YGR008C 2.020311 -6.1176166 -0.9059042 ## YNL141W -9.063807 -0.9710603 -0.1328248 ## YLR258W 2.692224 -5.2388431 -0.3758203 ## YMR105C 0.793642 -6.9808751 -0.1400617 ## YER103W 7.122431 -0.7957057 -0.1487160 ## logFC.EtOHvsWT.MSN24ddvsWT logCPM F PValue FDR ## YDR516C -4.0067788 9.078562 3135.887 2.130681e-32 6.237991e-29 ## YGR008C -5.2117124 6.996589 3125.389 2.221902e-32 6.237991e-29 ## YNL141W -0.8382356 7.190029 2964.658 4.298774e-32 8.045873e-29 ## YLR258W -4.8630228 8.245400 2746.906 1.115331e-31 1.399179e-28 ## YMR105C -6.8408134 9.704453 2722.673 1.245930e-31 1.399179e-28 ## YER103W -0.6469897 10.594970 2535.965 3.026744e-31 2.832528e-28 # alternatively, we can loop to get DE genes in each contrast. # here we are just saving which genes are DE per contrast decideTests_edgeR_tmp &lt;- list() for (i in 1:ncol(my.contrasts)){ current.res &lt;- glmQLFTest(fit, contrast = my.contrasts[,paste0(dimnames(my.contrasts)$Contrasts[i])]) # current.res &lt;- eBayes(current.res) decideTests_edgeR_tmp[[i]] &lt;- current.res |&gt; decideTests(p.value = 0.05, lfc = 0) |&gt; as.data.frame() } decideTests_edgeR &lt;- list_cbind(decideTests_edgeR_tmp) |&gt; rownames_to_column(&quot;gene&quot;) head(decideTests_edgeR) ## gene -1*WT.unstressed 1*WT.EtOH -1*msn24dd.unstressed 1*msn24dd.EtOH ## 1 YIL170W 1 1 ## 2 YFL056C 0 1 ## 3 YAR061W 0 0 ## 4 YGR014W -1 -1 ## 5 YPR031W -1 -1 ## 6 YIL003W -1 -1 ## -1*WT.EtOH 1*msn24dd.EtOH -1*WT.unstressed 1*msn24dd.unstressed ## 1 0 0 ## 2 1 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 0 0 ## 1*WT.unstressed -1*WT.EtOH -1*msn24dd.unstressed 1*msn24dd.EtOH ## 1 0 ## 2 1 ## 3 0 ## 4 0 ## 5 0 ## 6 0 # save this file for future analysis write_tsv(decideTests_edgeR, &quot;~/Documents/GitHub/GenomicDataAnalysis_Fa23/analysis/yeast_decideTests_allContrasts_edgeR.tsv&quot;) # for subsequent analysis, let&#39;s also save the res_all object as an R data object. saveRDS(object = res_all, file = paste0(dir_output_edgeR, &quot;yeast_res_all_edgeR.Rds&quot;)) 7.12 Questions Question 1: How many genes were upregulated and downregulated in the contrast we looked at in todays activity? Be sure to clarify the cutoffs used for determining significance. Question 2: Which gene has the lowest pvalue with a postive log2 fold change? Question 3: Choose one of the contrasts in my.contrasts that we didn’t test together, and identify the top 3 most differentially expressed genes. Question 4: In the contrast you chose, give a brief description of the biological interpretation of that contrast. Question 5: In the example above, we tested for differential expression of any magnitude. Often, we only care about changes of at least a certain magnitude. In this case, we need to use a different command. using the same data, test for genes with differential expression of at least 1 log2 fold change using the glmTreat function in edgeR. How do these results compare to DE genes without a logFC cutoff? 7.13 A template set of code chunks for doing this is below: We already loaded in the salmon counts as the object counts above. This code chunk just re-downloads that same file. path_salmon_counts &lt;- &#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/counts/salmon.gene_counts.merged.nonsubsamp.tsv&#39; counts &lt;- read.delim( path_salmon_counts, sep = &quot;\\t&quot;, header = T, row.names = 1 ) # We are reusing the sample_metadata, group, etc that we assigned above # create DGEList with salmon counts y &lt;- DGEList(counts, group=group) colnames(y) &lt;- sample_metadata$Sample # add gene names y$genes &lt;- AnnotationDbi::select(org.Sc.sgd.db,keys=rownames(y), columns=&quot;GENENAME&quot;) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # filter low counts keep &lt;- rowSums(cpm(y) &gt; 60) &gt;= 4 y &lt;- y[keep,] # calculate norm factors y &lt;- calcNormFactors(y) # estimate dispersion y &lt;- estimateDisp(y, design, robust=TRUE) # generate the fit fit &lt;- glmQLFit(y, design, robust=TRUE) # Note that, unlike other edgeR functions such as glmLRT and glmQLFTest, # glmTreat can only accept a single contrast. # If contrast is a matrix with multiple columns, then only the first column will be used. # Implement a test against FC at least 1 the test our contrast of interest tr &lt;- glmTreat(fit, contrast = my.contrasts[,&quot;EtOHvsWT.MSN24ddvsWT&quot;], lfc=1) # generate a beautiful table for the pdf/html file. topTags(tr, n = Inf) |&gt; data.frame() |&gt; arrange(FDR) |&gt; mutate(logFC = round(logFC, 2)) |&gt; # mutate(across(where(is.numeric), signif, 3)) |&gt; mutate_if(is.numeric, signif, 3) |&gt; remove_rownames() |&gt; reactable( searchable = TRUE, showSortable = TRUE, columns = list(ORF = colDef( cell = function(value) { # Render as a link url &lt;- sprintf(&quot;https://www.yeastgenome.org/locus/%s&quot;, value) htmltools::tags$a(href = url, target = &quot;_blank&quot;, as.character(value)) } )) ) # write the table to a tsv file topTags(tr, n=Inf) |&gt; data.frame() |&gt; arrange(FDR) |&gt; mutate(logFC=round(logFC,2)) |&gt; # mutate(across(where(is.numeric), signif, 3)) |&gt; mutate_if(is.numeric, signif, 3) |&gt; write_tsv(x=_, file = paste0(dir_output_edgeR, &quot;yeast_lfc1topTags_edgeR.tsv&quot;)) # summarize the DE genes is.de_tr &lt;- decideTestsDGE(tr, p.value=0.05) summary(is.de_tr) ## 1*WT.unstressed -1*WT.EtOH -1*msn24dd.unstressed 1*msn24dd.EtOH ## Down 106 ## NotSig 2255 ## Up 11 # visualize results plotSmear(tr, de.tags=rownames(tr)[is.de_tr!=0]) title(main=&quot;DE genes using glmTreat with logFC cutoff&quot;) Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: edgeR(v.3.42.4), limma(v.3.56.2), reactable(v.0.4.4), webshot2(v.0.1.1), statmod(v.1.5.0), Rsubread(v.2.14.2), ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): splines(v.4.3.1), later(v.1.3.1), bitops(v.1.0-7), ggplotify(v.0.1.2), polyclip(v.1.10-6), lifecycle(v.1.0.3), rprojroot(v.2.0.3), vroom(v.1.6.4), processx(v.3.8.2), lattice(v.0.21-9), MASS(v.7.3-60), crosstalk(v.1.2.0), magrittr(v.2.0.3), sass(v.0.4.7), rmarkdown(v.2.25), jquerylib(v.0.1.4), yaml(v.2.3.7), cowplot(v.1.1.1), chromote(v.0.1.2), DBI(v.1.1.3), RColorBrewer(v.1.1-3), abind(v.1.4-5), zlibbioc(v.1.46.0), ggraph(v.2.1.0), RCurl(v.1.98-1.12), yulab.utils(v.0.1.0), tweenr(v.2.0.2), GenomeInfoDbData(v.1.2.10), enrichplot(v.1.20.0), ggrepel(v.0.9.4), codetools(v.0.2-19), DelayedArray(v.0.26.7), DOSE(v.3.26.1), ggforce(v.0.4.1), tidyselect(v.1.2.0), aplot(v.0.2.2), farver(v.2.1.1), viridis(v.0.6.4), jsonlite(v.1.8.7), ellipsis(v.0.3.2), tidygraph(v.1.2.3), tools(v.4.3.1), treeio(v.1.24.3), Rcpp(v.1.0.11), glue(v.1.6.2), gridExtra(v.2.3), xfun(v.0.40), qvalue(v.2.32.0), websocket(v.1.4.1), withr(v.2.5.1), fastmap(v.1.1.1), latticeExtra(v.0.6-30), fansi(v.1.0.5), digest(v.0.6.33), timechange(v.0.2.0), R6(v.2.5.1), gridGraphics(v.0.5-1), colorspace(v.2.1-0), GO.db(v.3.17.0), jpeg(v.0.1-10), RSQLite(v.2.3.1), utf8(v.1.2.3), generics(v.0.1.3), data.table(v.1.14.8), graphlayouts(v.1.0.1), httr(v.1.4.7), htmlwidgets(v.1.6.2), S4Arrays(v.1.0.6), scatterpie(v.0.2.1), pkgconfig(v.2.0.3), gtable(v.0.3.4), blob(v.1.2.4), hwriter(v.1.3.2.1), shadowtext(v.0.1.2), htmltools(v.0.5.6.1), bookdown(v.0.36), fgsea(v.1.26.0), scales(v.1.2.1), png(v.0.1-8), snakecase(v.0.11.1), ggfun(v.0.1.3), rstudioapi(v.0.15.0), tzdb(v.0.4.0), reshape2(v.1.4.4), rjson(v.0.2.21), nlme(v.3.1-163), cachem(v.1.0.8), RVenn(v.1.1.0), parallel(v.4.3.1), HDO.db(v.0.99.1), pillar(v.1.9.0), grid(v.4.3.1), vctrs(v.0.6.4), promises(v.1.2.1), archive(v.1.1.5), evaluate(v.0.22), cli(v.3.6.1), locfit(v.1.5-9.8), compiler(v.4.3.1), rlang(v.1.1.1), crayon(v.1.5.2), reactR(v.0.5.0), interp(v.1.1-4), ps(v.1.7.5), plyr(v.1.8.9), fs(v.1.6.3), stringi(v.1.7.12), viridisLite(v.0.4.2), deldir(v.1.0-9), munsell(v.0.5.0), lazyeval(v.0.2.2), GOSemSim(v.2.26.1), Matrix(v.1.6-1.1), hms(v.1.1.3), patchwork(v.1.1.3), bit64(v.4.0.5), KEGGREST(v.1.40.1), memoise(v.2.0.1), bslib(v.0.5.1), ggtree(v.3.8.2), fastmatch(v.1.1-4), bit(v.4.0.5), downloader(v.0.4), ape(v.5.7-1) and gson(v.0.1.0) "],["differential-expression-deseq2.html", "Chapter 8 Differential Expression: DESeq2 8.1 Description 8.2 Learning outcomes 8.3 Loading in the featureCounts object 8.4 Count loading and Annotation 8.5 Filtering to remove low counts 8.6 Testing for differential expression 8.7 Questions", " Chapter 8 Differential Expression: DESeq2 last updated: 2023-10-26 Package Install As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;, &quot;purrr&quot;, # for working with lists (beautify column names) &quot;reactable&quot;) # for pretty tables. # We also need these Bioconductor packages today. p_load(&quot;DESeq2&quot;, &quot;AnnotationDbi&quot;, &quot;org.Sc.sgd.db&quot;) 8.1 Description This will be our second differential expression analysis workflow, converting gene counts across samples into meaningful information about genes that appear to be significantly differentially expressed between samples. This is inspired heavily by: http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html. 8.2 Learning outcomes At the end of this exercise, you should be able to: Utilize the DESeq2 package to identify differentially expressed genes. library(DESeq2) library(org.Sc.sgd.db) library(tidyverse) library(reactable) # for ease of use, set max number of digits after decimal options(digits=3) 8.3 Loading in the featureCounts object We saved this file at the end the exercise (Read_Counting.Rmd). Now we can load that object back in and assign it to the variable fc. Be sure to change the file path if you have saved it in a different location. This is the same way we started the edgeR analysis. path_fc_object &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Data/Counts/Rsubread/rsubread.yeast_fc_output.Rds&quot;) fc &lt;- readRDS(file = path_fc_object) If you don’t have that file for any reason, the below code chunk will load a copy of it from Github. counts &lt;- read.delim(&#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/counts/salmon.gene_counts.merged.nonsubsamp.tsv&#39;, sep = &quot;\\t&quot;, header = T, row.names = 1 ) # clean the column names to remove the fastq.gz_quant colnames(counts) &lt;- str_split_fixed(counts %&gt;% colnames(), &quot;\\\\.&quot;, n = 2)[, 1] We will create the data frame again that has all of the metadata information. sample_metadata &lt;- tribble( ~Sample, ~Genotype, ~Condition, &quot;YPS606_MSN24_ETOH_REP1_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP2_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP3_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP4_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_MOCK_REP1_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP2_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP3_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP4_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_ETOH_REP1_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP2_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP3_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP4_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_MOCK_REP1_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP2_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP3_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP4_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;) %&gt;% # make Condition and Genotype a factor (with baseline as first level) for DESeq2 mutate( Genotype = factor(Genotype, levels = c(&quot;WT&quot;, &quot;msn24dd&quot;)), Condition = factor(Condition, levels = c(&quot;unstressed&quot;, &quot;EtOH&quot;)) ) 8.4 Count loading and Annotation The count matrix is used to construct a DESeqDataSet class object. This is the main data class in the DESeq2 package. The DESeqDataSet object is used to store all the information required to fit a generalized linear model to the data, including library sizes and dispersion estimates as well as counts for each gene. Because we used the featureCounts function (Liao, Smyth, and Shi 2013) in the Rsubread package, the matrix of read counts can be directly provided from the \"counts\" element in the list output. The count matrix and column data can typically be read into R from flat files using base R functions such as read.csv or read.delim. With the count matrix, cts, and the sample information, coldata, we can construct a DESeqDataSet: # notice the different design specification dds &lt;- DESeqDataSetFromMatrix(countData = round(counts), colData = sample_metadata, design = ~ 1 + Genotype + Condition + Genotype:Condition) ## converting counts to integer mode # simplify the column names to make them pretty colnames(dds) &lt;- str_split_fixed(colnames(dds), &quot;\\\\.&quot;, n = 2)[, 1] # take a look at the dds object dds ## class: DESeqDataSet ## dim: 6571 16 ## metadata(1): version ## assays(1): counts ## rownames(6571): YIL170W YIL175W ... YJL134W YER096W ## rowData names(0): ## colnames(16): YPS606_MSN24_ETOH_REP1_R1 YPS606_MSN24_ETOH_REP2_R1 ... ## YPS606_WT_MOCK_REP3_R1 YPS606_WT_MOCK_REP4_R1 ## colData names(3): Sample Genotype Condition # compare this to the edgeR process below: # y &lt;- DGEList(counts, group=group) # colnames(y) &lt;- sample_metadata$GEOAccession # y 8.5 Filtering to remove low counts While it is not necessary to pre-filter low count genes before running the DESeq2 functions, there are two reasons which make pre-filtering useful: by removing rows in which there are very few reads, we reduce the memory size of the dds data object, and we increase the speed of count modeling within DESeq2. It can also improve visualizations, as features with no information for differential expression are not plotted in dispersion plots or MA-plots. Here we perform pre-filtering to keep only rows that have a count of at least 10 for a minimal number of samples. The count of 10 is a reasonable choice for bulk RNA-seq. A recommendation for the minimal number of samples is to specify the smallest group size, e.g. here there are 4 treated samples. If there are not discrete groups, one can use the minimal number of samples where non-zero counts would be considered interesting. One can also omit this step entirely and just rely on the independent filtering procedures available in results(), either IHW or genefilter. See independent filtering section. smallestGroupSize &lt;- 4 keep &lt;- rowSums(counts(dds) &gt;= 10) &gt;= smallestGroupSize dds &lt;- dds[keep,] # Equivalent version in edgeR: # keep &lt;- rowSums(cpm(y) &gt; 60) &gt;= 4 # y &lt;- y[keep,] # summary(keep) 8.6 Testing for differential expression The standard differential expression analysis steps are wrapped into a single function, DESeq. The estimation steps performed by this function are described below, in the manual page for ?DESeq and in the Methods section of the DESeq2 publication (Love, Huber, and Anders 2014). Results tables are generated using the function results, which extracts a results table with log2 fold changes, p values and adjusted p values. With no additional arguments to results, the log2 fold change and Wald test p value will be for the last variable in the design formula, and if this is a factor, the comparison will be the last level of this variable over the reference level However, the order of the variables of the design do not matter so long as the user specifies the comparison to build a results table for, using the name or contrast arguments of results. Details about the comparison are printed to the console, directly above the results table. The text, condition treated vs untreated, tells you that the estimates are of the logarithmic fold change log2(treated/untreated). # Now that we have a DESeq2 object, we can can perform differential expression. dds &lt;- DESeq(dds) ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing resultsNames(dds) ## [1] &quot;Intercept&quot; &quot;Genotype_msn24dd_vs_WT&quot; ## [3] &quot;Condition_EtOH_vs_unstressed&quot; &quot;Genotypemsn24dd.ConditionEtOH&quot; # create a model matrix mod_mat &lt;- model.matrix(design(dds), colData(dds)) # define coefficient vectors for each group WT_MOCK &lt;- colMeans(mod_mat[dds$Genotype == &quot;WT&quot; &amp; dds$Condition == &quot;unstressed&quot;, ]) WT_EtOH &lt;- colMeans(mod_mat[dds$Genotype == &quot;WT&quot; &amp; dds$Condition == &quot;EtOH&quot;, ]) MSN24_MOCK &lt;- colMeans(mod_mat[dds$Genotype == &quot;msn24dd&quot; &amp; dds$Condition == &quot;unstressed&quot;, ]) MSN24dd_EtOH &lt;- colMeans(mod_mat[dds$Genotype == &quot;msn24dd&quot; &amp; dds$Condition == &quot;EtOH&quot;, ]) The nice thing about this approach is that we do not need to worry about any of this, the weights come from our colMeans() call automatically. And now, any contrasts that we make will take these weights into account: res &lt;- results(dds) res ## log2 fold change (MLE): Genotypemsn24dd.ConditionEtOH ## Wald test p-value: Genotypemsn24dd.ConditionEtOH ## DataFrame with 5622 rows and 6 columns ## baseMean log2FoldChange lfcSE stat pvalue padj ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## YIL170W 14.8499 0.9768970 0.878689 1.111767 2.66238e-01 0.443362781 ## YFL056C 265.8871 0.8156191 0.183405 4.447097 8.70386e-06 0.000074707 ## YAR061W 20.1326 -0.6364363 0.468363 -1.358852 1.74194e-01 0.329294856 ## YGR014W 2615.6548 -0.0174106 0.128224 -0.135782 8.91994e-01 0.942098024 ## YPR031W 237.3713 -0.1163443 0.226110 -0.514547 6.06870e-01 0.755325201 ## ... ... ... ... ... ... ... ## YDL086C-A 15.0128 -0.7051445 0.626958 -1.12471 0.26071321 0.43661890 ## YJR067C 145.6068 -0.0844778 0.213231 -0.39618 0.69197231 0.81490383 ## YDR030C 80.1245 -0.3096978 0.281000 -1.10213 0.27040547 0.44831011 ## YJL134W 1389.3306 0.2569824 0.147556 1.74159 0.08157979 0.19181998 ## YER096W 250.0039 -0.6634104 0.214676 -3.09029 0.00199959 0.00931377 We could have equivalently produced this results table with the following more specific command. Because Genotypemsn24dd:ConditionEtOH is the last variable in the design, we could optionally leave off the contrast argument to extract the comparison of the two levels of Genotypemsn24dd:ConditionEtOH. res &lt;- results(dds, contrast = (MSN24dd_EtOH - MSN24_MOCK) - (WT_EtOH - WT_MOCK) ) res %&gt;% data.frame() %&gt;% rownames_to_column(&quot;ORF&quot;) %&gt;% # add the gene names left_join(AnnotationDbi::select(org.Sc.sgd.db,keys=.$ORF,columns=&quot;GENENAME&quot;),by=&quot;ORF&quot;) %&gt;% relocate(GENENAME, .after = ORF) %&gt;% arrange(padj) %&gt;% mutate(log2FoldChange = round(log2FoldChange, 2)) %&gt;% mutate(across(where(is.numeric), signif, 3)) %&gt;% reactable( searchable = TRUE, showSortable = TRUE, columns = list(ORF = colDef( cell = function(value) { # Render as a link url &lt;- sprintf(&quot;https://www.yeastgenome.org/locus/%s&quot;, value) htmltools::tags$a(href = url, target = &quot;_blank&quot;, as.character(value)) } )) ) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## Warning: There was 1 warning in `mutate()`. ## ℹ In argument: `across(where(is.numeric), signif, 3)`. ## Caused by warning: ## ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0. ## Supply arguments directly to `.fns` through an anonymous function instead. ## ## # Previously ## across(a:b, mean, na.rm = TRUE) ## ## # Now ## across(a:b, \\(x) mean(x, na.rm = TRUE)) # filter based on padj and a lfc cutoff res_sig &lt;- subset(res, padj&lt;.01) res_lfc &lt;- subset(res_sig, abs(log2FoldChange) &gt; 1) # let&#39;s compare the summaries before and after setting a lfc cutoff: summary(res, alpha=0.05) ## ## out of 5622 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 832, 15% ## LFC &lt; 0 (down) : 815, 14% ## outliers [1] : 0, 0% ## low counts [2] : 0, 0% ## (mean count &lt; 4) ## [1] see &#39;cooksCutoff&#39; argument of ?results ## [2] see &#39;independentFiltering&#39; argument of ?results summary(res_lfc, alpha=0.05) ## ## out of 354 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 76, 21% ## LFC &lt; 0 (down) : 278, 79% ## outliers [1] : 0, 0% ## low counts [2] : 0, 0% ## (mean count &lt; 4) ## [1] see &#39;cooksCutoff&#39; argument of ?results ## [2] see &#39;independentFiltering&#39; argument of ?results head(res_lfc) ## log2 fold change (MLE): 0,0,0,+1 ## Wald test p-value: 0,0,0,+1 ## DataFrame with 6 rows and 6 columns ## baseMean log2FoldChange lfcSE stat pvalue padj ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## YER091C 2846.4044 1.94771 0.267390 7.28414 3.23735e-13 8.42610e-12 ## YJR127C 819.0282 -1.34748 0.150234 -8.96917 2.98759e-19 1.21712e-17 ## YAL040C 3530.0007 -1.05979 0.141324 -7.49903 6.42942e-14 1.78941e-12 ## YLR456W 57.3756 1.06661 0.333378 3.19940 1.37712e-03 6.76761e-03 ## YMR173W 295.1969 -3.23614 0.268425 -12.05605 1.80230e-33 1.49008e-31 ## YFR017C 252.8558 -5.39554 0.489053 -11.03265 2.65916e-28 1.84565e-26 Let’s take a quick look at the differential expression DESeq2::plotMA(res, alpha=0.01) Plot an individual gene: gene &lt;- &quot;YER091C&quot; # Here is the default visualization. Depending on screen size, the xlab # might not show all of the groups. plotCounts(dds, gene=&quot;YEL039C&quot;, intgroup=c(&quot;Genotype&quot;,&quot;Condition&quot;), xlab=&quot;Genotype:Condition&quot;) # Make the plot prettier with ggplot(). Note the returnData=TRUE let&#39;s us do this. plotCounts(dds, gene=gene, intgroup=c(&quot;Genotype&quot;,&quot;Condition&quot;), xlab=&quot;Genotype:Condition&quot;, returnData = TRUE) %&gt;% rownames_to_column(&quot;Sample&quot;) %&gt;% ggplot(aes(x=Genotype, y=count, color=Condition, shape=Condition)) + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;, dotsize=0.75, position=position_dodge(0.4), # this seperates by Condition a bit fill=NA) + labs(x=&quot;Genotype&quot;, y=&quot;normalized count&quot;, title=paste0(&quot;Visualizing the expression of ORF: &quot;, gene) ) + scale_y_log10() + theme_classic() ## Bin width defaults to 1/30 of the range of the data. Pick better value with ## `binwidth`. We need to make sure and save our output file(s). # Choose topTags destination dir_output_DESeq2 &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/DESeq2/&quot;) if (!dir.exists(dir_output_DESeq2)) { dir.create(dir_output_DESeq2, recursive = TRUE) } # for sharing with others, a tsv for the res output is convenient. # Depending on what people need, we can save res object as is or beautify it. res %&gt;% data.frame() %&gt;% rownames_to_column(&quot;ORF&quot;) %&gt;% left_join(AnnotationDbi::select(org.Sc.sgd.db,keys=.$ORF,columns=&quot;GENENAME&quot;),by=&quot;ORF&quot;) %&gt;% relocate(GENENAME, .after = ORF) %&gt;% # arrange(padj) %&gt;% # mutate(log2FoldChange = round(log2FoldChange, 2)) %&gt;% # mutate(across(where(is.numeric), signif, 3)) %&gt;% write_tsv(., file = paste0(dir_output_DESeq2, &quot;yeast_res_DESeq2.tsv&quot;)) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # for subsequent analysis, let&#39;s save the res object as an R data object. saveRDS(object = res, file = paste0(dir_output_DESeq2, &quot;yeast_res_DESeq2.Rds&quot;)) 8.7 Questions Question 1: How many genes were upregulated and downregulated in the contrast we looked at in this activity? Be sure to clarify the cutoffs used for determining significance. Question 2: Choose one of the contrasts in my.contrasts that we didn’t test together, and identify the top 3 most differentially expressed genes. Question 3: In the contrast you chose, give a brief description of the biological interpretation of that contrast. Question 4: We analyzed differential expression of the counts generated by the full Salmon counts. Load in the counts generated by using the subset samples and look at the same contrast we did in class. What differences and similarities do you see? A template for doing this is below: path_subset_counts &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Data/Counts/Salmon/salmon.gene_counts.merged.yeast.tsv&quot;) # If you don&#39;t have thot file, uncomment the code below and run it instead. # read.delim(&#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/counts/salmon.gene_counts.merged.yeast.tsv&#39;, sep = &quot;\\t&quot;, header = T, row.names = 1) subset_counts &lt;- read.delim(file = path_subset_counts, sep = &quot;\\t&quot;, header = T, row.names = 1 ) # We are reusing the sample_metadata, group, etc that we assigned above # create DESeqDataSet with salmon counts (round needed for nonintegers) dds_subset &lt;- DESeqDataSetFromMatrix(countData = round(subset_counts), colData = sample_metadata, design = ~ 1 + Genotype + Condition + Genotype:Condition) ## converting counts to integer mode # simplify the column names to make them pretty colnames(dds_subset) &lt;- str_split_fixed(colnames(dds_subset), &quot;\\\\.&quot;, n = 2)[, 1] # filter low counts keep_subset &lt;- rowSums(counts(dds_subset) &gt;= 10) &gt;= smallestGroupSize dds_subset &lt;- dds_subset[keep_subset,] # generate the fit dds_subset &lt;- DESeq(dds_subset) ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing # test our contrast of interest res_subset &lt;- results(dds_subset, contrast = (MSN24dd_EtOH - MSN24_MOCK) - (WT_EtOH - WT_MOCK) ) # generate a beautiful table for the pdf/html file. res_subset %&gt;% data.frame() %&gt;% rownames_to_column(&quot;ORF&quot;) %&gt;% # add the gene names left_join(AnnotationDbi::select(org.Sc.sgd.db,keys=.$ORF,columns=&quot;GENENAME&quot;),by=&quot;ORF&quot;) %&gt;% relocate(GENENAME, .after = ORF) %&gt;% arrange(padj) %&gt;% mutate(log2FoldChange = round(log2FoldChange, 2)) %&gt;% mutate(across(where(is.numeric), signif, 3)) %&gt;% reactable( searchable = TRUE, showSortable = TRUE, columns = list(ORF = colDef( cell = function(value) { # Render as a link url &lt;- sprintf(&quot;https://www.yeastgenome.org/locus/%s&quot;, value) htmltools::tags$a(href = url, target = &quot;_blank&quot;, as.character(value)) } )) ) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # summarize the DE genes summary(res_subset, alpha=0.05) ## ## out of 2542 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 76, 3% ## LFC &lt; 0 (down) : 99, 3.9% ## outliers [1] : 0, 0% ## low counts [2] : 690, 27% ## (mean count &lt; 10) ## [1] see &#39;cooksCutoff&#39; argument of ?results ## [2] see &#39;independentFiltering&#39; argument of ?results # visualize results DESeq2::plotMA(res_subset, alpha=0.05) Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: DESeq2(v.1.40.2), edgeR(v.3.42.4), limma(v.3.56.2), reactable(v.0.4.4), webshot2(v.0.1.1), statmod(v.1.5.0), Rsubread(v.2.14.2), ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): splines(v.4.3.1), later(v.1.3.1), bitops(v.1.0-7), ggplotify(v.0.1.2), polyclip(v.1.10-6), lifecycle(v.1.0.3), rprojroot(v.2.0.3), vroom(v.1.6.4), processx(v.3.8.2), lattice(v.0.21-9), MASS(v.7.3-60), crosstalk(v.1.2.0), magrittr(v.2.0.3), sass(v.0.4.7), rmarkdown(v.2.25), jquerylib(v.0.1.4), yaml(v.2.3.7), cowplot(v.1.1.1), chromote(v.0.1.2), DBI(v.1.1.3), RColorBrewer(v.1.1-3), abind(v.1.4-5), zlibbioc(v.1.46.0), ggraph(v.2.1.0), RCurl(v.1.98-1.12), yulab.utils(v.0.1.0), tweenr(v.2.0.2), GenomeInfoDbData(v.1.2.10), enrichplot(v.1.20.0), ggrepel(v.0.9.4), codetools(v.0.2-19), DelayedArray(v.0.26.7), DOSE(v.3.26.1), ggforce(v.0.4.1), tidyselect(v.1.2.0), aplot(v.0.2.2), farver(v.2.1.1), viridis(v.0.6.4), jsonlite(v.1.8.7), ellipsis(v.0.3.2), tidygraph(v.1.2.3), tools(v.4.3.1), treeio(v.1.24.3), Rcpp(v.1.0.11), glue(v.1.6.2), gridExtra(v.2.3), xfun(v.0.40), qvalue(v.2.32.0), websocket(v.1.4.1), withr(v.2.5.1), fastmap(v.1.1.1), latticeExtra(v.0.6-30), fansi(v.1.0.5), digest(v.0.6.33), timechange(v.0.2.0), R6(v.2.5.1), gridGraphics(v.0.5-1), colorspace(v.2.1-0), GO.db(v.3.17.0), jpeg(v.0.1-10), RSQLite(v.2.3.1), utf8(v.1.2.3), generics(v.0.1.3), data.table(v.1.14.8), graphlayouts(v.1.0.1), httr(v.1.4.7), htmlwidgets(v.1.6.2), S4Arrays(v.1.0.6), scatterpie(v.0.2.1), pkgconfig(v.2.0.3), gtable(v.0.3.4), blob(v.1.2.4), hwriter(v.1.3.2.1), shadowtext(v.0.1.2), htmltools(v.0.5.6.1), bookdown(v.0.36), fgsea(v.1.26.0), scales(v.1.2.1), png(v.0.1-8), snakecase(v.0.11.1), ggfun(v.0.1.3), rstudioapi(v.0.15.0), tzdb(v.0.4.0), reshape2(v.1.4.4), rjson(v.0.2.21), nlme(v.3.1-163), cachem(v.1.0.8), RVenn(v.1.1.0), parallel(v.4.3.1), HDO.db(v.0.99.1), pillar(v.1.9.0), grid(v.4.3.1), vctrs(v.0.6.4), promises(v.1.2.1), archive(v.1.1.5), evaluate(v.0.22), cli(v.3.6.1), locfit(v.1.5-9.8), compiler(v.4.3.1), rlang(v.1.1.1), crayon(v.1.5.2), reactR(v.0.5.0), interp(v.1.1-4), ps(v.1.7.5), plyr(v.1.8.9), fs(v.1.6.3), stringi(v.1.7.12), viridisLite(v.0.4.2), deldir(v.1.0-9), munsell(v.0.5.0), lazyeval(v.0.2.2), GOSemSim(v.2.26.1), Matrix(v.1.6-1.1), hms(v.1.1.3), patchwork(v.1.1.3), bit64(v.4.0.5), KEGGREST(v.1.40.1), memoise(v.2.0.1), bslib(v.0.5.1), ggtree(v.3.8.2), fastmatch(v.1.1-4), bit(v.4.0.5), downloader(v.0.4), ape(v.5.7-1) and gson(v.0.1.0) "],["differential-expression-limma.html", "Chapter 9 Differential Expression: limma 9.1 Description 9.2 Learning Objectives 9.3 Loading in the count data file 9.4 Count loading and Annotation 9.5 Filtering to remove low counts 9.6 Normalization for composition bias 9.7 Exploring differences between libraries 9.8 Estimate Dispersion 9.9 Testing for differential expression 9.10 Examining a specific contrast 9.11 Visualization 9.12 treat() testing 9.13 Comparing DE analysis softwares 9.14 Correlation between logFC estimates across softwares 9.15 Questions", " Chapter 9 Differential Expression: limma last updated: 2023-10-26 Install Packages As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;, &quot;statmod&quot;, # required dependency, need to load manually on some macOS versions. &quot;Glimma&quot;, # beautifies limma results &quot;purrr&quot;, # for working with lists (beautify column names) &quot;reactable&quot;) # for pretty tables. # We also need these Bioconductor packages today. p_load(&quot;edgeR&quot;, &quot;AnnotationDbi&quot;, &quot;org.Sc.sgd.db&quot;, &quot;ggVennDiagram&quot;) #NOTE: edgeR loads limma as a dependency 9.1 Description This will be our last differential expression analysis workflow, converting gene counts across samples into meaningful information about genes that appear to be significantly differentially expressed between samples 9.2 Learning Objectives At the end of this exercise, you should be able to: Generate a table of sample metadata. Filter low counts and normalize count data. Utilize the limma package to identify differentially expressed genes. library(limma) library(org.Sc.sgd.db) # for ease of use, set max number of digits after decimal options(digits=3) 9.3 Loading in the count data file We are downloading the counts for the non-subsampled fastq files from a Github repository using the code below. Just as in previous exercises, assign the data to the variable counts. You can change the file path if you have saved it to your computer in a different location. counts &lt;- read.delim(&#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/ethanol_stress/counts/salmon.gene_counts.merged.nonsubsamp.tsv&#39;, sep = &quot;\\t&quot;, header = T, row.names = 1 ) If you don’t have that file for any reason, the below code chunk will load a copy of it from Github. To find the order of files we need, we can get just the part of the column name before the first “.” symbol with this command: str_split_fixed(counts %&gt;% colnames(), &quot;\\\\.&quot;, n = 2)[, 1] ## [1] &quot;YPS606_MSN24_ETOH_REP1_R1&quot; &quot;YPS606_MSN24_ETOH_REP2_R1&quot; ## [3] &quot;YPS606_MSN24_ETOH_REP3_R1&quot; &quot;YPS606_MSN24_ETOH_REP4_R1&quot; ## [5] &quot;YPS606_MSN24_MOCK_REP1_R1&quot; &quot;YPS606_MSN24_MOCK_REP2_R1&quot; ## [7] &quot;YPS606_MSN24_MOCK_REP3_R1&quot; &quot;YPS606_MSN24_MOCK_REP4_R1&quot; ## [9] &quot;YPS606_WT_ETOH_REP1_R1&quot; &quot;YPS606_WT_ETOH_REP2_R1&quot; ## [11] &quot;YPS606_WT_ETOH_REP3_R1&quot; &quot;YPS606_WT_ETOH_REP4_R1&quot; ## [13] &quot;YPS606_WT_MOCK_REP1_R1&quot; &quot;YPS606_WT_MOCK_REP2_R1&quot; ## [15] &quot;YPS606_WT_MOCK_REP3_R1&quot; &quot;YPS606_WT_MOCK_REP4_R1&quot; sample_metadata &lt;- tribble( ~Sample, ~Genotype, ~Condition, &quot;YPS606_MSN24_ETOH_REP1_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP2_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP3_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_ETOH_REP4_R1&quot;, &quot;msn24dd&quot;, &quot;EtOH&quot;, &quot;YPS606_MSN24_MOCK_REP1_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP2_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP3_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_MSN24_MOCK_REP4_R1&quot;, &quot;msn24dd&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_ETOH_REP1_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP2_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP3_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_ETOH_REP4_R1&quot;, &quot;WT&quot;, &quot;EtOH&quot;, &quot;YPS606_WT_MOCK_REP1_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP2_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP3_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;, &quot;YPS606_WT_MOCK_REP4_R1&quot;, &quot;WT&quot;, &quot;unstressed&quot;) %&gt;% # Create a new column that combines the Genotype and Condition value mutate(Group = factor( paste(Genotype, Condition, sep = &quot;.&quot;), levels = c( &quot;WT.unstressed&quot;,&quot;WT.EtOH&quot;, &quot;msn24dd.unstressed&quot;, &quot;msn24dd.EtOH&quot; ) )) %&gt;% # make Condition and Genotype a factor (with baseline as first level) for edgeR mutate( Genotype = factor(Genotype, levels = c(&quot;WT&quot;, &quot;msn24dd&quot;)), Condition = factor(Condition, levels = c(&quot;unstressed&quot;, &quot;EtOH&quot;)) ) Now, let’s create a design matrix with this information group &lt;- sample_metadata$Group design &lt;- model.matrix(~ 0 + group) # beautify column names colnames(design) &lt;- levels(group) design ## WT.unstressed WT.EtOH msn24dd.unstressed msn24dd.EtOH ## 1 0 0 0 1 ## 2 0 0 0 1 ## 3 0 0 0 1 ## 4 0 0 0 1 ## 5 0 0 1 0 ## 6 0 0 1 0 ## 7 0 0 1 0 ## 8 0 0 1 0 ## 9 0 1 0 0 ## 10 0 1 0 0 ## 11 0 1 0 0 ## 12 0 1 0 0 ## 13 1 0 0 0 ## 14 1 0 0 0 ## 15 1 0 0 0 ## 16 1 0 0 0 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$group ## [1] &quot;contr.treatment&quot; 9.4 Count loading and Annotation The count matrix is used to construct a DGEList class object. This is the main data class in the edgeR package. The DGEList object is used to store all the information required to fit a generalized linear model to the data, including library sizes and dispersion estimates as well as counts for each gene. y &lt;- DGEList(counts, group=group) colnames(y) &lt;- sample_metadata$Sample y$samples ## group lib.size norm.factors ## YPS606_MSN24_ETOH_REP1_R1 msn24dd.EtOH 17409481 1 ## YPS606_MSN24_ETOH_REP2_R1 msn24dd.EtOH 14055425 1 ## YPS606_MSN24_ETOH_REP3_R1 msn24dd.EtOH 13127876 1 ## YPS606_MSN24_ETOH_REP4_R1 msn24dd.EtOH 16655559 1 ## YPS606_MSN24_MOCK_REP1_R1 msn24dd.unstressed 12266723 1 ## YPS606_MSN24_MOCK_REP2_R1 msn24dd.unstressed 11781244 1 ## YPS606_MSN24_MOCK_REP3_R1 msn24dd.unstressed 11340274 1 ## YPS606_MSN24_MOCK_REP4_R1 msn24dd.unstressed 13024330 1 ## YPS606_WT_ETOH_REP1_R1 WT.EtOH 15422048 1 ## YPS606_WT_ETOH_REP2_R1 WT.EtOH 14924728 1 ## YPS606_WT_ETOH_REP3_R1 WT.EtOH 14738753 1 ## YPS606_WT_ETOH_REP4_R1 WT.EtOH 12203133 1 ## YPS606_WT_MOCK_REP1_R1 WT.unstressed 13592206 1 ## YPS606_WT_MOCK_REP2_R1 WT.unstressed 12921965 1 ## YPS606_WT_MOCK_REP3_R1 WT.unstressed 13128396 1 ## YPS606_WT_MOCK_REP4_R1 WT.unstressed 15568155 1 Human-readable gene symbols can also be added to complement the gene ID for each gene, using the annotation in the org.Sc.sgd.db package. y$genes &lt;- AnnotationDbi::select(org.Sc.sgd.db,keys=rownames(y),columns=&quot;GENENAME&quot;) ## &#39;select()&#39; returned 1:1 mapping between keys and columns head(y$genes) ## ORF SGD GENENAME ## 1 YIL170W S000001432 HXT12 ## 2 YIL175W S000001437 &lt;NA&gt; ## 3 YPL276W S000006197 &lt;NA&gt; ## 4 YFL056C S000001838 AAD6 ## 5 YCL074W S000000579 &lt;NA&gt; ## 6 YAR061W S000000087 &lt;NA&gt; 9.5 Filtering to remove low counts Genes with very low counts across all libraries provide little evidence for differential ex- pression. In addition, the pronounced discreteness of these counts interferes with some of the statistical approximations that are used later in the pipeline. These genes should be filtered out prior to further analysis. Here, we will retain a gene only if it is expressed at a count-per-million (CPM) above 60 in at least four samples. keep &lt;- rowSums(cpm(y) &gt; 0.7) &gt;= 4 y &lt;- y[keep,] summary(keep) ## Mode FALSE TRUE ## logical 956 5615 Where did those cutoff numbers come from? As a general rule, we don’t want to exclude a gene that is expressed in only one group, so a cutoff number equal to the number of replicates can be a good starting point. For counts, a good threshold can be chosen by identifying the CPM that corresponds to a count of 10, which in this case would be about 60 (due to our fastq files being subsets of the full reads): cpm(10, mean(y$samples$lib.size)) ## [,1] ## [1,] 0.72 Smaller CPM thresholds are usually appropriate for larger libraries. 9.6 Normalization for composition bias TMM normalization is performed to eliminate composition biases between libraries. This generates a set of normalization factors, where the product of these factors and the library sizes defines the effective library size. The calcNormFactors function returns the DGEList argument with only the norm.factors changed. y &lt;- calcNormFactors(y) y$samples ## group lib.size norm.factors ## YPS606_MSN24_ETOH_REP1_R1 msn24dd.EtOH 17409481 1.239 ## YPS606_MSN24_ETOH_REP2_R1 msn24dd.EtOH 14055425 1.102 ## YPS606_MSN24_ETOH_REP3_R1 msn24dd.EtOH 13127876 1.108 ## YPS606_MSN24_ETOH_REP4_R1 msn24dd.EtOH 16655559 1.007 ## YPS606_MSN24_MOCK_REP1_R1 msn24dd.unstressed 12266723 1.038 ## YPS606_MSN24_MOCK_REP2_R1 msn24dd.unstressed 11781244 1.003 ## YPS606_MSN24_MOCK_REP3_R1 msn24dd.unstressed 11340274 0.960 ## YPS606_MSN24_MOCK_REP4_R1 msn24dd.unstressed 13024330 0.984 ## YPS606_WT_ETOH_REP1_R1 WT.EtOH 15422048 0.839 ## YPS606_WT_ETOH_REP2_R1 WT.EtOH 14924728 0.941 ## YPS606_WT_ETOH_REP3_R1 WT.EtOH 14738753 0.988 ## YPS606_WT_ETOH_REP4_R1 WT.EtOH 12203133 0.971 ## YPS606_WT_MOCK_REP1_R1 WT.unstressed 13592206 0.990 ## YPS606_WT_MOCK_REP2_R1 WT.unstressed 12921965 1.038 ## YPS606_WT_MOCK_REP3_R1 WT.unstressed 13128396 0.900 ## YPS606_WT_MOCK_REP4_R1 WT.unstressed 15568155 0.951 The normalization factors multiply to unity across all libraries. A normalization factor below unity indicates that the library size will be scaled down, as there is more suppression (i.e., composition bias) in that library relative to the other libraries. This is also equivalent to scaling the counts upwards in that sample. Conversely, a factor above unity scales up the library size and is equivalent to downscaling the counts. The performance of the TMM normalization procedure can be examined using mean- difference (MD) plots. This visualizes the library size-adjusted log-fold change between two libraries (the difference) against the average log-expression across those libraries (the mean). The below command plots an MD plot, comparing sample 1 against an artificial library constructed from the average of all other samples. for (sample in 1:nrow(y$samples)) { plotMD(cpm(y, log=TRUE), column=sample) abline(h=0, col=&quot;red&quot;, lty=2, lwd=2) } 9.7 Exploring differences between libraries The data can be explored by generating multi-dimensional scaling (MDS) plots. This visualizes the differences between the expression profiles of different samples in two dimensions. The next plot shows the MDS plot for the yeast heatshock data. points &lt;- c(1,1,2,2) colors &lt;- rep(c(&quot;black&quot;, &quot;red&quot;),8) plotMDS(y, col=colors[group], pch=points[group]) # legend(&quot;bottomright&quot;, legend=levels(group), # pch=points, col=colors, ncol=2) legend(&quot;bottomright&quot;,legend=levels(group), pch=points, col=colors, ncol=2, inset=c(0,1.05), xpd=TRUE) 9.8 Estimate Dispersion This is the first step in a limma analysis that differs from the edgeR workflow. y &lt;- voom(y, design, plot = T) # compare this to the edgeR function estimateDisp, which uses a NB distribution. # y &lt;- estimateDisp(y, design, robust=TRUE) # plotBCV(y) What is voom doing? Counts are transformed to log2 counts per million reads (CPM), where “per million reads” is defined based on the normalization factors we calculated earlier A linear model is fitted to the log2 CPM for each gene, and the residuals are calculated A smoothed curve is fitted to the sqrt(residual standard deviation) by average expression (see red line in plot above) The smoothed curve is used to obtain weights for each gene and sample that are passed into limma along with the log2 CPMs. Limma uses the lmFit function. This returns a MArrayLM object containing the weighted least squares estimates for each gene. fit &lt;- lmFit(y, design) head(coef(fit)) ## WT.unstressed WT.EtOH msn24dd.unstressed msn24dd.EtOH ## YIL170W -2.154 0.936 -3.239 0.851 ## YFL056C 3.921 4.044 3.958 4.888 ## YAR061W 0.135 0.746 0.666 0.641 ## YGR014W 7.666 7.319 7.796 7.436 ## YPR031W 4.711 2.735 4.857 2.818 ## YIL003W 4.589 2.530 4.468 2.662 # edgeR equivalent # fit &lt;- glmQLFit(y, design, robust=TRUE) # head(fit$coefficients) # plotQLDisp(fit) Comparisons between groups (log fold-changes) are obtained as contrasts of these fitted linear models: 9.9 Testing for differential expression The final step is to actually test for significant differential expression in each gene, using the QL F-test. The contrast of interest can be specified using the makeContrasts function in limma, the same one that is used by edgeR. # generate contrasts we are interested in learning about my.contrasts &lt;- makeContrasts(EtOHvsMOCK.WT = WT.EtOH - WT.unstressed, EtOHvsMOCK.MSN24dd = msn24dd.EtOH - msn24dd.unstressed, EtOH.MSN24ddvsWT = msn24dd.EtOH - WT.EtOH, MOCK.MSN24ddvsWT = msn24dd.unstressed - WT.unstressed, EtOHvsWT.MSN24ddvsWT = (msn24dd.EtOH-msn24dd.unstressed)-(WT.EtOH-WT.unstressed), levels=design) # fit the linear model to these contrasts res_all &lt;- contrasts.fit(fit, my.contrasts) # This looks at all of our contrasts in my.contrasts res_all &lt;- eBayes(res_all) # eBayes is the alternative to glmQLFTest in edgeR # This contrast looks at the difference in the stress responses between mutant and WT # res &lt;- glmQLFTest(fit, contrast = my.contrasts) top.table &lt;- topTable(res_all, sort.by = &quot;F&quot;, n = Inf) head(top.table, 20) ## ORF SGD GENENAME EtOHvsMOCK.WT EtOHvsMOCK.MSN24dd ## YER103W YER103W S000000905 SSA4 7.77 7.122 ## YDR516C YDR516C S000002924 EMI2 7.03 3.031 ## YCL040W YCL040W S000000545 GLK1 8.51 6.833 ## YMR105C YMR105C S000004711 PGM2 7.62 0.792 ## YLL039C YLL039C S000003962 UBI4 5.75 3.840 ## YJL052W YJL052W S000003588 TDH1 10.02 9.028 ## YOR317W YOR317W S000005844 FAA1 5.36 4.624 ## YBL039C YBL039C S000000135 URA7 -6.93 -5.470 ## YGL037C YGL037C S000003005 PNC1 6.10 3.849 ## YHR104W YHR104W S000001146 GRE3 4.94 2.519 ## YGR254W YGR254W S000003486 ENO1 7.83 7.590 ## YBR126C YBR126C S000000330 TPS1 5.36 1.908 ## YPL012W YPL012W S000005933 RRP12 -5.12 -4.315 ## YDR399W YDR399W S000002807 HPT1 -5.12 -5.460 ## YHR170W YHR170W S000001213 NMD3 -4.26 -3.542 ## YLR258W YLR258W S000004248 GSY2 7.54 2.699 ## YGR159C YGR159C S000003391 NSR1 -6.88 -5.983 ## YMR196W YMR196W S000004809 &lt;NA&gt; 7.36 2.198 ## YLL026W YLL026W S000003949 HSP104 5.70 3.659 ## YML100W YML100W S000004566 TSL1 7.79 0.658 ## EtOH.MSN24ddvsWT MOCK.MSN24ddvsWT EtOHvsWT.MSN24ddvsWT AveExpr F ## YER103W -0.797 -0.15215 -0.645 7.81 3407 ## YDR516C -4.710 -0.71026 -4.000 6.13 2659 ## YCL040W -2.077 -0.39710 -1.680 8.06 2600 ## YMR105C -6.969 -0.14072 -6.829 6.08 2204 ## YLL039C -2.135 -0.22780 -1.907 7.23 2067 ## YJL052W -1.209 -0.22146 -0.988 8.83 2000 ## YOR317W -0.979 -0.24259 -0.736 7.06 1964 ## YBL039C 1.423 -0.03529 1.458 6.17 1942 ## YGL037C -2.856 -0.60381 -2.252 6.60 1920 ## YHR104W -2.568 -0.14350 -2.424 6.99 1910 ## YGR254W -0.725 -0.48483 -0.240 10.64 1849 ## YBR126C -3.646 -0.19755 -3.448 7.99 1789 ## YPL012W 0.814 0.00468 0.809 6.77 1761 ## YDR399W -0.422 -0.08242 -0.339 6.27 1697 ## YHR170W 0.687 -0.03394 0.721 6.27 1675 ## YLR258W -5.233 -0.38790 -4.845 5.01 1626 ## YGR159C 0.761 -0.13994 0.901 7.21 1606 ## YMR196W -4.953 0.20940 -5.162 5.42 1604 ## YLL026W -1.492 0.54538 -2.038 7.84 1571 ## YML100W -7.508 -0.37240 -7.136 5.91 1557 ## P.Value adj.P.Val ## YER103W 3.36e-30 1.89e-26 ## YDR516C 5.53e-29 1.33e-25 ## YCL040W 7.11e-29 1.33e-25 ## YMR105C 4.59e-28 6.45e-25 ## YLL039C 9.49e-28 1.07e-24 ## YJL052W 1.37e-27 1.29e-24 ## YOR317W 1.68e-27 1.29e-24 ## YBL039C 1.91e-27 1.29e-24 ## YGL037C 2.17e-27 1.29e-24 ## YHR104W 2.31e-27 1.29e-24 ## YGR254W 3.32e-27 1.70e-24 ## YBR126C 4.84e-27 2.27e-24 ## YPL012W 5.77e-27 2.49e-24 ## YDR399W 8.75e-27 3.51e-24 ## YHR170W 1.01e-26 3.80e-24 ## YLR258W 1.42e-26 4.97e-24 ## YGR159C 1.63e-26 5.16e-24 ## YMR196W 1.65e-26 5.16e-24 ## YLL026W 2.08e-26 6.15e-24 ## YML100W 2.31e-26 6.47e-24 top.table %&gt;% tibble() %&gt;% arrange(adj.P.Val) %&gt;% mutate(across(where(is.numeric), signif, 3)) %&gt;% reactable() # edgeR equivalent below: # let&#39;s take a quick look at the results # topTags(res, n=10) # # # generate a beautiful table for the pdf/html file. # topTags(res, n=Inf) %&gt;% data.frame() %&gt;% # arrange(FDR) %&gt;% # mutate(logFC=round(logFC,2)) %&gt;% # mutate(across(where(is.numeric), signif, 3)) %&gt;% # reactable() # Let&#39;s see how many genes in total are significantly different in any contrast length(which(top.table$adj.P.Val &lt; 0.05)) ## [1] 4911 # let&#39;s summarize this and break it down by contrast. res_all %&gt;% decideTests(p.value = 0.05, lfc = 0) %&gt;% summary() ## EtOHvsMOCK.WT EtOHvsMOCK.MSN24dd EtOH.MSN24ddvsWT MOCK.MSN24ddvsWT ## Down 2260 2145 1247 10 ## NotSig 1102 1285 2920 5595 ## Up 2253 2185 1448 10 ## EtOHvsWT.MSN24ddvsWT ## Down 756 ## NotSig 4065 ## Up 794 # we can save the decideTests output for graphing decide_tests_res_all_limma &lt;- res_all %&gt;% decideTests(p.value = 0.05, lfc = 0) # Bonus: limma allows us to create a venn diagram of these contrasts # up &amp; downregulated genes res_all %&gt;% decideTests(p.value = 0.05, lfc = 1) %&gt;% vennDiagram(include=c(&quot;up&quot;, &quot;down&quot;), lwd=0.75, mar=rep(2,4), # increase margin size counts.col= c(&quot;red&quot;, &quot;blue&quot;), show.include=TRUE) 9.10 Examining a specific contrast It is interesting to see all of the contrasts simultaneously, but often we may want to look at just a single contrast (and get the corresponding probabilities). Here is how we do that: # fit the linear model to these contrasts res &lt;- contrasts.fit(fit, my.contrasts[,&quot;EtOHvsWT.MSN24ddvsWT&quot;]) # This contrast looks at the difference in the stress responses between mutant and WT res &lt;- eBayes(res) # Note that there is no longer an &quot;F&quot; column, because we only look at one contrast. top.table &lt;- topTable(res, sort.by = &quot;P&quot;, n = Inf) head(top.table, 20) ## ORF SGD GENENAME logFC AveExpr t P.Value adj.P.Val B ## YMR105C YMR105C S000004711 PGM2 -6.83 6.08 -39.1 2.72e-22 1.53e-18 40.3 ## YKL035W YKL035W S000001518 UGP1 -3.83 9.33 -33.5 8.75e-21 2.46e-17 37.6 ## YML100W YML100W S000004566 TSL1 -7.14 5.91 -32.2 2.12e-20 3.96e-17 36.3 ## YBR126C YBR126C S000000330 TPS1 -3.45 7.99 -28.7 2.66e-19 3.52e-16 34.3 ## YPR149W YPR149W S000006353 NCE102 -4.25 7.34 -28.5 3.13e-19 3.52e-16 34.1 ## YMR196W YMR196W S000004809 &lt;NA&gt; -5.16 5.42 -26.4 1.70e-18 1.59e-15 32.1 ## YDR516C YDR516C S000002924 EMI2 -4.00 6.13 -26.2 2.03e-18 1.63e-15 32.1 ## YKL150W YKL150W S000001633 MCR1 -2.93 7.61 -25.2 4.48e-18 3.14e-15 31.5 ## YPL004C YPL004C S000005925 LSP1 -2.77 8.09 -25.1 5.06e-18 3.15e-15 31.4 ## YDR001C YDR001C S000002408 NTH1 -2.89 6.09 -24.6 7.76e-18 4.36e-15 31.0 ## YFR053C YFR053C S000001949 HXK1 -7.63 4.07 -22.7 4.47e-17 2.28e-14 27.7 ## YHR104W YHR104W S000001146 GRE3 -2.42 6.99 -21.8 1.13e-16 5.28e-14 28.3 ## YER053C YER053C S000000855 PIC2 -4.95 4.63 -21.6 1.37e-16 5.68e-14 27.8 ## YHL021C YHL021C S000001013 AIM17 -4.19 4.94 -21.5 1.42e-16 5.68e-14 28.0 ## YLR258W YLR258W S000004248 GSY2 -4.85 5.01 -21.4 1.64e-16 6.13e-14 27.6 ## YDR074W YDR074W S000002481 TPS2 -2.33 7.40 -19.6 1.11e-15 3.90e-13 26.0 ## YDR258C YDR258C S000002666 HSP78 -4.47 4.96 -19.4 1.28e-15 4.24e-13 25.9 ## YDR342C YDR342C S000002750 HXT7 -5.92 5.97 -18.7 2.95e-15 9.21e-13 25.1 ## YGR008C YGR008C S000003240 STF2 -5.20 3.59 -17.7 9.30e-15 2.75e-12 23.2 ## YGR088W YGR088W S000003320 CTT1 -6.16 3.75 -17.6 1.05e-14 2.95e-12 23.5 top.table %&gt;% tibble() %&gt;% arrange(adj.P.Val) %&gt;% mutate(across(where(is.numeric), signif, 3)) %&gt;% reactable() is.de &lt;- decideTests(res, p.value=0.05) summary(is.de) ## [,1] ## Down 756 ## NotSig 4065 ## Up 794 9.11 Visualization We can visualize limma results using some built-in limma functions. 9.11.1 MA lot # visualize results limma::plotMA(res, status=is.de) We need to make sure and save our output file(s). # Choose topTags destination dir_output_limma &lt;- path.expand(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/limma/&quot;) if (!dir.exists(dir_output_limma)) { dir.create(dir_output_limma, recursive = TRUE) } # for shairng with others, the topTags output is convenient. top.table %&gt;% tibble() %&gt;% arrange(desc(adj.P.Val)) %&gt;% mutate(adj.P.Val = round(adj.P.Val, 2)) %&gt;% mutate(across(where(is.numeric), signif, 3)) %&gt;% write_tsv(., file = paste0(dir_output_limma, &quot;yeast_topTags_limma.tsv&quot;)) # for subsequent analysis, let&#39;s save the res object as an R data object. saveRDS(object = res, file = paste0(dir_output_limma, &quot;yeast_res_limma.Rds&quot;)) # we might also want our y object list saveRDS(object = y, file = paste0(dir_output_limma, &quot;yeast_y_limma.Rds&quot;)) 9.12 treat() testing We can use the limma command treat() to test against a fold-change cutoff. res (or fit) can be either before or after eBayes has been run. Note that we need to use lfc1_res &lt;- treat(res, lfc=1, robust = TRUE) # treat is a limma command that can be run on fit lfc1_top.table &lt;- topTreat(lfc1_res, n=Inf, p.value=0.05) # print the genes with DE significantly beyond the cutoff lfc1_top.table ## ORF SGD GENENAME logFC AveExpr t P.Value adj.P.Val ## YMR105C YMR105C S000004711 PGM2 -6.83 6.078 -33.74 2.77e-23 1.55e-19 ## YKL035W YKL035W S000001518 UGP1 -3.83 9.326 -24.66 7.44e-20 2.09e-16 ## YML100W YML100W S000004566 TSL1 -7.14 5.910 -27.70 1.92e-19 3.59e-16 ## YMR196W YMR196W S000004809 &lt;NA&gt; -5.16 5.424 -21.35 2.66e-18 3.73e-15 ## YBR126C YBR126C S000000330 TPS1 -3.45 7.986 -20.39 8.23e-18 8.56e-15 ## YPR149W YPR149W S000006353 NCE102 -4.25 7.342 -22.00 9.14e-18 8.56e-15 ## YFR053C YFR053C S000001949 HXK1 -7.63 4.070 -19.81 1.66e-17 1.33e-14 ## YDR516C YDR516C S000002924 EMI2 -4.00 6.129 -19.37 2.87e-17 2.02e-14 ## YER053C YER053C S000000855 PIC2 -4.95 4.629 -17.28 4.60e-16 2.87e-13 ## YLR258W YLR258W S000004248 GSY2 -4.85 5.009 -17.00 6.78e-16 3.81e-13 ## YKL150W YKL150W S000001633 MCR1 -2.93 7.612 -16.69 1.05e-15 5.38e-13 ## YHL021C YHL021C S000001013 AIM17 -4.19 4.944 -16.57 1.24e-15 5.80e-13 ## YPL004C YPL004C S000005925 LSP1 -2.77 8.090 -16.01 2.82e-15 1.22e-12 ## YDR001C YDR001C S000002408 NTH1 -2.89 6.090 -15.85 3.59e-15 1.44e-12 ## YGR008C YGR008C S000003240 STF2 -5.20 3.589 -14.07 5.82e-14 2.18e-11 ## YGR088W YGR088W S000003320 CTT1 -6.16 3.749 -14.84 9.98e-14 3.50e-11 ## YDR258C YDR258C S000002666 HSP78 -4.47 4.959 -15.08 1.25e-13 4.13e-11 ## YHR104W YHR104W S000001146 GRE3 -2.42 6.988 -12.54 7.96e-13 2.48e-10 ## YMR250W YMR250W S000004862 GAD1 -4.58 4.042 -12.43 9.74e-13 2.88e-10 ## YLR177W YLR177W S000004167 &lt;NA&gt; -3.55 4.568 -11.79 8.56e-12 2.40e-09 ## YHR087W YHR087W S000001129 RTC3 -7.76 2.377 -11.68 1.03e-11 2.66e-09 ## YDR074W YDR074W S000002481 TPS2 -2.33 7.398 -11.16 1.04e-11 2.66e-09 ## YBR085C-A YBR085C-A S000007522 &lt;NA&gt; -2.84 4.630 -10.87 1.82e-11 4.45e-09 ## YBR072W YBR072W S000000276 HSP26 -4.95 3.882 -10.69 2.60e-11 6.08e-09 ## YFR015C YFR015C S000001911 GSY1 -5.96 3.481 -11.00 3.50e-11 7.86e-09 ## YER067W YER067W S000000869 RGI1 -6.44 4.118 -11.22 4.78e-11 1.03e-08 ## YGR248W YGR248W S000003480 SOL4 -6.89 1.382 -10.00 1.07e-10 2.22e-08 ## YDR033W YDR033W S000002440 MRH1 -2.61 7.040 -10.66 1.14e-10 2.29e-08 ## YBL064C YBL064C S000000160 PRX1 -2.32 5.593 -9.75 1.79e-10 3.47e-08 ## YPR160W YPR160W S000006364 GPH1 -7.00 2.863 -10.55 2.20e-10 4.12e-08 ## YOR315W YOR315W S000005842 SFG1 4.11 3.940 9.63 2.32e-10 4.21e-08 ## YMR090W YMR090W S000004696 &lt;NA&gt; -3.30 4.314 -9.61 2.44e-10 4.28e-08 ## YMR031C YMR031C S000004633 EIS1 -2.70 5.442 -9.74 6.30e-10 1.07e-07 ## YFR052C-A YFR052C-A S000028768 &lt;NA&gt; -6.85 1.058 -8.95 1.02e-09 1.68e-07 ## YEL011W YEL011W S000000737 GLC3 -4.44 4.163 -10.05 1.17e-09 1.87e-07 ## YML054C YML054C S000004518 CYB2 -2.80 4.320 -8.70 1.80e-09 2.81e-07 ## YBR183W YBR183W S000000387 YPC1 -4.21 2.566 -8.54 2.54e-09 3.85e-07 ## YGL037C YGL037C S000003005 PNC1 -2.25 6.605 -8.41 3.41e-09 5.04e-07 ## YNL007C YNL007C S000004952 SIS1 -2.29 7.054 -8.82 3.83e-09 5.51e-07 ## YEL039C YEL039C S000000765 CYC7 -5.25 1.956 -8.27 4.75e-09 6.67e-07 ## YDL124W YDL124W S000002282 &lt;NA&gt; -2.87 4.947 -8.12 6.69e-09 9.16e-07 ## YDR342C YDR342C S000002750 HXT7 -5.92 5.968 -12.31 8.67e-09 1.16e-06 ## YMR173W YMR173W S000004784 DDR48 -3.18 3.420 -7.99 9.06e-09 1.16e-06 ## YFL014W YFL014W S000001880 HSP12 -7.83 2.930 -9.85 9.08e-09 1.16e-06 ## YPL240C YPL240C S000006161 HSP82 -2.36 7.691 -8.39 1.22e-08 1.52e-06 ## YOL052C-A YOL052C-A S000005413 DDR2 -8.22 -2.456 -7.76 1.57e-08 1.91e-06 ## YFR017C YFR017C S000001913 IGD1 -5.56 1.621 -7.75 2.04e-08 2.44e-06 ## YML128C YML128C S000004597 MSC1 -2.39 4.202 -7.55 2.57e-08 3.01e-06 ## YLL026W YLL026W S000003949 HSP104 -2.04 7.838 -7.54 2.63e-08 3.02e-06 ## YLR178C YLR178C S000004168 TFS1 -2.83 4.206 -7.53 3.22e-08 3.62e-06 ## YLR152C YLR152C S000004142 &lt;NA&gt; -2.42 3.464 -7.40 3.69e-08 4.06e-06 ## YMR261C YMR261C S000004874 TPS3 -1.74 7.291 -7.13 7.15e-08 7.72e-06 ## YGR070W YGR070W S000003302 ROM1 -2.34 3.863 -7.10 7.65e-08 7.98e-06 ## YMR169C YMR169C S000004779 ALD3 -4.03 3.446 -7.79 7.68e-08 7.98e-06 ## YLL039C YLL039C S000003962 UBI4 -1.91 7.235 -6.99 1.01e-07 1.03e-05 ## YCR091W YCR091W S000000687 KIN82 -2.46 3.418 -6.98 1.03e-07 1.03e-05 ## YOR161C YOR161C S000005687 PNS1 -3.81 4.249 -8.20 1.07e-07 1.06e-05 ## YKL151C YKL151C S000001634 NNR2 -2.25 5.572 -6.95 1.13e-07 1.09e-05 ## YBL075C YBL075C S000000171 SSA3 -1.86 5.368 -6.75 1.84e-07 1.75e-05 ## YJL042W YJL042W S000003578 MHP1 -1.76 6.012 -6.55 3.00e-07 2.81e-05 ## YNL160W YNL160W S000005104 YGP1 -2.69 4.669 -6.71 3.36e-07 3.09e-05 ## YNR034W-A YNR034W-A S000007525 EGO4 -7.49 0.853 -6.55 5.60e-07 5.08e-05 ## YDL204W YDL204W S000002363 RTN2 -3.44 2.791 -6.31 6.20e-07 5.53e-05 ## YBL015W YBL015W S000000111 ACH1 -2.05 5.858 -6.34 7.13e-07 6.26e-05 ## YBR169C YBR169C S000000373 SSE2 -2.69 4.305 -6.15 8.37e-07 7.23e-05 ## YPL230W YPL230W S000006151 USV1 -4.25 1.810 -6.11 1.43e-06 1.22e-04 ## YBR230C YBR230C S000000434 OM14 -2.33 5.257 -6.31 1.51e-06 1.27e-04 ## YFL051C YFL051C S000001843 &lt;NA&gt; 2.92 4.980 6.49 1.81e-06 1.49e-04 ## YNL015W YNL015W S000004960 PBI2 -2.58 3.872 -5.80 2.17e-06 1.77e-04 ## YOR298C-A YOR298C-A S000007253 MBF1 -1.61 7.482 -5.58 3.65e-06 2.92e-04 ## YNL274C YNL274C S000005218 GOR1 -2.52 3.327 -5.56 3.84e-06 3.04e-04 ## YBR214W YBR214W S000000418 SDS24 -2.27 5.543 -5.56 3.93e-06 3.07e-04 ## YDR277C YDR277C S000002685 MTH1 -2.63 2.580 -5.43 5.36e-06 4.13e-04 ## YGR281W YGR281W S000003513 YOR1 -1.53 7.181 -5.39 6.05e-06 4.56e-04 ## YOR173W YOR173W S000005699 DCS2 -2.95 2.521 -5.39 6.09e-06 4.56e-04 ## YER073W YER073W S000000875 ALD5 1.91 6.175 5.54 6.59e-06 4.87e-04 ## YBR149W YBR149W S000000353 ARA1 -1.62 7.634 -5.32 7.18e-06 5.24e-04 ## YLL023C YLL023C S000003946 POM33 -1.96 6.435 -5.60 8.36e-06 6.02e-04 ## YOR347C YOR347C S000005874 PYK2 -3.42 2.578 -5.24 9.04e-06 6.43e-04 ## YLR327C YLR327C S000004319 TMA10 -5.90 0.689 -5.23 1.37e-05 9.55e-04 ## YOR052C YOR052C S000005578 TMC1 -1.94 3.794 -5.08 1.38e-05 9.55e-04 ## YGR019W YGR019W S000003251 UGA1 -1.81 4.934 -5.02 1.61e-05 1.10e-03 ## YDL039C YDL039C S000002197 PRM7 2.08 5.358 5.25 1.74e-05 1.18e-03 ## YDL181W YDL181W S000002340 INH1 -1.62 5.447 -4.86 2.42e-05 1.62e-03 ## YKL037W YKL037W S000001520 AIM26 -5.72 -1.921 -4.83 2.68e-05 1.77e-03 ## YDR216W YDR216W S000002624 ADR1 -2.13 3.634 -4.81 2.76e-05 1.80e-03 ## YGR086C YGR086C S000003318 PIL1 -1.51 8.762 -4.78 2.98e-05 1.92e-03 ## YER066C-A YER066C-A S000002959 &lt;NA&gt; -5.36 -2.787 -4.77 3.07e-05 1.96e-03 ## YDR275W YDR275W S000002683 BSC2 -2.22 2.441 -4.74 3.32e-05 2.10e-03 ## YHR092C YHR092C S000001134 HXT4 -3.09 3.492 -5.14 3.54e-05 2.21e-03 ## YDR533C YDR533C S000002941 HSP31 -2.04 3.459 -4.71 3.64e-05 2.25e-03 ## YMR145C YMR145C S000004753 NDE1 -1.57 8.147 -4.68 3.89e-05 2.37e-03 ## YNL194C YNL194C S000005138 &lt;NA&gt; -5.30 -0.328 -4.69 4.03e-05 2.43e-03 ## YIL056W YIL056W S000001318 VHR1 -1.63 5.441 -4.67 4.07e-05 2.43e-03 ## YPL014W YPL014W S000005935 CIP1 -2.05 4.793 -4.77 5.47e-05 3.23e-03 ## YAL065C YAL065C S000001817 &lt;NA&gt; 5.04 -1.857 4.53 5.80e-05 3.39e-03 ## YKL201C YKL201C S000001684 MNN4 -2.18 5.141 -4.91 6.06e-05 3.51e-03 ## YJL141C YJL141C S000003677 YAK1 -1.72 5.050 -4.50 6.27e-05 3.59e-03 ## YPL061W YPL061W S000005982 ALD6 3.82 7.959 5.49 6.35e-05 3.60e-03 ## YAL060W YAL060W S000000056 BDH1 -1.94 6.745 -4.87 6.51e-05 3.65e-03 ## YBR117C YBR117C S000000321 TKL2 -3.36 1.632 -4.57 6.90e-05 3.84e-03 ## YDR185C YDR185C S000002593 UPS3 -2.26 2.111 -4.41 7.95e-05 4.37e-03 ## YNR014W YNR014W S000005297 &lt;NA&gt; -5.52 1.682 -4.93 8.81e-05 4.80e-03 ## YER054C YER054C S000000856 GIP2 -3.49 0.585 -4.36 9.10e-05 4.92e-03 ## YDR513W YDR513W S000002921 GRX2 -1.49 6.726 -4.25 1.20e-04 6.43e-03 ## YER067C-A YER067C-A S000028748 &lt;NA&gt; -5.41 -3.270 -4.21 1.38e-04 7.24e-03 ## YIL136W YIL136W S000001398 OM45 -2.39 2.294 -4.20 1.38e-04 7.24e-03 ## YPR184W YPR184W S000006388 GDB1 -1.85 5.573 -4.24 1.57e-04 8.16e-03 ## YMR251W-A YMR251W-A S000004864 HOR7 -3.13 4.424 -4.60 1.60e-04 8.22e-03 ## YOL155C YOL155C S000005515 HPF1 -1.87 9.918 -4.41 1.72e-04 8.78e-03 ## YBR139W YBR139W S000000343 &lt;NA&gt; -1.62 6.133 -4.06 1.98e-04 1.00e-02 ## YOR185C YOR185C S000005711 GSP2 -1.88 4.302 -4.00 2.33e-04 1.17e-02 ## YBR161W YBR161W S000000365 CSH1 -1.69 3.783 -3.96 2.59e-04 1.29e-02 ## YBR054W YBR054W S000000258 YRO2 -4.60 1.038 -4.14 2.61e-04 1.29e-02 ## YBL049W YBL049W S000000145 MOH1 -4.72 -2.048 -3.92 2.90e-04 1.42e-02 ## YOR345C YOR345C S000005872 &lt;NA&gt; -4.42 -2.214 -3.91 2.98e-04 1.44e-02 ## YDR345C YDR345C S000002753 HXT3 -2.43 7.998 -4.45 3.27e-04 1.56e-02 ## YCL040W YCL040W S000000545 GLK1 -1.68 8.056 -3.87 3.29e-04 1.56e-02 ## YAL005C YAL005C S000000004 SSA1 -1.94 10.680 -4.16 3.44e-04 1.62e-02 ## YJL107C YJL107C S000003643 &lt;NA&gt; -1.89 2.503 -3.83 3.60e-04 1.68e-02 ## YCR021C YCR021C S000000615 HSP30 -5.34 2.019 -4.31 3.70e-04 1.72e-02 ## YMR081C YMR081C S000004686 ISF1 -3.85 -0.437 -3.81 3.86e-04 1.78e-02 ## YKL096W YKL096W S000001579 CWP1 -2.48 5.702 -4.24 4.91e-04 2.24e-02 ## YGR143W YGR143W S000003375 SKN1 -1.52 4.422 -3.64 6.00e-04 2.71e-02 ## YDL022W YDL022W S000002180 GPD1 -1.64 8.332 -3.65 8.10e-04 3.64e-02 ## YKR049C YKR049C S000001757 FMP46 -2.16 2.104 -3.50 8.54e-04 3.78e-02 ## YNL200C YNL200C S000005144 NNR1 -2.11 2.949 -3.50 8.56e-04 3.78e-02 ## YNL195C YNL195C S000005139 &lt;NA&gt; -3.29 1.001 -3.45 9.91e-04 4.35e-02 ## YCL035C YCL035C S000000540 GRX1 -1.54 5.312 -3.43 1.00e-03 4.37e-02 ## YPL087W YPL087W S000006008 YDC1 -1.54 6.261 -3.44 1.06e-03 4.60e-02 ## YOR374W YOR374W S000005901 ALD4 -1.75 6.685 -3.58 1.09e-03 4.65e-02 ## YPR026W YPR026W S000006230 ATH1 -1.51 4.864 -3.37 1.18e-03 4.97e-02 ## YMR016C YMR016C S000004618 SOK2 1.47 5.508 3.37 1.18e-03 4.97e-02 # for subsequent analysis, let&#39;s save the output file as a tsv # and the res object as an R data object. lfc1_top.table %&gt;% tibble() %&gt;% arrange(desc(adj.P.Val)) %&gt;% mutate(adj.P.Val = round(adj.P.Val, 2)) %&gt;% mutate(across(where(is.numeric), signif, 3)) %&gt;% write_tsv(., file = paste0(dir_output_limma, &quot;yeast_lfc1_topTreat_limma.tsv&quot;)) saveRDS(object = lfc1_res, file = paste0(dir_output_limma, &quot;yeast_lfc1_res_limma.Rds&quot;)) 9.12.1 Visualize DE genes from Treat using lfc=1 is.de.lfc1 &lt;- decideTests(lfc1_res, p.value=0.05) summary(is.de.lfc1) ## [,1] ## Down 126 ## NotSig 5482 ## Up 7 # visualize results limma::plotMA(lfc1_res, status=is.de.lfc1) 9.13 Comparing DE analysis softwares We have went through some example DE workflows with edgeR, DESeq2, and limma-voom. Since we have saved our outputs for each analysis, we can compare their outcomes now. # load in all of the DE results for the difference of difference contrast path_output_edgeR &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_topTags_edgeR.tsv&quot; path_output_DESeq2 &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Analysis/DESeq2/yeast_res_DESeq2.tsv&quot; path_output_limma &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_topTags_limma.tsv&quot; topTags_edgeR &lt;- read.delim(path_output_edgeR) topTags_DESeq2 &lt;- read.delim(path_output_DESeq2) topTags_limma &lt;- read.delim(path_output_limma) sig_cutoff &lt;- 0.01 FC_cutoff &lt;- 1 # NOTE: we need to be very careful applying an FC cutoff like this ## edgeR # get genes that are upregualted up_edgeR_DEG &lt;- topTags_edgeR %&gt;% dplyr::filter(FDR &lt; sig_cutoff &amp; logFC &gt; FC_cutoff) %&gt;% pull(ORF) down_edgeR_DEG &lt;- topTags_edgeR %&gt;% dplyr::filter(FDR &lt; sig_cutoff &amp; logFC &lt; -FC_cutoff) %&gt;% pull(ORF) ## DESeq2 up_DESeq2_DEG &lt;- topTags_DESeq2 %&gt;% dplyr::filter(padj &lt; sig_cutoff &amp; log2FoldChange &gt; FC_cutoff) %&gt;% pull(ORF) down_DESeq2_DEG &lt;- topTags_DESeq2 %&gt;% dplyr::filter(padj &lt; sig_cutoff &amp; log2FoldChange &lt; -FC_cutoff) %&gt;% pull(ORF) ## limma up_limma_DEG &lt;- topTags_limma %&gt;% dplyr::filter(adj.P.Val &lt; sig_cutoff &amp; logFC &gt; FC_cutoff) %&gt;% pull(ORF) down_limma_DEG &lt;- topTags_limma %&gt;% dplyr::filter(adj.P.Val &lt; sig_cutoff &amp; logFC &lt; -FC_cutoff) %&gt;% pull(ORF) up_DEG_results_list &lt;- list(up_edgeR_DEG, up_DESeq2_DEG, up_limma_DEG) # visualize the GO results list as a venn diagram ggVennDiagram(up_DEG_results_list, category.names = c(&quot;edgeR&quot;, &quot;DESeq2&quot;, &quot;limma&quot;)) + scale_x_continuous(expand = expansion(mult = .2)) + scale_fill_distiller(palette = &quot;RdBu&quot; ) + ggtitle(&quot;Upregulated genes in contrast: \\n(EtOH.MSN2/4dd - MOCK.MSN2/4dd) - (EtOH.WT - MOCK.WT)&quot;) # Now let&#39;s do the same for downregulated genes: down_DEG_results_list &lt;- list(down_edgeR_DEG, down_DESeq2_DEG, down_limma_DEG) ggVennDiagram(down_DEG_results_list, category.names = c(&quot;edgeR&quot;, &quot;DESeq2&quot;, &quot;limma&quot;)) + scale_x_continuous(expand = expansion(mult = .2)) + scale_fill_distiller(palette = &quot;RdBu&quot; ) + ggtitle(&quot;Downregulated genes in contrast: \\n(EtOH.MSN2/4dd - MOCK.MSN2/4dd) - (EtOH.WT - MOCK.WT)&quot;) 9.14 Correlation between logFC estimates across softwares # Custom labels for facet headers custom_labels &lt;- c(&quot;purple&quot; = &quot;Sig in Both&quot;, &quot;red&quot; = &quot;Only in edgeR&quot;, &quot;blue&quot; = &quot;Only in DESeq2&quot;, &quot;black&quot; = &quot;Not Sig&quot;, &quot;grey&quot; = &quot;NA encountered&quot;) # compare edgeR &amp; DESeq2 full_join(topTags_edgeR, topTags_DESeq2, by = join_by(ORF, SGD, GENENAME)) %&gt;% mutate(edgeR_sig = ifelse(FDR &lt; sig_cutoff, &quot;red&quot;, &quot;black&quot;)) %&gt;% mutate(DESeq2_sig = ifelse(padj &lt; sig_cutoff, &quot;blue&quot;, &quot;black&quot;)) %&gt;% mutate(sig = factor(case_when( edgeR_sig == &quot;red&quot; &amp; DESeq2_sig == &quot;blue&quot; ~ &quot;purple&quot;, edgeR_sig == &quot;red&quot; &amp; DESeq2_sig != &quot;blue&quot; ~ &quot;red&quot;, edgeR_sig != &quot;red&quot; &amp; DESeq2_sig == &quot;blue&quot; ~ &quot;blue&quot;, edgeR_sig != &quot;red&quot; &amp; DESeq2_sig != &quot;blue&quot; ~ &quot;black&quot;, TRUE ~ &quot;grey&quot; # if none of these are met ), levels = c(&quot;purple&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;grey&quot;), labels = c(&quot;Sig in Both&quot;, &quot;Only in edgeR&quot;, &quot;Only in DESeq2&quot;, &quot;Not Sig&quot;, &quot;NA encountered&quot;))) %&gt;% ggplot(aes(x=logFC, y=log2FoldChange, color = sig, size=logCPM)) + geom_abline(slope = 1,) + geom_point(alpha=0.5) + scale_color_manual(values=c(&quot;purple&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;grey&quot;)) + # use colors given theme_bw() + facet_wrap(~sig, labeller = labeller(new_column = custom_labels)) + ggtitle(&quot;Comparing genewise logFC estimates between edgeR and DESeq2&quot;) ## Warning: Removed 11 rows containing missing values (`geom_point()`). # compare edgeR &amp; limma full_join(topTags_edgeR, topTags_limma, by = join_by(ORF, SGD, GENENAME)) %&gt;% mutate(edgeR_sig = ifelse(FDR &lt; sig_cutoff, &quot;red&quot;, &quot;black&quot;)) %&gt;% mutate(limma_sig = ifelse(adj.P.Val &lt; sig_cutoff, &quot;green&quot;, &quot;black&quot;)) %&gt;% mutate(sig = factor(case_when( edgeR_sig == &quot;red&quot; &amp; limma_sig == &quot;green&quot; ~ &quot;brown&quot;, edgeR_sig == &quot;red&quot; &amp; limma_sig != &quot;green&quot; ~ &quot;red&quot;, edgeR_sig != &quot;red&quot; &amp; limma_sig == &quot;green&quot; ~ &quot;green&quot;, edgeR_sig != &quot;red&quot; &amp; limma_sig != &quot;green&quot; ~ &quot;black&quot;, TRUE ~ &quot;grey&quot; # if none of these are met ), levels = c(&quot;brown&quot;, &quot;red&quot;, &quot;green&quot;, &quot;black&quot;, &quot;grey&quot;), labels = c(&quot;Sig in Both&quot;, &quot;Only in edgeR&quot;, &quot;Only in limma&quot;, &quot;Not Sig&quot;, &quot;NA encountered&quot;))) %&gt;% ggplot(aes(x=logFC.x, y=logFC.y, color = sig, size=logCPM)) + geom_abline(slope = 1,) + geom_point(alpha=0.5) + scale_color_manual(values=c(&quot;brown&quot;, &quot;red&quot;, &quot;green&quot;, &quot;black&quot;, &quot;grey&quot;)) + # use colors given theme_bw() + facet_wrap(~sig, labeller = labeller(new_column = custom_labels)) + ggtitle(&quot;Comparing genewise logFC estimates between edgeR and limma&quot;) + labs(x=&quot;logFC estimate: edgeR&quot;, y=&quot;logFC estimate: limma&quot;) # compare DESeq2 &amp; limma full_join(topTags_DESeq2, topTags_limma, by = join_by(ORF, SGD, GENENAME)) %&gt;% mutate(DESeq2_sig = ifelse(padj &lt; sig_cutoff, &quot;blue&quot;, &quot;black&quot;)) %&gt;% mutate(limma_sig = ifelse(adj.P.Val &lt; sig_cutoff, &quot;green&quot;, &quot;black&quot;)) %&gt;% mutate(sig = factor(case_when( DESeq2_sig == &quot;blue&quot; &amp; limma_sig == &quot;green&quot; ~ &quot;aquamarine3&quot;, DESeq2_sig == &quot;blue&quot; &amp; limma_sig != &quot;green&quot; ~ &quot;blue&quot;, DESeq2_sig != &quot;blue&quot; &amp; limma_sig == &quot;green&quot; ~ &quot;green&quot;, DESeq2_sig != &quot;blue&quot; &amp; limma_sig != &quot;green&quot; ~ &quot;black&quot;, TRUE ~ &quot;grey&quot; # if none of these are met ), levels = c(&quot;aquamarine3&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;grey&quot;), labels = c(&quot;Sig in Both&quot;, &quot;Only in DESeq2&quot;, &quot;Only in limma&quot;, &quot;Not Sig&quot;, &quot;NA encountered&quot;))) %&gt;% ggplot(aes(x=log2FoldChange, y=logFC, color = sig, size=AveExpr)) + geom_abline(slope = 1,) + geom_point(alpha=0.5) + scale_color_manual(values=c(&quot;aquamarine3&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;grey&quot;)) + # use colors given theme_bw() + facet_wrap(~sig, labeller = labeller(new_column = custom_labels, drop=FALSE)) + ggtitle(&quot;Comparing genewise logFC estimates between DESeq2 and limma&quot;) + labs(x=&quot;logFC estimate: DESeq2&quot;, y=&quot;logFC estimate: limma&quot;) ## Warning: Removed 11 rows containing missing values (`geom_point()`). 9.15 Questions Question 1: How many genes were upregulated and downregulated in the contrast we looked at in today’s activity? Be sure to clarify the cutoffs used for determining significance. Question 2: What are the pros and cons of applying a logFC cutoff to a differential expression analysis? Be sure to knit this file into a pdf or html file once you’re finished. System information for reproducibility: pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: Glimma(v.2.10.0), DESeq2(v.1.40.2), edgeR(v.3.42.4), limma(v.3.56.2), reactable(v.0.4.4), webshot2(v.0.1.1), statmod(v.1.5.0), Rsubread(v.2.14.2), ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): splines(v.4.3.1), later(v.1.3.1), bitops(v.1.0-7), ggplotify(v.0.1.2), polyclip(v.1.10-6), lifecycle(v.1.0.3), sf(v.1.0-14), rprojroot(v.2.0.3), vroom(v.1.6.4), processx(v.3.8.2), lattice(v.0.21-9), MASS(v.7.3-60), crosstalk(v.1.2.0), magrittr(v.2.0.3), sass(v.0.4.7), rmarkdown(v.2.25), jquerylib(v.0.1.4), yaml(v.2.3.7), cowplot(v.1.1.1), chromote(v.0.1.2), DBI(v.1.1.3), RColorBrewer(v.1.1-3), abind(v.1.4-5), zlibbioc(v.1.46.0), ggraph(v.2.1.0), RCurl(v.1.98-1.12), yulab.utils(v.0.1.0), tweenr(v.2.0.2), GenomeInfoDbData(v.1.2.10), enrichplot(v.1.20.0), ggrepel(v.0.9.4), units(v.0.8-4), codetools(v.0.2-19), DelayedArray(v.0.26.7), DOSE(v.3.26.1), ggforce(v.0.4.1), tidyselect(v.1.2.0), aplot(v.0.2.2), farver(v.2.1.1), viridis(v.0.6.4), jsonlite(v.1.8.7), e1071(v.1.7-13), ellipsis(v.0.3.2), tidygraph(v.1.2.3), tools(v.4.3.1), treeio(v.1.24.3), Rcpp(v.1.0.11), glue(v.1.6.2), gridExtra(v.2.3), xfun(v.0.40), qvalue(v.2.32.0), websocket(v.1.4.1), withr(v.2.5.1), fastmap(v.1.1.1), latticeExtra(v.0.6-30), fansi(v.1.0.5), digest(v.0.6.33), timechange(v.0.2.0), R6(v.2.5.1), gridGraphics(v.0.5-1), colorspace(v.2.1-0), GO.db(v.3.17.0), jpeg(v.0.1-10), RSQLite(v.2.3.1), utf8(v.1.2.3), generics(v.0.1.3), data.table(v.1.14.8), class(v.7.3-22), graphlayouts(v.1.0.1), httr(v.1.4.7), htmlwidgets(v.1.6.2), S4Arrays(v.1.0.6), scatterpie(v.0.2.1), pkgconfig(v.2.0.3), gtable(v.0.3.4), blob(v.1.2.4), hwriter(v.1.3.2.1), shadowtext(v.0.1.2), htmltools(v.0.5.6.1), bookdown(v.0.36), fgsea(v.1.26.0), scales(v.1.2.1), png(v.0.1-8), snakecase(v.0.11.1), ggfun(v.0.1.3), rstudioapi(v.0.15.0), tzdb(v.0.4.0), reshape2(v.1.4.4), rjson(v.0.2.21), nlme(v.3.1-163), proxy(v.0.4-27), cachem(v.1.0.8), KernSmooth(v.2.23-22), RVenn(v.1.1.0), parallel(v.4.3.1), HDO.db(v.0.99.1), pillar(v.1.9.0), grid(v.4.3.1), vctrs(v.0.6.4), promises(v.1.2.1), archive(v.1.1.5), evaluate(v.0.22), cli(v.3.6.1), locfit(v.1.5-9.8), compiler(v.4.3.1), rlang(v.1.1.1), crayon(v.1.5.2), labeling(v.0.4.3), classInt(v.0.4-10), reactR(v.0.5.0), interp(v.1.1-4), ps(v.1.7.5), plyr(v.1.8.9), fs(v.1.6.3), stringi(v.1.7.12), viridisLite(v.0.4.2), deldir(v.1.0-9), munsell(v.0.5.0), lazyeval(v.0.2.2), GOSemSim(v.2.26.1), Matrix(v.1.6-1.1), hms(v.1.1.3), patchwork(v.1.1.3), bit64(v.4.0.5), KEGGREST(v.1.40.1), memoise(v.2.0.1), bslib(v.0.5.1), ggtree(v.3.8.2), fastmatch(v.1.1-4), bit(v.4.0.5), downloader(v.0.4), ape(v.5.7-1) and gson(v.0.1.0) "],["visualizing-differential-expression-results.html", "Chapter 10 Visualizing Differential Expression Results 10.1 Description 10.2 Learning Outcomes 10.3 MA-plot 10.4 Volcano Plot 10.5 Using Glimma for an interactive visualization 10.6 Generating bar graph summaries 10.7 Exercise", " Chapter 10 Visualizing Differential Expression Results last updated: 2023-10-26 Install Packages As usual, make sure we have the right packages for this exercise if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;tidyverse&quot;, &quot;knitr&quot;, &quot;readr&quot;, &quot;pander&quot;, &quot;BiocManager&quot;, &quot;dplyr&quot;, &quot;stringr&quot;, &quot;purrr&quot;, # for working with lists (beautify column names) &quot;scales&quot;, &quot;viridis&quot;, # for ggplot &quot;reactable&quot;) # for pretty tables. # We also need these packages today. p_load(&quot;DESeq2&quot;, &quot;edgeR&quot;, &quot;AnnotationDbi&quot;, &quot;org.Sc.sgd.db&quot;, &quot;ggrepel&quot;, &quot;Glimma&quot;, &quot;ggVennDiagram&quot;, &quot;ggplot2&quot;) 10.1 Description This exercises shows more ways differential expression analysis data can be visualized. 10.2 Learning Outcomes At the end of this exercise, you should be able to: Visualize Differential Expression Results Interpret MA and volcano plots library(org.Sc.sgd.db) # load in all of the DE results for the difference of difference contrast path_output_edgeR &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_topTags_edgeR.tsv&quot; path_output_DESeq2 &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Analysis/DESeq2/yeast_res_DESeq2.tsv&quot; path_output_limma &lt;- &quot;~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_topTags_limma.tsv&quot; # if you don&#39;t have these files, we generated them in previous lessons. # you can remove the &quot;#&quot; from the chunks below to grab them from the interwebs. # path_output_edgeR &lt;- &quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_topTags_edgeR.tsv&quot; # path_output_DESeq2 &lt;- &quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_res_DESeq2.tsv&quot; # path_output_limma &lt;- &quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_topTags_limma.tsv&quot; topTags_edgeR &lt;- read.delim(path_output_edgeR) topTags_DESeq2 &lt;- read.delim(path_output_DESeq2) topTags_limma &lt;- read.delim(path_output_limma) sig_cutoff &lt;- 0.05 FC_cutoff &lt;- 1 ## edgeR # get genes that are upregualted up_edgeR_DEG &lt;- topTags_edgeR %&gt;% dplyr::filter(FDR &lt; sig_cutoff &amp; logFC &gt; FC_cutoff) %&gt;% pull(ORF) down_edgeR_DEG &lt;- topTags_edgeR %&gt;% dplyr::filter(FDR &lt; sig_cutoff &amp; logFC &lt; -FC_cutoff) %&gt;% pull(ORF) ## DESeq2 up_DESeq2_DEG &lt;- topTags_DESeq2 %&gt;% dplyr::filter(padj &lt; sig_cutoff &amp; log2FoldChange &gt; FC_cutoff) %&gt;% pull(ORF) down_DESeq2_DEG &lt;- topTags_DESeq2 %&gt;% dplyr::filter(padj &lt; sig_cutoff &amp; log2FoldChange &lt; -FC_cutoff) %&gt;% pull(ORF) ## limma up_limma_DEG &lt;- topTags_limma %&gt;% dplyr::filter(adj.P.Val &lt; sig_cutoff &amp; logFC &gt; FC_cutoff) %&gt;% pull(ORF) down_limma_DEG &lt;- topTags_limma %&gt;% dplyr::filter(adj.P.Val &lt; sig_cutoff &amp; logFC &lt; -FC_cutoff) %&gt;% pull(ORF) up_DEG_results_list &lt;- list(up_edgeR_DEG, up_DESeq2_DEG, up_limma_DEG) 10.3 MA-plot MA plots display a log ratio (M) vs an average (A) in order to visualize the differences between two groups. In general we would expect the expression of genes to remain consistent between conditions and so the MA plot should be similar to the shape of a trumpet with most points residing on a y intercept of 0. DESeq2 has a built in function for creating the MA plot that we have used before (plotMA()), but we can also make our own: # assign pvalue and logFC cutoffs for coloring DE genes sig_cutoff &lt;- 0.01 FC_label_cutoff &lt;- 3 #plot MA for edgeR using ggplot2 topTags_edgeR %&gt;% mutate(`Significant FDR` = case_when( FDR &lt; sig_cutoff ~ &quot;Yes&quot;, .default = &quot;No&quot;), delabel = case_when(FDR &lt; sig_cutoff &amp; abs(logFC) &gt; FC_label_cutoff ~ ORF, .default = NA)) %&gt;% ggplot(aes(x=logCPM, y=logFC, color = `Significant FDR`, label = delabel)) + geom_point(size=1) + scale_y_continuous(limits=c(-5, 5), oob=squish) + geom_hline(yintercept = 0, colour=&quot;darkgrey&quot;, linewidth=1, linetype=&quot;longdash&quot;) + labs(x=&quot;mean of normalized counts&quot;, y=&quot;log fold change&quot;) + # ggrepel::geom_text_repel(size = 1.5) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + theme_bw() + ggtitle(&quot;edgeR MA plot&quot;) #plot MA for DESeq2 using ggplot2 topTags_DESeq2 %&gt;% mutate( `Significant FDR` = case_when(padj &lt; sig_cutoff ~ &quot;Yes&quot;, .default = &quot;No&quot;), delabel = case_when( padj &lt; sig_cutoff &amp; abs(log2FoldChange) &gt; FC_label_cutoff ~ ORF, .default = NA) ) %&gt;% ggplot(aes(log(baseMean), log2FoldChange, color = `Significant FDR`, label = delabel)) + geom_point(size=1) + scale_y_continuous(limits=c(-5, 5), oob=squish) + geom_hline(yintercept = 0, colour=&quot;darkgrey&quot;, linewidth=1, linetype=&quot;longdash&quot;) + labs(x=&quot;mean of normalized counts&quot;, y=&quot;log fold change&quot;) + # ggrepel::geom_text_repel(size = 1.5) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + theme_bw() + ggtitle(&quot;DESeq2 MA plot&quot;) #plot MA for limma using ggplot2 topTags_limma %&gt;% mutate( `Significant FDR` = case_when(adj.P.Val &lt; sig_cutoff ~ &quot;Yes&quot;, .default = &quot;No&quot;), delabel = case_when( adj.P.Val &lt; sig_cutoff &amp; abs(logFC) &gt; FC_label_cutoff ~ ORF, .default = NA) ) %&gt;% ggplot(aes(AveExpr, logFC, color = `Significant FDR`, label = delabel)) + geom_point(size=1) + scale_y_continuous(limits=c(-5, 5), oob=squish) + geom_hline(yintercept = 0, colour=&quot;darkgrey&quot;, linewidth=1, linetype=&quot;longdash&quot;) + labs(x=&quot;mean of normalized counts&quot;, y=&quot;log fold change&quot;) + # ggrepel::geom_text_repel(size = 1.5) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + theme_bw() + ggtitle(&quot;limma MA plot&quot;) 10.4 Volcano Plot # change the dimensions of the output figure by clicking the gear icon in topright corner of the code chunk &gt; &quot;use custom figure size&quot; topTags_edgeR %&gt;% mutate(`Significant FDR` = case_when( FDR &lt; sig_cutoff ~ &quot;Yes&quot;, .default = &quot;No&quot;), delabel = case_when(FDR &lt; sig_cutoff &amp; abs(logFC) &gt; FC_label_cutoff ~ ORF, .default = NA)) %&gt;% ggplot(aes(x = logFC, -log10(FDR), color = `Significant FDR`, label = delabel)) + geom_point(size = 1) + ggrepel::geom_text_repel(size = 1.5) + labs(x = &quot;log fold change&quot;, y = &quot;-log10(adjusted p-value)&quot;) + theme_bw() + guides(color=&quot;none&quot;) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + ggtitle(&quot;edgeR Volcano plot&quot;) ## Warning: Removed 5556 rows containing missing values (`geom_text_repel()`). topTags_DESeq2 %&gt;% mutate( `Significant FDR` = case_when(padj &lt; sig_cutoff ~ &quot;Yes&quot;, .default = &quot;No&quot;), delabel = case_when( padj &lt; sig_cutoff &amp; abs(log2FoldChange) &gt; FC_label_cutoff ~ ORF, .default = NA) ) %&gt;% ggplot(aes(log2FoldChange,-log10(padj), color = `Significant FDR`, label = delabel)) + geom_point(size = 1) + ggrepel::geom_text_repel(size = 1.5) + labs(x = &quot;log fold change&quot;, y = &quot;-log10(adjusted p-value)&quot;) + theme_bw() + guides(color=&quot;none&quot;) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + ggtitle(&quot;DESeq2 Volcano plot&quot;) ## Warning: Removed 5559 rows containing missing values (`geom_text_repel()`). ## Warning: ggrepel: 13 unlabeled data points (too many overlaps). Consider ## increasing max.overlaps topTags_limma %&gt;% mutate( `Significant FDR` = case_when(adj.P.Val &lt; sig_cutoff ~ &quot;Yes&quot;, .default = &quot;No&quot;), delabel = case_when( adj.P.Val &lt; sig_cutoff &amp; abs(logFC) &gt; FC_label_cutoff ~ ORF, .default = NA) ) %&gt;% ggplot(aes(x=logFC, y=-log10(P.Value), color = `Significant FDR`, label = delabel)) + geom_point(size = 1) + ggrepel::geom_text_repel(size = 1.5) + labs(x = &quot;log fold change&quot;, y = &quot;-log10(UNADJUSTED p-value)&quot;) + theme_bw() + guides(color=&quot;none&quot;) + scale_color_manual(values = c(&quot;black&quot;, &quot;red&quot;)) + ggtitle(&quot;limma Volcano plot&quot;) ## Warning: Removed 5557 rows containing missing values (`geom_text_repel()`). 10.5 Using Glimma for an interactive visualization 10.5.1 MA plots # load in res objects for both limma and edgeR res_limma &lt;- readRDS(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_res_limma.Rds&quot;) res_edgeR &lt;- readRDS(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_res_edgeR.Rds&quot;) # code to pull it from github: # res_limma &lt;- read_rds(&quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_res_limma.Rds&quot;) # res_edgeR &lt;- read_rds(&quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_res_edgeR.Rds&quot;) # load in the DGE lists for each y_limma &lt;- readRDS(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_y_limma.Rds&quot;) y_edgeR &lt;- readRDS(&quot;~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_y_edgeR.Rds&quot;) # again, alternative code to pull from github # y_limma &lt;- read_rds(&quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_y_limma.Rds&quot;) # y_edgeR &lt;- read_rds(&quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_y_edgeR.Rds&quot;) glimmaMA(res_limma, dge = y_limma) glimmaMA(res_edgeR, dge = y_edgeR) ## Warning in buildXYData(table, status, main, display.columns, anno, counts, : ## count transform requested but not all count values are integers. 10.5.2 Volcano Plots glimmaVolcano(res_limma, dge = y_limma) glimmaVolcano(res_edgeR, dge = y_edgeR) ## Warning in buildXYData(table, status, main, display.columns, anno, counts, : ## count transform requested but not all count values are integers. 10.6 Generating bar graph summaries This visualization approach compresses relevant information, so it’s generally a discouraged approach for visualizing DE data. However, it is done, so if it is useful for your study, here is how you could do it. # let&#39;s use the res_all object from the 08_DE_limma exercise: res_all_limma &lt;- read_rds(&#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_res_allContrasts_limma.Rds&#39;) decideTests_all_edgeR &lt;- read.delim( &#39;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/analysis/yeast_decideTests_allContrasts_edgeR.tsv&#39;, sep = &quot;\\t&quot;, header = T, row.names = 1 ) %&gt;% rownames_to_column(&quot;gene&quot;) res_all_limma %&gt;% decideTests(p.value = 0.05, lfc = 0) %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;gene&quot;) %&gt;% pivot_longer(c(-gene), names_to = &quot;contrast&quot;, values_to = &quot;DE_direction&quot;) %&gt;% group_by(contrast) %&gt;% summarise( upregulated = sum(DE_direction == 1), downregulated = sum(DE_direction == -1) ) %&gt;% pivot_longer(c(-contrast), names_to = &quot;DE_direction&quot;, values_to = &quot;n_genes&quot;) %&gt;% ggplot(aes(x = contrast, y = n_genes, fill = DE_direction)) + geom_col(position = &quot;dodge&quot;) + theme_bw() + coord_flip() + geom_text(aes(label = n_genes), position = position_dodge(width = .9), hjust = &quot;inward&quot;) + labs(y=&quot;Number of DE genes&quot;) + ggtitle(&quot;Summary of DE genes by contrast (limma)&quot;) # how to do the same for edgeR decideTests_all_edgeR %&gt;% pivot_longer(c(-gene), names_to = &quot;contrast&quot;, values_to = &quot;DE_direction&quot;) %&gt;% group_by(contrast) %&gt;% summarise( upregulated = sum(DE_direction == 1), downregulated = sum(DE_direction == -1) ) %&gt;% pivot_longer(-contrast, names_to = &quot;DE_direction&quot;, values_to = &quot;n_genes&quot;) %&gt;% mutate(contrast = fct_reorder(contrast, 1/(1+n_genes))) %&gt;% ggplot(aes(x = contrast, y = n_genes, fill = DE_direction)) + geom_col(position = &quot;dodge&quot;) + theme_bw() + coord_flip() + scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) + geom_text(aes(label = n_genes), position = position_dodge(width = .9), hjust = &quot;inward&quot;) + labs(y=&quot;Number of DE genes&quot;) + ggtitle(&quot;Summary of DE genes by contrast (edgeR)&quot;) If we want to show the same amount of information, in a more informative way, a venn diagram is often a better alternative. Here’s an easy way to get that visualization if you use either edgeR or limma for your analysis. # same as before, we can make the plot from the decideTests output res_all_limma %&gt;% decideTests(p.value = 0.01, lfc = 0) %&gt;% vennDiagram(include=c(&quot;up&quot;, &quot;down&quot;), lwd=0.75, mar=rep(2,4), # increase margin size counts.col= c(&quot;red&quot;, &quot;blue&quot;), show.include=TRUE) decideTests_all_edgeR %&gt;% column_to_rownames(&quot;gene&quot;) %&gt;% vennDiagram(include=c(&quot;up&quot;, &quot;down&quot;), lwd=0.75, mar=rep(4,4), # increase margin size counts.col= c(&quot;red&quot;, &quot;blue&quot;), show.include=TRUE) Venn diagrams are useful for showing gene counts as well as there overlaps between contrasts. A useful gui based web-page for creating venn diagrams inclues: https://eulerr.co/. If you enjoy coding, it also exists as an R package (https://cran.r-project.org/web/packages/eulerr/index.html). 10.7 Exercise Modify the code below to find out how many genes are upregulated (p.value &lt; 0.01 and |lfc| &gt; 1) in the ethanol stress response of both WT cells and msn2/4 mutants. # here are all of the contrasts colnames(res_all_limma) ## [1] &quot;EtOHvsMOCK.WT&quot; &quot;EtOHvsMOCK.MSN24dd&quot; &quot;EtOH.MSN24ddvsWT&quot; ## [4] &quot;MOCK.MSN24ddvsWT&quot; &quot;EtOHvsWT.MSN24ddvsWT&quot; # select the correct two and replace them below res_all_limma %&gt;% decideTests(p.value = 0.05, lfc = 0) %&gt;% data.frame() %&gt;% # change the columns selected in this select command dplyr::select(c(&quot;MOCK.MSN24ddvsWT&quot;, &quot;EtOH.MSN24ddvsWT&quot;)) %&gt;% vennDiagram(include=&quot;down&quot;, lwd=0.75, mar=rep(0,4), # increase margin size # counts.col= c(&quot;red&quot;, &quot;blue&quot;), show.include=TRUE ) pander::pander(sessionInfo()) R version 4.3.1 (2023-06-16) Platform: aarch64-apple-darwin20 (64-bit) locale: en_US.UTF-8||en_US.UTF-8||en_US.UTF-8||C||en_US.UTF-8||en_US.UTF-8 attached base packages: stats4, stats, graphics, grDevices, utils, datasets, methods and base other attached packages: ggrepel(v.0.9.4), viridis(v.0.6.4), viridisLite(v.0.4.2), scales(v.1.2.1), Glimma(v.2.10.0), DESeq2(v.1.40.2), edgeR(v.3.42.4), limma(v.3.56.2), reactable(v.0.4.4), webshot2(v.0.1.1), statmod(v.1.5.0), Rsubread(v.2.14.2), ShortRead(v.1.58.0), GenomicAlignments(v.1.36.0), SummarizedExperiment(v.1.30.2), MatrixGenerics(v.1.12.3), matrixStats(v.1.0.0), Rsamtools(v.2.16.0), GenomicRanges(v.1.52.1), Biostrings(v.2.68.1), GenomeInfoDb(v.1.36.4), XVector(v.0.40.0), BiocParallel(v.1.34.2), Rfastp(v.1.10.0), org.Sc.sgd.db(v.3.17.0), AnnotationDbi(v.1.62.2), IRanges(v.2.34.1), S4Vectors(v.0.38.2), Biobase(v.2.60.0), BiocGenerics(v.0.46.0), clusterProfiler(v.4.8.2), ggVennDiagram(v.1.2.3), tidytree(v.0.4.5), igraph(v.1.5.1), janitor(v.2.2.0), BiocManager(v.1.30.22), pander(v.0.6.5), knitr(v.1.44), here(v.1.0.1), lubridate(v.1.9.3), forcats(v.1.0.0), stringr(v.1.5.0), dplyr(v.1.1.3), purrr(v.1.0.2), readr(v.2.1.4), tidyr(v.1.3.0), tibble(v.3.2.1), ggplot2(v.3.4.4), tidyverse(v.2.0.0) and pacman(v.0.5.1) loaded via a namespace (and not attached): splines(v.4.3.1), later(v.1.3.1), bitops(v.1.0-7), ggplotify(v.0.1.2), polyclip(v.1.10-6), lifecycle(v.1.0.3), rprojroot(v.2.0.3), processx(v.3.8.2), lattice(v.0.21-9), MASS(v.7.3-60), magrittr(v.2.0.3), sass(v.0.4.7), rmarkdown(v.2.25), jquerylib(v.0.1.4), yaml(v.2.3.7), cowplot(v.1.1.1), chromote(v.0.1.2), DBI(v.1.1.3), RColorBrewer(v.1.1-3), abind(v.1.4-5), zlibbioc(v.1.46.0), ggraph(v.2.1.0), RCurl(v.1.98-1.12), yulab.utils(v.0.1.0), tweenr(v.2.0.2), GenomeInfoDbData(v.1.2.10), enrichplot(v.1.20.0), codetools(v.0.2-19), DelayedArray(v.0.26.7), DOSE(v.3.26.1), ggforce(v.0.4.1), tidyselect(v.1.2.0), aplot(v.0.2.2), farver(v.2.1.1), jsonlite(v.1.8.7), tidygraph(v.1.2.3), tools(v.4.3.1), treeio(v.1.24.3), Rcpp(v.1.0.11), glue(v.1.6.2), gridExtra(v.2.3), xfun(v.0.40), qvalue(v.2.32.0), websocket(v.1.4.1), withr(v.2.5.1), fastmap(v.1.1.1), latticeExtra(v.0.6-30), fansi(v.1.0.5), digest(v.0.6.33), timechange(v.0.2.0), R6(v.2.5.1), gridGraphics(v.0.5-1), colorspace(v.2.1-0), GO.db(v.3.17.0), jpeg(v.0.1-10), RSQLite(v.2.3.1), utf8(v.1.2.3), generics(v.0.1.3), data.table(v.1.14.8), graphlayouts(v.1.0.1), httr(v.1.4.7), htmlwidgets(v.1.6.2), S4Arrays(v.1.0.6), scatterpie(v.0.2.1), pkgconfig(v.2.0.3), gtable(v.0.3.4), blob(v.1.2.4), hwriter(v.1.3.2.1), shadowtext(v.0.1.2), htmltools(v.0.5.6.1), bookdown(v.0.36), fgsea(v.1.26.0), png(v.0.1-8), snakecase(v.0.11.1), ggfun(v.0.1.3), rstudioapi(v.0.15.0), tzdb(v.0.4.0), reshape2(v.1.4.4), rjson(v.0.2.21), nlme(v.3.1-163), cachem(v.1.0.8), RVenn(v.1.1.0), parallel(v.4.3.1), HDO.db(v.0.99.1), pillar(v.1.9.0), grid(v.4.3.1), vctrs(v.0.6.4), promises(v.1.2.1), evaluate(v.0.22), cli(v.3.6.1), locfit(v.1.5-9.8), compiler(v.4.3.1), rlang(v.1.1.1), crayon(v.1.5.2), labeling(v.0.4.3), interp(v.1.1-4), ps(v.1.7.5), plyr(v.1.8.9), fs(v.1.6.3), stringi(v.1.7.12), deldir(v.1.0-9), munsell(v.0.5.0), lazyeval(v.0.2.2), GOSemSim(v.2.26.1), Matrix(v.1.6-1.1), hms(v.1.1.3), patchwork(v.1.1.3), bit64(v.4.0.5), KEGGREST(v.1.40.1), memoise(v.2.0.1), bslib(v.0.5.1), ggtree(v.3.8.2), fastmatch(v.1.1-4), bit(v.4.0.5), downloader(v.0.4), ape(v.5.7-1) and gson(v.0.1.0) "],["clustering.html", "Chapter 11 Clustering 11.1 Description 11.2 Learning outcomes 11.3 Cluster 3.0 11.4 Visualizing Clusters with Java TreeView 11.5 Performing clustering on yeast stress data 11.6 Questions", " Chapter 11 Clustering last updated: 2023-10-26 11.1 Description This activity is intended to familiarize you with hierarchical clustering using Cluster 3.0 and visualization using Java TreeView. 11.2 Learning outcomes At the end of this exercise, you should be able to: Create a preclustering (PCL) file to load into Cluster 3.0. Perform hierarchical clustering with different settings. Visualize clustered data with TreeView Generate gene lists for clusters of interest for downstream functional analysis (e.g., GO enrichment) 11.3 Cluster 3.0 There are lots of software packages that will perform clustering analysis. One of the original programs for hierarchical clustering was designed by Michael Eisen, which has been converted to an open source package with the current version of 3.0. Files generated following clustering analysis can be visualized using Java TreeView. 11.3.1 Generating a PCL file Cluster reads in tab-delimited text files with a minimum of 1 column with the gene IDs, columns of your expression values (generally logFC, but can be TPMs), and then a row with column names. I also include an extra column with gene annotations and gene weight (GWEIGHT, all set to 1 to start) and experiment weight (EWEIGHT, also set to 1 for all). More on what weights are to follow. To open a PCL file, select from the Cluster drop-down menu “File” -&gt; “Open Data.” 11.3.2 Filtering data Cluster allows filtering on: % Present &gt;= X. Genes with missing values above that cutoff are removed from the analysis. SD (Gene Vector) &gt;= X. Genes with standard deviations above that cutoff are removed from the analysis. At least X Observations with abs(Val) &gt;= Y. Genes with fewer than the selected number of observations above a cutoff are removed from the analysis. E.g., At least 1 observation with a logFC of +/- 1. MaxVal-MinVal &gt;= X. Genes whose maximum minus minimum values are less than the cutoff are removed. I generally filter on 80% or 100% present, and will often only include significantly differentially expressed genes in my PCL file (instead of applying a specific filter). 11.3.3 Hierarchical Clustering Cluster allows you to perform hierarchical clustering on genes, arrays (i.e., samples/experiments), or both. Check the “Cluster” box for one or both, and then choose your similarity metric. The most common are Pearson correlation (either centered or uncentered) and Euclidian distance. Finally, you click on the linkage type to start the clustering (centroid, single, complete, or average). By default, all experiments (arrays) are treated equally (set to 1). Sometimes you have more than one type of sample than another (e.g., 6 treatments and 3 controls). This unbalanced design means that the treatment groups will disproportionately influence the clustering. The “Calculate weights” tab reapportions how much each experiment affects the clustering, ideally up-weighting the controls and down-weighting the treatments. This is implemented through the following equation, where L is the local density score for each row (i): \\[ L(i) = \\sum_{j\\ with\\ d(i,j)&lt;k} (\\frac{k-d(i,j)}{k})^n \\] The user supplies the exponent value (n) and the cutoff (k). Common values for the cutoff are 0.7 to 1, and 0.4 to 0.8 for the exponent. The clustered data file will show the re-calculated weights, which you can use to refine your weighting choices. The outputs of Cluster will be a clustered data table (JobName.cdt), and the gene (g) and/or array (a)tree files (JobName.gtr, JobName.atr). Make sure your job name is informative (e.g., EtOH_Response_CenteredPearson_CentroidDistance). 11.3.4 K-Means Clustering Cluster also allows for k-means clustering, where you can organize genes into k clusters using the same similarity metric options as for hierarchical clustering. You can use the following code to estimate the optimal number of clusters via three methods (wss, silhouette, and gap statistic): if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;); library(pacman) # let&#39;s load all of the files we were using and want to have again today p_load(&quot;readr&quot;, &quot;factoextra&quot;, &quot;NbClust&quot;) # Import From Text (readr) to load the pcl file. Change code below to PCL_file &lt;- read_delim(PATH TO YOUR FILE) PCL_file &lt;- data.table::fread(&quot;https://github.com/clstacy/GenomicDataAnalysis_Fa23/raw/main/data/DE_yeast_TF_stress.txt.gz&quot;) |&gt; as_tibble() # removing the 3 columns and 1 row that do not contain logFC data PCL_nbclust = PCL_file[,-c(1,2,3)] PCL_nbclust = PCL_nbclust[-1,] # Elbow method fviz_nbclust(PCL_nbclust, kmeans, method = &quot;wss&quot;) + geom_vline(xintercept = 4, linetype = 2)+ labs(subtitle = &quot;Elbow method&quot;) # Silhouette method fviz_nbclust(PCL_nbclust, kmeans, method = &quot;silhouette&quot;)+ labs(subtitle = &quot;Silhouette method&quot;) # Gap statistic # nboot = 50 to keep the function speedy. # recommended value: nboot= 500 for your analysis. # Use verbose = FALSE to hide computing progression. set.seed(123) fviz_nbclust(PCL_nbclust, kmeans, nstart = 25, method = &quot;gap_stat&quot;, nboot = 50)+ labs(subtitle = &quot;Gap statistic method&quot;) ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: Quick-TRANSfer stage steps exceeded maximum (= 287750) ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations ## Warning: did not converge in 10 iterations 11.4 Visualizing Clusters with Java TreeView Treeview uses the cdt file to generate a heat map of the clustered data and the gtr/atr files to draw the tree (similar to a phylogenetic tree). Here’s an example heat map. The large panel in the middle is the heat map of all the data (global), with each row being the expression values for a single gene, and each column being a single experiment/sample. The inset shows a zoomed image for a selected portion of the tree, and those are obtained by clicking on the heat map to select a single gene, and then moving the cursor into the tree region and pressing the “up” arrow on the keyboard to move node-by-node up the tree. On top of the inset heat map are the sample names, and to the right are the gene names and annotations. The far top left shows the correlation value for that particular node the tree. 11.4.1 Changing pixel settings. The colors on the heat map are user defined by the pixel settings tab, where you can set the max logFC for the color scheme and change the colors for the positive, negative, and zero values. The default for the global tree is to not show the full scale, but you can set it to “fill” to fit the entire screen. 11.4.2 Selecting groups of genes. When picking out clusters of genes, we often want to know their functional enrichments. We can select groups of genes by clicking on the “Export” tab and then “Save List.” The resulting list can then be either copy and pasted into Excel or saved directly as a text file. The lists can then be used as inputs for clusterProfiler or online enrichment analysis tools (such as the Princeton Go Finder). 11.5 Performing clustering on yeast stress data Now it’s your turn to play around with data. Download the Gasch_2000_stress.pcl file from OneDrive (Data Files -&gt; Msn24_EtOH -&gt; Clustering) and visualize clustering outputs using different methods: Compare with and without filtering on 80% present, and compare with and without filtering on having a certain number of values above an logFC of |1|. Compare different similarity metrics. The ones most commonly used are (Pearson) correlation (centered or uncentered) and Euclidean difference, but see what clustering with other metrics looks like. What happens to the heat map and tree look when you use different linkage methods (centroid, single, complete, or average)? 11.6 Questions Using the Gasch_2000 dataset, filter the data on 80% present, and then cluster with uncentered correlation, calculated weights on arrays (so click on the box in “Genes”) with a cutoff of 0.7 and an exponent of 1, and click centroid linkage. Search for the gene DCG1 (a gene of unknown function). Based on the genes immediately surround DCG1 in the heat map, what would you predict the function of DCG1 to be and why? Download the DE_yeast_TF_stress.txt dataset from the OneDrive (in the same Clustering folder as for the Gasch_2000 dataset). These data include logFC and FDR corrected-pvalues for both the NaCl (salt) response and the EtOH response for WT yeast, an msn2/4∆∆ deletion mutant (which we’ve looked at before), and deletion mutants for two other transcription factors, yap1∆, and skn7∆. Create a PCL file combining just the logFC data for the EtOH and NaCl responses for the WT and mutant strains (so, leave out the WT vs mutant comparisons). Cluster the genes using the Correlation (uncentered), which is the uncentered Pearson correlation, and click “Centroid linkage.” Save the job with a name that denotes those choices. Then, change the similarity metric to Euclidean distance and repeat the clustering (still Centroid linkage). How does using Euclidean distance affect the clustering and why? When might you want to use Euclidean distance as your similarity metric? Repeat the clustering using Absolute correlation (uncentered) and Centroid linkage. How does this affect the clustering and why? Can you think of a circumstance where Absolute correlation would be useful? Make two new PCL files separating the ethanol responses and salt responses, and cluster the data separately. This time cluster on arrays as well as genes. Try different filters and clustering methods until you find one that you feel captures the data, and note your clustering parameters. Based on your clustering, which transcription factor looks to be most responsible for the regulating the ethanol response? Which transcription factors seems most responsibel for the salt response? Looking back at the FDR corrected p-values for each TF’s response (WT v mutant comparisons), does this match your expectations from the clustering. Why might clustering and differential expression analysis yield different answers to the question of which TF is most important for a response? Using the clustering that you settled on for question #4, identify the single main cluster for each that contains genes affected by the muations in msn2/4. Make a figure highlighting those clusters by exporting the thumbnail images and importing into PowerPoint (or another graphics program if you prefer) and drawing a line next to the clusters (e.g., Figure 4 from this paper). Use the Princeton GO term Finder to identify BP enrichments for those clusters, and annotate the top 5 terms to the figure. Save as a PDF to embed into your homework document. "]]
